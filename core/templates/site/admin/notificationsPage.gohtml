{{ template "head" $ }}
    [<a href="/admin">Admin:</a> <a href="/admin/notifications">(This page/Refresh)</a>]<br />
    <div>Total: {{ .Total }} Unread: {{ .Unread }}</div>
<form method="post">
    {{ csrfField }}
    Message: <input type="text" name="message" size="40"><br />
    Link: <input type="text" name="link" size="40"><br />
    Users: <input type="text" name="users" size="20"> (comma separated usernames)<br />
    Role: <select name="role">
        <option value="">Everyone</option>
        {{- range $.Roles }}
        <option value="{{.Name}}">{{.Name}}</option>
        {{- end }}
    </select>
    <input type="submit" name="task" value="Notify">
</form>
<form method="post">
    {{ csrfField }}
<table border="1">
    <tr><th><label><input type="checkbox" id="select-all"> All</label>
        <button type="button" id="select-none">None</button>
        <button type="button" id="select-invert">Invert</button></th><th>ID</th><th>User</th><th>Message</th><th>Link</th><th>Read</th></tr>
    {{- range .Notifications }}
    <tr>
        <td><input type="checkbox" name="id" value="{{ .ID }}"></td>
        <td>{{ .ID }}</td>
        {{- $id := .UsersIdusers -}}
        <td>{{ with index $.Usernames $id }}<a href="/admin/user/{{ $id }}">{{ . }}</a>{{ else }}{{ $id }}{{ end }}</td>
        <td>{{ .Message.String }}</td>
        <td>{{ .Link.String }}</td>
        <td><a href="#" class="toggle-read" data-id="{{ .ID }}">{{ if .ReadAt.Valid }}yes{{ else }}no{{ end }}</a></td>
    </tr>
    {{- end }}
</table>
<input type="submit" name="task" value="Dismiss">
<input type="submit" name="task" value="Mark unread">
<input type="submit" name="task" value="Purge selected">
<button type="submit" name="task" value="Purge read">Purge read notifications</button>
</form>
<script>
(() => {
    const selectAll = document.getElementById('select-all');
    const selectNone = document.getElementById('select-none');
    const selectInvert = document.getElementById('select-invert');
    const boxes = Array.from(document.querySelectorAll('input[type="checkbox"][name="id"]'));
    let last;

    function updateAll() {
        selectAll.checked = boxes.every(cb => cb.checked);
    }

    selectAll.addEventListener('change', () => {
        boxes.forEach(cb => { cb.checked = selectAll.checked; });
        updateAll();
    });

    selectNone.addEventListener('click', () => {
        boxes.forEach(cb => { cb.checked = false; });
        updateAll();
    });

    selectInvert.addEventListener('click', () => {
        boxes.forEach(cb => { cb.checked = !cb.checked; });
        updateAll();
    });

    boxes.forEach(cb => {
        cb.addEventListener('click', e => {
            if (last && e.shiftKey) {
                const start = boxes.indexOf(last);
                const end = boxes.indexOf(cb);
                const [s, eIdx] = start < end ? [start, end] : [end, start];
                for (let i = s; i <= eIdx; i++) {
                    boxes[i].checked = cb.checked;
                }
            }
            last = cb;
            updateAll();
        });
        cb.addEventListener('change', updateAll);
    });

    document.querySelectorAll('.toggle-read').forEach(link => {
        link.addEventListener('click', e => {
            e.preventDefault();
            const data = new URLSearchParams();
            data.set('gorilla.csrf.Token', '{{ csrfToken }}');
            data.set('task', 'Toggle read');
            data.set('id', link.dataset.id);
            fetch('/admin/notifications', {method: 'POST', body: data}).then(() => { location.reload(); });
        });
    });
})();
</script>
{{ template "tail" $ }}
