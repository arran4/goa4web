<h3>Grants</h3>
<style>
.pill{display:inline-block;padding:2px 6px;margin:2px;border-radius:10px;background:#e0e0e0;cursor:move;}
.have .pill{background:#c8e6c9;}
.available .pill{background:#f0f0f0;}
.pill.moved{background:#ffecb3;}
</style>
<table border="1">
    <tr><th>Section</th><th>Item</th><th>Item ID</th><th>Info</th><th>Has</th><th>Can Have</th><th>Commit</th></tr>
    {{- range .GrantGroups }}
    <tr data-section="{{ .Section }}" data-item="{{ .Item }}" data-itemid="{{ if .ItemID.Valid }}{{ .ItemID.Int32 }}{{ end }}">
        <td>{{ .Section }}</td>
        <td>{{ .Item }}</td>
        <td>{{ if .ItemID.Valid }}{{ .ItemID.Int32 }}{{ end }}</td>
        <td>{{ .Info }}</td>
        <td class="have">
            {{- range .Have }}<span class="pill" draggable="true" data-default="have">{{ . }}</span>{{- end }}
        </td>
        <td class="available">
            {{- range .Available }}<span class="pill" draggable="true" data-default="available">{{ . }}</span>{{- end }}
        </td>
        <td>
            <form method="post" action="/admin/role/{{ $.Role.ID }}/grant/update" class="commit-form">
            {{ csrfField }}
                <input type="hidden" name="section" value="{{ .Section }}">
                <input type="hidden" name="item" value="{{ .Item }}">
                <input type="hidden" name="item_id" value="{{ if .ItemID.Valid }}{{ .ItemID.Int32 }}{{ end }}">
                <input type="hidden" name="actions" value="">
                <input type="submit" value="Commit" style="display:none;">
            </form>
        </td>
    </tr>
    {{- end }}
</table>
<script>
document.querySelectorAll('tr[data-section]').forEach(function(row){
    const have=row.querySelector('.have');
    const avail=row.querySelector('.available');
    const form=row.querySelector('.commit-form');
    const btn=form.querySelector('input[type="submit"]');
    function updateBtn(){btn.style.display=row.querySelectorAll('.pill.moved').length>0?'inline':'none';}
    function dropHandler(e){
        e.preventDefault();
        const pill=document.querySelector('.pill.dragging');
        if(!pill||e.currentTarget===pill.parentNode)return;
        e.currentTarget.appendChild(pill);
        const tgt=e.currentTarget.classList.contains('have')?'have':'available';
        if(pill.dataset.default!==tgt){pill.classList.add('moved');}else{pill.classList.remove('moved');}
        updateBtn();
    }
    [have,avail].forEach(function(col){
        col.addEventListener('dragstart',function(e){if(e.target.classList.contains('pill')){e.dataTransfer.setData('text',e.target.textContent);e.dataTransfer.effectAllowed='move';e.target.classList.add('dragging');}});
        col.addEventListener('dragend',function(e){e.target.classList.remove('dragging');});
        col.addEventListener('dragover',function(e){e.preventDefault();});
        col.addEventListener('drop',dropHandler);
    });
    form.addEventListener('submit',function(){
        const acts=Array.from(have.querySelectorAll('.pill')).map(p=>p.textContent.trim());
        form.querySelector('input[name="actions"]').value=acts.join(',');
    });
});
</script>
