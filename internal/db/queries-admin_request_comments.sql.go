// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries-admin_request_comments.sql

package db

import (
	"context"
)

const adminInsertRequestComment = `-- name: AdminInsertRequestComment :exec
INSERT INTO admin_request_comments (request_id, comment)
VALUES (?, ?)
`

type AdminInsertRequestCommentParams struct {
	RequestID int32
	Comment   string
}

func (q *Queries) AdminInsertRequestComment(ctx context.Context, arg AdminInsertRequestCommentParams) error {
	_, err := q.db.ExecContext(ctx, adminInsertRequestComment, arg.RequestID, arg.Comment)
	return err
}

const adminListRequestComments = `-- name: AdminListRequestComments :many
SELECT id, request_id, comment, created_at
FROM admin_request_comments
WHERE request_id = ?
ORDER BY id DESC
`

func (q *Queries) AdminListRequestComments(ctx context.Context, requestID int32) ([]*AdminRequestComment, error) {
	rows, err := q.db.QueryContext(ctx, adminListRequestComments, requestID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*AdminRequestComment
	for rows.Next() {
		var i AdminRequestComment
		if err := rows.Scan(
			&i.ID,
			&i.RequestID,
			&i.Comment,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
