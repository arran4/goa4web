// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries-admin_request_queue.sql

package db

import (
	"context"
	"database/sql"
)

const getAdminRequestByID = `-- name: GetAdminRequestByID :one
SELECT id, users_idusers, change_table, change_field, change_row_id, change_value, contact_options, status, created_at, acted_at
FROM admin_request_queue
WHERE id = ?
`

func (q *Queries) GetAdminRequestByID(ctx context.Context, id int32) (*AdminRequestQueue, error) {
	row := q.db.QueryRowContext(ctx, getAdminRequestByID, id)
	var i AdminRequestQueue
	err := row.Scan(
		&i.ID,
		&i.UsersIdusers,
		&i.ChangeTable,
		&i.ChangeField,
		&i.ChangeRowID,
		&i.ChangeValue,
		&i.ContactOptions,
		&i.Status,
		&i.CreatedAt,
		&i.ActedAt,
	)
	return &i, err
}

const insertAdminRequestQueue = `-- name: InsertAdminRequestQueue :execresult
INSERT INTO admin_request_queue (users_idusers, change_table, change_field, change_row_id, change_value, contact_options)
VALUES (?, ?, ?, ?, ?, ?)
`

type InsertAdminRequestQueueParams struct {
	UsersIdusers   int32
	ChangeTable    string
	ChangeField    string
	ChangeRowID    int32
	ChangeValue    sql.NullString
	ContactOptions sql.NullString
}

func (q *Queries) InsertAdminRequestQueue(ctx context.Context, arg InsertAdminRequestQueueParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, insertAdminRequestQueue,
		arg.UsersIdusers,
		arg.ChangeTable,
		arg.ChangeField,
		arg.ChangeRowID,
		arg.ChangeValue,
		arg.ContactOptions,
	)
}

const listArchivedAdminRequests = `-- name: ListArchivedAdminRequests :many
SELECT id, users_idusers, change_table, change_field, change_row_id, change_value, contact_options, status, created_at, acted_at
FROM admin_request_queue
WHERE status <> 'pending'
ORDER BY id DESC
`

func (q *Queries) ListArchivedAdminRequests(ctx context.Context) ([]*AdminRequestQueue, error) {
	rows, err := q.db.QueryContext(ctx, listArchivedAdminRequests)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*AdminRequestQueue
	for rows.Next() {
		var i AdminRequestQueue
		if err := rows.Scan(
			&i.ID,
			&i.UsersIdusers,
			&i.ChangeTable,
			&i.ChangeField,
			&i.ChangeRowID,
			&i.ChangeValue,
			&i.ContactOptions,
			&i.Status,
			&i.CreatedAt,
			&i.ActedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPendingAdminRequests = `-- name: ListPendingAdminRequests :many
SELECT id, users_idusers, change_table, change_field, change_row_id, change_value, contact_options, status, created_at, acted_at
FROM admin_request_queue
WHERE status = 'pending'
ORDER BY id
`

func (q *Queries) ListPendingAdminRequests(ctx context.Context) ([]*AdminRequestQueue, error) {
	rows, err := q.db.QueryContext(ctx, listPendingAdminRequests)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*AdminRequestQueue
	for rows.Next() {
		var i AdminRequestQueue
		if err := rows.Scan(
			&i.ID,
			&i.UsersIdusers,
			&i.ChangeTable,
			&i.ChangeField,
			&i.ChangeRowID,
			&i.ChangeValue,
			&i.ContactOptions,
			&i.Status,
			&i.CreatedAt,
			&i.ActedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAdminRequestStatus = `-- name: UpdateAdminRequestStatus :exec
UPDATE admin_request_queue SET status = ?, acted_at = NOW() WHERE id = ?
`

type UpdateAdminRequestStatusParams struct {
	Status string
	ID     int32
}

func (q *Queries) UpdateAdminRequestStatus(ctx context.Context, arg UpdateAdminRequestStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateAdminRequestStatus, arg.Status, arg.ID)
	return err
}
