// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries-admin_user_comments.sql

package db

import (
	"context"
)

const insertAdminUserComment = `-- name: InsertAdminUserComment :exec
INSERT INTO admin_user_comments (users_idusers, comment)
VALUES (?, ?)
`

type InsertAdminUserCommentParams struct {
	UsersIdusers int32
	Comment      string
}

func (q *Queries) InsertAdminUserComment(ctx context.Context, arg InsertAdminUserCommentParams) error {
	_, err := q.db.ExecContext(ctx, insertAdminUserComment, arg.UsersIdusers, arg.Comment)
	return err
}

const latestAdminUserComment = `-- name: LatestAdminUserComment :one
SELECT id, users_idusers, comment, created_at
FROM admin_user_comments
WHERE users_idusers = ?
ORDER BY id DESC
LIMIT 1
`

func (q *Queries) LatestAdminUserComment(ctx context.Context, usersIdusers int32) (*AdminUserComment, error) {
	row := q.db.QueryRowContext(ctx, latestAdminUserComment, usersIdusers)
	var i AdminUserComment
	err := row.Scan(
		&i.ID,
		&i.UsersIdusers,
		&i.Comment,
		&i.CreatedAt,
	)
	return &i, err
}

const listAdminUserComments = `-- name: ListAdminUserComments :many
SELECT id, users_idusers, comment, created_at
FROM admin_user_comments
WHERE users_idusers = ?
ORDER BY id DESC
`

func (q *Queries) ListAdminUserComments(ctx context.Context, usersIdusers int32) ([]*AdminUserComment, error) {
	rows, err := q.db.QueryContext(ctx, listAdminUserComments, usersIdusers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*AdminUserComment
	for rows.Next() {
		var i AdminUserComment
		if err := rows.Scan(
			&i.ID,
			&i.UsersIdusers,
			&i.Comment,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
