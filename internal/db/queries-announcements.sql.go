// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries-announcements.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createAnnouncement = `-- name: CreateAnnouncement :exec
INSERT INTO site_announcements (site_news_id)
VALUES (?)
`

func (q *Queries) CreateAnnouncement(ctx context.Context, siteNewsID int32) error {
	_, err := q.db.ExecContext(ctx, createAnnouncement, siteNewsID)
	return err
}

const deleteAnnouncement = `-- name: DeleteAnnouncement :exec
DELETE FROM site_announcements WHERE id = ?
`

func (q *Queries) DeleteAnnouncement(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteAnnouncement, id)
	return err
}

const getActiveAnnouncementWithNews = `-- name: GetActiveAnnouncementWithNews :one
SELECT a.id, n.idsiteNews, n.news
FROM site_announcements a
JOIN site_news n ON n.idsiteNews = a.site_news_id
WHERE a.active = 1
ORDER BY a.created_at DESC
LIMIT 1
`

type GetActiveAnnouncementWithNewsRow struct {
	ID         int32
	Idsitenews int32
	News       sql.NullString
}

func (q *Queries) GetActiveAnnouncementWithNews(ctx context.Context) (*GetActiveAnnouncementWithNewsRow, error) {
	row := q.db.QueryRowContext(ctx, getActiveAnnouncementWithNews)
	var i GetActiveAnnouncementWithNewsRow
	err := row.Scan(&i.ID, &i.Idsitenews, &i.News)
	return &i, err
}

const getLatestAnnouncementByNewsID = `-- name: GetLatestAnnouncementByNewsID :one
SELECT id, site_news_id, active, created_at
FROM site_announcements
WHERE site_news_id = ?
ORDER BY created_at DESC
LIMIT 1
`

func (q *Queries) GetLatestAnnouncementByNewsID(ctx context.Context, siteNewsID int32) (*SiteAnnouncement, error) {
	row := q.db.QueryRowContext(ctx, getLatestAnnouncementByNewsID, siteNewsID)
	var i SiteAnnouncement
	err := row.Scan(
		&i.ID,
		&i.SiteNewsID,
		&i.Active,
		&i.CreatedAt,
	)
	return &i, err
}

const listAnnouncementsWithNews = `-- name: ListAnnouncementsWithNews :many
SELECT a.id, a.site_news_id, a.active, a.created_at, n.news
FROM site_announcements a
JOIN site_news n ON n.idsiteNews = a.site_news_id
ORDER BY a.created_at DESC
`

type ListAnnouncementsWithNewsRow struct {
	ID         int32
	SiteNewsID int32
	Active     bool
	CreatedAt  time.Time
	News       sql.NullString
}

func (q *Queries) ListAnnouncementsWithNews(ctx context.Context) ([]*ListAnnouncementsWithNewsRow, error) {
	rows, err := q.db.QueryContext(ctx, listAnnouncementsWithNews)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*ListAnnouncementsWithNewsRow
	for rows.Next() {
		var i ListAnnouncementsWithNewsRow
		if err := rows.Scan(
			&i.ID,
			&i.SiteNewsID,
			&i.Active,
			&i.CreatedAt,
			&i.News,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setAnnouncementActive = `-- name: SetAnnouncementActive :exec
UPDATE site_announcements SET active = ? WHERE id = ?
`

type SetAnnouncementActiveParams struct {
	Active bool
	ID     int32
}

func (q *Queries) SetAnnouncementActive(ctx context.Context, arg SetAnnouncementActiveParams) error {
	_, err := q.db.ExecContext(ctx, setAnnouncementActive, arg.Active, arg.ID)
	return err
}
