// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries-auditlog.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const adminInsertAuditLog = `-- name: AdminInsertAuditLog :exec
INSERT INTO audit_log (users_idusers, action, path, details, data)
VALUES (?, ?, ?, ?, ?)
`

type AdminInsertAuditLogParams struct {
	UsersIdusers int32
	Action       string
	Path         string
	Details      sql.NullString
	Data         sql.NullString
}

// admin task
func (q *Queries) AdminInsertAuditLog(ctx context.Context, arg AdminInsertAuditLogParams) error {
	_, err := q.db.ExecContext(ctx, adminInsertAuditLog,
		arg.UsersIdusers,
		arg.Action,
		arg.Path,
		arg.Details,
		arg.Data,
	)
	return err
}

const adminListAuditLogs = `-- name: AdminListAuditLogs :many
SELECT a.id, a.users_idusers, a.action, a.path, a.details, a.data, a.created_at, u.username
FROM audit_log a
LEFT JOIN users u ON a.users_idusers = u.idusers
WHERE u.username LIKE ? AND a.action LIKE ?
ORDER BY a.id DESC
LIMIT ? OFFSET ?
`

type AdminListAuditLogsParams struct {
	Username sql.NullString
	Action   string
	Limit    int32
	Offset   int32
}

type AdminListAuditLogsRow struct {
	ID           int32
	UsersIdusers int32
	Action       string
	Path         string
	Details      sql.NullString
	Data         sql.NullString
	CreatedAt    time.Time
	Username     sql.NullString
}

// admin task
func (q *Queries) AdminListAuditLogs(ctx context.Context, arg AdminListAuditLogsParams) ([]*AdminListAuditLogsRow, error) {
	rows, err := q.db.QueryContext(ctx, adminListAuditLogs,
		arg.Username,
		arg.Action,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*AdminListAuditLogsRow
	for rows.Next() {
		var i AdminListAuditLogsRow
		if err := rows.Scan(
			&i.ID,
			&i.UsersIdusers,
			&i.Action,
			&i.Path,
			&i.Details,
			&i.Data,
			&i.CreatedAt,
			&i.Username,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
