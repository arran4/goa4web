// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries-banned_ips.sql

package db

import (
	"context"
	"database/sql"
)

const cancelBannedIpForAdmin = `-- name: CancelBannedIpForAdmin :exec
UPDATE banned_ips SET canceled_at = CURRENT_TIMESTAMP WHERE ip_net = ? AND canceled_at IS NULL
`

func (q *Queries) CancelBannedIpForAdmin(ctx context.Context, ipNet string) error {
	_, err := q.db.ExecContext(ctx, cancelBannedIpForAdmin, ipNet)
	return err
}

const getBannedIpByAddressForAdmin = `-- name: GetBannedIpByAddressForAdmin :one
SELECT id, ip_net, reason, created_at, expires_at, canceled_at FROM banned_ips WHERE ip_net = ?
`

func (q *Queries) GetBannedIpByAddressForAdmin(ctx context.Context, ipNet string) (*BannedIp, error) {
	row := q.db.QueryRowContext(ctx, getBannedIpByAddressForAdmin, ipNet)
	var i BannedIp
	err := row.Scan(
		&i.ID,
		&i.IpNet,
		&i.Reason,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.CanceledAt,
	)
	return &i, err
}

const insertBannedIpForAdmin = `-- name: InsertBannedIpForAdmin :exec
INSERT INTO banned_ips (ip_net, reason, expires_at)
VALUES (?, ?, ?)
`

type InsertBannedIpForAdminParams struct {
	IpNet     string
	Reason    sql.NullString
	ExpiresAt sql.NullTime
}

func (q *Queries) InsertBannedIpForAdmin(ctx context.Context, arg InsertBannedIpForAdminParams) error {
	_, err := q.db.ExecContext(ctx, insertBannedIpForAdmin, arg.IpNet, arg.Reason, arg.ExpiresAt)
	return err
}

const listActiveBansSystem = `-- name: ListActiveBansSystem :many
SELECT id, ip_net, reason, created_at, expires_at, canceled_at FROM banned_ips WHERE canceled_at IS NULL AND (expires_at IS NULL OR expires_at > NOW())
`

func (q *Queries) ListActiveBansSystem(ctx context.Context) ([]*BannedIp, error) {
	rows, err := q.db.QueryContext(ctx, listActiveBansSystem)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*BannedIp
	for rows.Next() {
		var i BannedIp
		if err := rows.Scan(
			&i.ID,
			&i.IpNet,
			&i.Reason,
			&i.CreatedAt,
			&i.ExpiresAt,
			&i.CanceledAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listBannedIpsForAdmin = `-- name: ListBannedIpsForAdmin :many
SELECT id, ip_net, reason, created_at, expires_at, canceled_at FROM banned_ips ORDER BY created_at DESC
`

func (q *Queries) ListBannedIpsForAdmin(ctx context.Context) ([]*BannedIp, error) {
	rows, err := q.db.QueryContext(ctx, listBannedIpsForAdmin)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*BannedIp
	for rows.Next() {
		var i BannedIp
		if err := rows.Scan(
			&i.ID,
			&i.IpNet,
			&i.Reason,
			&i.CreatedAt,
			&i.ExpiresAt,
			&i.CanceledAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBannedIpForAdmin = `-- name: UpdateBannedIpForAdmin :exec
UPDATE banned_ips SET reason = ?, expires_at = ? WHERE id = ?
`

type UpdateBannedIpForAdminParams struct {
	Reason    sql.NullString
	ExpiresAt sql.NullTime
	ID        int32
}

func (q *Queries) UpdateBannedIpForAdmin(ctx context.Context, arg UpdateBannedIpForAdminParams) error {
	_, err := q.db.ExecContext(ctx, updateBannedIpForAdmin, arg.Reason, arg.ExpiresAt, arg.ID)
	return err
}
