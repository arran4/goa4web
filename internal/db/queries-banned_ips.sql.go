// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries-banned_ips.sql

package db

import (
	"context"
	"database/sql"
)

const adminCancelBannedIp = `-- name: AdminCancelBannedIp :exec
UPDATE banned_ips SET canceled_at = CURRENT_TIMESTAMP WHERE ip_net = ? AND canceled_at IS NULL
`

// admin task
func (q *Queries) AdminCancelBannedIp(ctx context.Context, ipNet string) error {
	_, err := q.db.ExecContext(ctx, adminCancelBannedIp, ipNet)
	return err
}

const adminInsertBannedIp = `-- name: AdminInsertBannedIp :exec
INSERT INTO banned_ips (ip_net, reason, expires_at)
VALUES (?, ?, ?)
`

type AdminInsertBannedIpParams struct {
	IpNet     string
	Reason    sql.NullString
	ExpiresAt sql.NullTime
}

// admin task
func (q *Queries) AdminInsertBannedIp(ctx context.Context, arg AdminInsertBannedIpParams) error {
	_, err := q.db.ExecContext(ctx, adminInsertBannedIp, arg.IpNet, arg.Reason, arg.ExpiresAt)
	return err
}

const adminListBannedIps = `-- name: AdminListBannedIps :many
SELECT id, ip_net, reason, created_at, expires_at, canceled_at
FROM banned_ips
ORDER BY created_at DESC
`

// admin task
func (q *Queries) AdminListBannedIps(ctx context.Context) ([]*BannedIp, error) {
	rows, err := q.db.QueryContext(ctx, adminListBannedIps)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*BannedIp
	for rows.Next() {
		var i BannedIp
		if err := rows.Scan(
			&i.ID,
			&i.IpNet,
			&i.Reason,
			&i.CreatedAt,
			&i.ExpiresAt,
			&i.CanceledAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const adminUpdateBannedIp = `-- name: AdminUpdateBannedIp :exec
UPDATE banned_ips SET reason = ?, expires_at = ? WHERE id = ?
`

type AdminUpdateBannedIpParams struct {
	Reason    sql.NullString
	ExpiresAt sql.NullTime
	ID        int32
}

// admin task
func (q *Queries) AdminUpdateBannedIp(ctx context.Context, arg AdminUpdateBannedIpParams) error {
	_, err := q.db.ExecContext(ctx, adminUpdateBannedIp, arg.Reason, arg.ExpiresAt, arg.ID)
	return err
}

const systemListActiveBans = `-- name: SystemListActiveBans :many
SELECT ip_net
FROM banned_ips
WHERE canceled_at IS NULL AND (expires_at IS NULL OR expires_at > NOW())
`

func (q *Queries) SystemListActiveBans(ctx context.Context) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, systemListActiveBans)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var ip_net string
		if err := rows.Scan(&ip_net); err != nil {
			return nil, err
		}
		items = append(items, ip_net)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
