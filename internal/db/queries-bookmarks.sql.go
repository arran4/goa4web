// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries-bookmarks.sql

package db

import (
	"context"
	"database/sql"
)

const createBookmarksForLister = `-- name: CreateBookmarksForLister :exec
INSERT INTO bookmarks (users_idusers, list)
VALUES (?, ?)
`

type CreateBookmarksForListerParams struct {
	UsersIdusers int32
	List         sql.NullString
}

// This query adds a new entry to the "bookmarks" table for a lister.
func (q *Queries) CreateBookmarksForLister(ctx context.Context, arg CreateBookmarksForListerParams) error {
	_, err := q.db.ExecContext(ctx, createBookmarksForLister, arg.UsersIdusers, arg.List)
	return err
}

const getBookmarksForUser = `-- name: GetBookmarksForUser :one
SELECT Idbookmarks, list
FROM bookmarks
WHERE users_idusers = ?
`

type GetBookmarksForUserRow struct {
	Idbookmarks int32
	List        sql.NullString
}

// This query retrieves the "list" from the "bookmarks" table for a specific user based on their "users_idusers".
func (q *Queries) GetBookmarksForUser(ctx context.Context, usersIdusers int32) (*GetBookmarksForUserRow, error) {
	row := q.db.QueryRowContext(ctx, getBookmarksForUser, usersIdusers)
	var i GetBookmarksForUserRow
	err := row.Scan(&i.Idbookmarks, &i.List)
	return &i, err
}

const updateBookmarksForLister = `-- name: UpdateBookmarksForLister :exec
UPDATE bookmarks b
SET list = ?
WHERE b.users_idusers = ?
  AND EXISTS (
      SELECT 1 FROM grants g
      WHERE g.section='bookmarks'
        AND (g.item='list' OR g.item IS NULL)
        AND g.action='post'
        AND g.active=1
        AND (g.item_id = 0 OR g.item_id IS NULL)
        AND (g.user_id = ? OR g.user_id IS NULL)
        AND (g.role_id IS NULL OR g.role_id IN (
            SELECT ur.role_id FROM user_roles ur WHERE ur.users_idusers = ?
        ))
  )
`

type UpdateBookmarksForListerParams struct {
	List      sql.NullString
	ListerID  int32
	GranteeID sql.NullInt32
}

// This query updates the "list" column in the "bookmarks" table for a specific lister.
func (q *Queries) UpdateBookmarksForLister(ctx context.Context, arg UpdateBookmarksForListerParams) error {
	_, err := q.db.ExecContext(ctx, updateBookmarksForLister,
		arg.List,
		arg.ListerID,
		arg.GranteeID,
		arg.ListerID,
	)
	return err
}
