// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries-bookmarks.sql

package db

import (
	"context"
	"database/sql"
)

const createBookmarks = `-- name: CreateBookmarks :exec
INSERT INTO bookmarks (users_idusers, list)
VALUES (?, ?)
`

type CreateBookmarksParams struct {
	UsersIdusers int32
	List         sql.NullString
}

// This query adds a new entry to the "bookmarks" table and returns the last inserted ID as "returnthis".
func (q *Queries) CreateBookmarks(ctx context.Context, arg CreateBookmarksParams) error {
	_, err := q.db.ExecContext(ctx, createBookmarks, arg.UsersIdusers, arg.List)
	return err
}

const getBookmarksForUser = `-- name: GetBookmarksForUser :one
SELECT Idbookmarks, list
FROM bookmarks
WHERE users_idusers = ?
`

type GetBookmarksForUserRow struct {
	Idbookmarks int32
	List        sql.NullString
}

// This query retrieves the "list" from the "bookmarks" table for a specific user based on their "users_idusers".
func (q *Queries) GetBookmarksForUser(ctx context.Context, usersIdusers int32) (*GetBookmarksForUserRow, error) {
	row := q.db.QueryRowContext(ctx, getBookmarksForUser, usersIdusers)
	var i GetBookmarksForUserRow
	err := row.Scan(&i.Idbookmarks, &i.List)
	return &i, err
}

const updateBookmarks = `-- name: UpdateBookmarks :exec
UPDATE bookmarks
SET list = ?
WHERE users_idusers = ?
`

type UpdateBookmarksParams struct {
	List         sql.NullString
	UsersIdusers int32
}

// This query updates the "list" column in the "bookmarks" table for a specific user based on their "users_idusers".
func (q *Queries) UpdateBookmarks(ctx context.Context, arg UpdateBookmarksParams) error {
	_, err := q.db.ExecContext(ctx, updateBookmarks, arg.List, arg.UsersIdusers)
	return err
}
