// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries-comments.sql

package db

import (
	"context"
	"database/sql"
	"strings"
)

const createComment = `-- name: CreateComment :execlastid
INSERT INTO comments (language_idlanguage, users_idusers, forumthread_idforumthread, text, written)
VALUES (?, ?, ?, ?, NOW() )
`

type CreateCommentParams struct {
	LanguageIdlanguage       int32
	UsersIdusers             int32
	ForumthreadIdforumthread int32
	Text                     sql.NullString
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createComment,
		arg.LanguageIdlanguage,
		arg.UsersIdusers,
		arg.ForumthreadIdforumthread,
		arg.Text,
	)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const getAllCommentsByUser = `-- name: GetAllCommentsByUser :many
SELECT c.idcomments, c.forumthread_idforumthread, c.users_idusers, c.language_idlanguage, c.written, c.text, c.deleted_at, th.forumtopic_idforumtopic
FROM comments c
LEFT JOIN forumthread th ON c.forumthread_idforumthread = th.idforumthread
WHERE c.users_idusers = ?
ORDER BY c.written
`

type GetAllCommentsByUserRow struct {
	Idcomments               int32
	ForumthreadIdforumthread int32
	UsersIdusers             int32
	LanguageIdlanguage       int32
	Written                  sql.NullTime
	Text                     sql.NullString
	DeletedAt                sql.NullTime
	ForumtopicIdforumtopic   sql.NullInt32
}

func (q *Queries) GetAllCommentsByUser(ctx context.Context, usersIdusers int32) ([]*GetAllCommentsByUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllCommentsByUser, usersIdusers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetAllCommentsByUserRow
	for rows.Next() {
		var i GetAllCommentsByUserRow
		if err := rows.Scan(
			&i.Idcomments,
			&i.ForumthreadIdforumthread,
			&i.UsersIdusers,
			&i.LanguageIdlanguage,
			&i.Written,
			&i.Text,
			&i.DeletedAt,
			&i.ForumtopicIdforumtopic,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCommentById = `-- name: GetCommentById :one
SELECT c.idcomments, c.forumthread_idforumthread, c.users_idusers, c.language_idlanguage, c.written, c.text, c.deleted_at
FROM comments c
WHERE c.Idcomments=?
`

func (q *Queries) GetCommentById(ctx context.Context, idcomments int32) (*Comment, error) {
	row := q.db.QueryRowContext(ctx, getCommentById, idcomments)
	var i Comment
	err := row.Scan(
		&i.Idcomments,
		&i.ForumthreadIdforumthread,
		&i.UsersIdusers,
		&i.LanguageIdlanguage,
		&i.Written,
		&i.Text,
		&i.DeletedAt,
	)
	return &i, err
}

const getCommentByIdForUser = `-- name: GetCommentByIdForUser :one
SELECT c.idcomments, c.forumthread_idforumthread, c.users_idusers, c.language_idlanguage, c.written, c.text, c.deleted_at, pu.Username
FROM comments c
LEFT JOIN forumthread th ON c.forumthread_idforumthread=th.idforumthread
LEFT JOIN forumtopic t ON th.forumtopic_idforumtopic=t.idforumtopic
LEFT JOIN topicrestrictions r ON t.idforumtopic = r.forumtopic_idforumtopic
LEFT JOIN userstopiclevel u ON u.forumtopic_idforumtopic = t.idforumtopic AND u.users_idusers = ?
LEFT JOIN users pu ON pu.idusers = c.users_idusers
WHERE c.idcomments = ? AND IF(r.seelevel IS NOT NULL, r.seelevel , 0) <= IF(u.level IS NOT NULL, u.level, 0)
LIMIT 1
`

type GetCommentByIdForUserParams struct {
	UsersIdusers int32
	Idcomments   int32
}

type GetCommentByIdForUserRow struct {
	Idcomments               int32
	ForumthreadIdforumthread int32
	UsersIdusers             int32
	LanguageIdlanguage       int32
	Written                  sql.NullTime
	Text                     sql.NullString
	DeletedAt                sql.NullTime
	Username                 sql.NullString
}

func (q *Queries) GetCommentByIdForUser(ctx context.Context, arg GetCommentByIdForUserParams) (*GetCommentByIdForUserRow, error) {
	row := q.db.QueryRowContext(ctx, getCommentByIdForUser, arg.UsersIdusers, arg.Idcomments)
	var i GetCommentByIdForUserRow
	err := row.Scan(
		&i.Idcomments,
		&i.ForumthreadIdforumthread,
		&i.UsersIdusers,
		&i.LanguageIdlanguage,
		&i.Written,
		&i.Text,
		&i.DeletedAt,
		&i.Username,
	)
	return &i, err
}

const getCommentsByIds = `-- name: GetCommentsByIds :many
SELECT c.idcomments, c.forumthread_idforumthread, c.users_idusers, c.language_idlanguage, c.written, c.text, c.deleted_at
FROM comments c
WHERE c.Idcomments IN (/*SLICE:ids*/?)
`

func (q *Queries) GetCommentsByIds(ctx context.Context, ids []int32) ([]*Comment, error) {
	query := getCommentsByIds
	var queryParams []interface{}
	if len(ids) > 0 {
		for _, v := range ids {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:ids*/?", strings.Repeat(",?", len(ids))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:ids*/?", "NULL", 1)
	}
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.Idcomments,
			&i.ForumthreadIdforumthread,
			&i.UsersIdusers,
			&i.LanguageIdlanguage,
			&i.Written,
			&i.Text,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCommentsByIdsForUserWithThreadInfo = `-- name: GetCommentsByIdsForUserWithThreadInfo :many
SELECT c.idcomments, c.forumthread_idforumthread, c.users_idusers, c.language_idlanguage, c.written, c.text, c.deleted_at, pu.username AS posterusername, th.idforumthread, t.idforumtopic, t.title AS forumtopic_title, fc.idforumcategory, fc.title AS forumcategory_title
FROM comments c
LEFT JOIN forumthread th ON c.forumthread_idforumthread=th.idforumthread
LEFT JOIN forumtopic t ON th.forumtopic_idforumtopic=t.idforumtopic
LEFT JOIN topicrestrictions r ON t.idforumtopic = r.forumtopic_idforumtopic
LEFT JOIN userstopiclevel u ON u.forumtopic_idforumtopic = t.idforumtopic AND u.users_idusers = ?
LEFT JOIN users pu ON pu.idusers = c.users_idusers
LEFT JOIN forumcategory fc ON t.forumcategory_idforumcategory = fc.idforumcategory
WHERE c.Idcomments IN (/*SLICE:ids*/?)
ORDER BY c.written DESC
`

type GetCommentsByIdsForUserWithThreadInfoParams struct {
	UsersIdusers int32
	Ids          []int32
}

type GetCommentsByIdsForUserWithThreadInfoRow struct {
	Idcomments               int32
	ForumthreadIdforumthread int32
	UsersIdusers             int32
	LanguageIdlanguage       int32
	Written                  sql.NullTime
	Text                     sql.NullString
	DeletedAt                sql.NullTime
	Posterusername           sql.NullString
	Idforumthread            sql.NullInt32
	Idforumtopic             sql.NullInt32
	ForumtopicTitle          sql.NullString
	Idforumcategory          sql.NullInt32
	ForumcategoryTitle       sql.NullString
}

func (q *Queries) GetCommentsByIdsForUserWithThreadInfo(ctx context.Context, arg GetCommentsByIdsForUserWithThreadInfoParams) ([]*GetCommentsByIdsForUserWithThreadInfoRow, error) {
	query := getCommentsByIdsForUserWithThreadInfo
	var queryParams []interface{}
	queryParams = append(queryParams, arg.UsersIdusers)
	if len(arg.Ids) > 0 {
		for _, v := range arg.Ids {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:ids*/?", strings.Repeat(",?", len(arg.Ids))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:ids*/?", "NULL", 1)
	}
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetCommentsByIdsForUserWithThreadInfoRow
	for rows.Next() {
		var i GetCommentsByIdsForUserWithThreadInfoRow
		if err := rows.Scan(
			&i.Idcomments,
			&i.ForumthreadIdforumthread,
			&i.UsersIdusers,
			&i.LanguageIdlanguage,
			&i.Written,
			&i.Text,
			&i.DeletedAt,
			&i.Posterusername,
			&i.Idforumthread,
			&i.Idforumtopic,
			&i.ForumtopicTitle,
			&i.Idforumcategory,
			&i.ForumcategoryTitle,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCommentsByThreadIdForUser = `-- name: GetCommentsByThreadIdForUser :many
SELECT c.idcomments, c.forumthread_idforumthread, c.users_idusers, c.language_idlanguage, c.written, c.text, c.deleted_at, pu.username AS posterusername
FROM comments c
LEFT JOIN forumthread th ON c.forumthread_idforumthread=th.idforumthread
LEFT JOIN forumtopic t ON th.forumtopic_idforumtopic=t.idforumtopic
LEFT JOIN topicrestrictions r ON t.idforumtopic = r.forumtopic_idforumtopic
LEFT JOIN userstopiclevel u ON u.forumtopic_idforumtopic = t.idforumtopic AND u.users_idusers = ?
LEFT JOIN users pu ON pu.idusers = c.users_idusers
WHERE c.forumthread_idforumthread=? AND c.forumthread_idforumthread!=0 AND IF(r.seelevel IS NOT NULL, r.seelevel , 0) <= IF(u.level IS NOT NULL, u.level, 0)
ORDER BY c.written
`

type GetCommentsByThreadIdForUserParams struct {
	UsersIdusers             int32
	ForumthreadIdforumthread int32
}

type GetCommentsByThreadIdForUserRow struct {
	Idcomments               int32
	ForumthreadIdforumthread int32
	UsersIdusers             int32
	LanguageIdlanguage       int32
	Written                  sql.NullTime
	Text                     sql.NullString
	DeletedAt                sql.NullTime
	Posterusername           sql.NullString
}

func (q *Queries) GetCommentsByThreadIdForUser(ctx context.Context, arg GetCommentsByThreadIdForUserParams) ([]*GetCommentsByThreadIdForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getCommentsByThreadIdForUser, arg.UsersIdusers, arg.ForumthreadIdforumthread)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetCommentsByThreadIdForUserRow
	for rows.Next() {
		var i GetCommentsByThreadIdForUserRow
		if err := rows.Scan(
			&i.Idcomments,
			&i.ForumthreadIdforumthread,
			&i.UsersIdusers,
			&i.LanguageIdlanguage,
			&i.Written,
			&i.Text,
			&i.DeletedAt,
			&i.Posterusername,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateComment = `-- name: UpdateComment :exec
UPDATE comments
SET language_idlanguage = ?, text = ?
WHERE idcomments = ?
`

type UpdateCommentParams struct {
	LanguageIdlanguage int32
	Text               sql.NullString
	Idcomments         int32
}

func (q *Queries) UpdateComment(ctx context.Context, arg UpdateCommentParams) error {
	_, err := q.db.ExecContext(ctx, updateComment, arg.LanguageIdlanguage, arg.Text, arg.Idcomments)
	return err
}
