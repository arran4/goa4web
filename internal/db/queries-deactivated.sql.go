// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries-deactivated.sql

package db

import (
	"context"
	"database/sql"
)

const anonymizeCommentsByUser = `-- name: AnonymizeCommentsByUser :exec
UPDATE comments
SET text = 'lorem ipsum dolor sit amet'
WHERE users_idusers = ?
`

func (q *Queries) AnonymizeCommentsByUser(ctx context.Context, usersIdusers int32) error {
	_, err := q.db.ExecContext(ctx, anonymizeCommentsByUser, usersIdusers)
	return err
}

const anonymizeUser = `-- name: AnonymizeUser :exec
UPDATE users
SET email = CONCAT('scrubbed_', idusers, '@example.com'),
    passwd = '',
    passwd_algorithm = '',
    username = CONCAT('scrubbed_', idusers)
WHERE idusers = ?
`

func (q *Queries) AnonymizeUser(ctx context.Context, idusers int32) error {
	_, err := q.db.ExecContext(ctx, anonymizeUser, idusers)
	return err
}

const copyCommentsFromDeactivatedByUser = `-- name: CopyCommentsFromDeactivatedByUser :exec
UPDATE comments c
JOIN deactivated_comments dc ON c.idcomments = dc.idcomments
SET c.text = dc.text
WHERE c.users_idusers = ?
`

func (q *Queries) CopyCommentsFromDeactivatedByUser(ctx context.Context, usersIdusers int32) error {
	_, err := q.db.ExecContext(ctx, copyCommentsFromDeactivatedByUser, usersIdusers)
	return err
}

const copyCommentsToDeactivatedByUser = `-- name: CopyCommentsToDeactivatedByUser :exec
INSERT INTO deactivated_comments (idcomments, forumthread_idforumthread, users_idusers, language_idlanguage, written, text)
SELECT c.idcomments, c.forumthread_idforumthread, c.users_idusers, c.language_idlanguage, c.written, c.text FROM comments c WHERE c.users_idusers = ?
`

func (q *Queries) CopyCommentsToDeactivatedByUser(ctx context.Context, usersIdusers int32) error {
	_, err := q.db.ExecContext(ctx, copyCommentsToDeactivatedByUser, usersIdusers)
	return err
}

const copyUserFromDeactivated = `-- name: CopyUserFromDeactivated :exec
UPDATE users u
JOIN deactivated_users du ON u.idusers = du.idusers
SET u.email = du.email,
    u.passwd = du.passwd,
    u.passwd_algorithm = du.passwd_algorithm,
    u.username = du.username
WHERE u.idusers = ?
`

func (q *Queries) CopyUserFromDeactivated(ctx context.Context, idusers int32) error {
	_, err := q.db.ExecContext(ctx, copyUserFromDeactivated, idusers)
	return err
}

const copyUserToDeactivated = `-- name: CopyUserToDeactivated :exec
INSERT INTO deactivated_users (idusers, email, passwd, passwd_algorithm, username)
SELECT u.idusers, u.email, u.passwd, u.passwd_algorithm, u.username FROM users u WHERE u.idusers = ?
`

func (q *Queries) CopyUserToDeactivated(ctx context.Context, idusers int32) error {
	_, err := q.db.ExecContext(ctx, copyUserToDeactivated, idusers)
	return err
}

const deletePermissionsByUser = `-- name: DeletePermissionsByUser :exec
DELETE FROM permissions WHERE users_idusers = ?
`

func (q *Queries) DeletePermissionsByUser(ctx context.Context, usersIdusers int32) error {
	_, err := q.db.ExecContext(ctx, deletePermissionsByUser, usersIdusers)
	return err
}

const deleteSessionsByUser = `-- name: DeleteSessionsByUser :exec
DELETE FROM sessions WHERE users_idusers = ?
`

func (q *Queries) DeleteSessionsByUser(ctx context.Context, usersIdusers int32) error {
	_, err := q.db.ExecContext(ctx, deleteSessionsByUser, usersIdusers)
	return err
}

const getDeactivatedUserByUsername = `-- name: GetDeactivatedUserByUsername :one
SELECT idusers, email, passwd, passwd_algorithm, username FROM deactivated_users WHERE username = ?
`

func (q *Queries) GetDeactivatedUserByUsername(ctx context.Context, username sql.NullString) (*DeactivatedUser, error) {
	row := q.db.QueryRowContext(ctx, getDeactivatedUserByUsername, username)
	var i DeactivatedUser
	err := row.Scan(
		&i.Idusers,
		&i.Email,
		&i.Passwd,
		&i.PasswdAlgorithm,
		&i.Username,
	)
	return &i, err
}

const removeCommentsByUser = `-- name: RemoveCommentsByUser :exec
DELETE FROM comments WHERE users_idusers = ?
`

func (q *Queries) RemoveCommentsByUser(ctx context.Context, usersIdusers int32) error {
	_, err := q.db.ExecContext(ctx, removeCommentsByUser, usersIdusers)
	return err
}

const removeDeactivatedCommentsByUser = `-- name: RemoveDeactivatedCommentsByUser :exec
DELETE FROM deactivated_comments WHERE users_idusers = ?
`

func (q *Queries) RemoveDeactivatedCommentsByUser(ctx context.Context, usersIdusers int32) error {
	_, err := q.db.ExecContext(ctx, removeDeactivatedCommentsByUser, usersIdusers)
	return err
}

const removeDeactivatedUserByID = `-- name: RemoveDeactivatedUserByID :exec
DELETE FROM deactivated_users WHERE idusers = ?
`

func (q *Queries) RemoveDeactivatedUserByID(ctx context.Context, idusers int32) error {
	_, err := q.db.ExecContext(ctx, removeDeactivatedUserByID, idusers)
	return err
}

const removeUserByID = `-- name: RemoveUserByID :exec
DELETE FROM users WHERE idusers = ?
`

func (q *Queries) RemoveUserByID(ctx context.Context, idusers int32) error {
	_, err := q.db.ExecContext(ctx, removeUserByID, idusers)
	return err
}
