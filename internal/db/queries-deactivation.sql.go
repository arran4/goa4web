// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries-deactivation.sql

package db

import (
	"context"
	"database/sql"
)

const adminArchiveBlog = `-- name: AdminArchiveBlog :exec
INSERT INTO deactivated_blogs (idblogs, forumthread_id, users_idusers, language_idlanguage, blog, written, deleted_at)
VALUES (?, ?, ?, ?, ?, ?, NOW())
`

type AdminArchiveBlogParams struct {
	Idblogs            int32
	ForumthreadID      int32
	UsersIdusers       int32
	LanguageIdlanguage sql.NullInt32
	Blog               sql.NullString
	Written            sql.NullTime
}

func (q *Queries) AdminArchiveBlog(ctx context.Context, arg AdminArchiveBlogParams) error {
	_, err := q.db.ExecContext(ctx, adminArchiveBlog,
		arg.Idblogs,
		arg.ForumthreadID,
		arg.UsersIdusers,
		arg.LanguageIdlanguage,
		arg.Blog,
		arg.Written,
	)
	return err
}

const adminArchiveComment = `-- name: AdminArchiveComment :exec
INSERT INTO deactivated_comments (idcomments, forumthread_id, users_idusers, language_idlanguage, written, text, deleted_at)
VALUES (?, ?, ?, ?, ?, ?, NOW())
`

type AdminArchiveCommentParams struct {
	Idcomments         int32
	ForumthreadID      int32
	UsersIdusers       int32
	LanguageIdlanguage sql.NullInt32
	Written            sql.NullTime
	Text               sql.NullString
}

func (q *Queries) AdminArchiveComment(ctx context.Context, arg AdminArchiveCommentParams) error {
	_, err := q.db.ExecContext(ctx, adminArchiveComment,
		arg.Idcomments,
		arg.ForumthreadID,
		arg.UsersIdusers,
		arg.LanguageIdlanguage,
		arg.Written,
		arg.Text,
	)
	return err
}

const adminArchiveImagepost = `-- name: AdminArchiveImagepost :exec
INSERT INTO deactivated_imageposts (idimagepost, forumthread_id, users_idusers, imageboard_idimageboard, posted, description, thumbnail, fullimage, file_size, approved, deleted_at)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, NOW())
`

type AdminArchiveImagepostParams struct {
	Idimagepost            int32
	ForumthreadID          int32
	UsersIdusers           int32
	ImageboardIdimageboard int32
	Posted                 sql.NullTime
	Description            sql.NullString
	Thumbnail              sql.NullString
	Fullimage              sql.NullString
	FileSize               int32
	Approved               sql.NullBool
}

func (q *Queries) AdminArchiveImagepost(ctx context.Context, arg AdminArchiveImagepostParams) error {
	_, err := q.db.ExecContext(ctx, adminArchiveImagepost,
		arg.Idimagepost,
		arg.ForumthreadID,
		arg.UsersIdusers,
		arg.ImageboardIdimageboard,
		arg.Posted,
		arg.Description,
		arg.Thumbnail,
		arg.Fullimage,
		arg.FileSize,
		arg.Approved,
	)
	return err
}

const adminArchiveLink = `-- name: AdminArchiveLink :exec
INSERT INTO deactivated_linker (idlinker, language_idlanguage, users_idusers, linker_category_id, forumthread_id, title, url, description, listed, deleted_at)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, NOW())
`

type AdminArchiveLinkParams struct {
	Idlinker           int32
	LanguageIdlanguage sql.NullInt32
	UsersIdusers       int32
	LinkerCategoryID   int32
	ForumthreadID      int32
	Title              sql.NullString
	Url                sql.NullString
	Description        sql.NullString
	Listed             sql.NullTime
}

func (q *Queries) AdminArchiveLink(ctx context.Context, arg AdminArchiveLinkParams) error {
	_, err := q.db.ExecContext(ctx, adminArchiveLink,
		arg.Idlinker,
		arg.LanguageIdlanguage,
		arg.UsersIdusers,
		arg.LinkerCategoryID,
		arg.ForumthreadID,
		arg.Title,
		arg.Url,
		arg.Description,
		arg.Listed,
	)
	return err
}

const adminArchiveUser = `-- name: AdminArchiveUser :exec

INSERT INTO deactivated_users (idusers, email, passwd, passwd_algorithm, username, deleted_at)
SELECT u.idusers, u.email, u.passwd, u.passwd_algorithm, u.username, NOW()
FROM users u WHERE u.idusers = ?
`

// Queries for user deactivation and restoration
func (q *Queries) AdminArchiveUser(ctx context.Context, idusers int32) error {
	_, err := q.db.ExecContext(ctx, adminArchiveUser, idusers)
	return err
}

const adminArchiveWriting = `-- name: AdminArchiveWriting :exec
INSERT INTO deactivated_writings (idwriting, users_idusers, forumthread_id, language_idlanguage, writing_category_id, title, published, writing, abstract, private, deleted_at)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, NOW())
`

type AdminArchiveWritingParams struct {
	Idwriting          int32
	UsersIdusers       int32
	ForumthreadID      int32
	LanguageIdlanguage sql.NullInt32
	WritingCategoryID  int32
	Title              sql.NullString
	Published          sql.NullTime
	Writing            sql.NullString
	Abstract           sql.NullString
	Private            sql.NullBool
}

func (q *Queries) AdminArchiveWriting(ctx context.Context, arg AdminArchiveWritingParams) error {
	_, err := q.db.ExecContext(ctx, adminArchiveWriting,
		arg.Idwriting,
		arg.UsersIdusers,
		arg.ForumthreadID,
		arg.LanguageIdlanguage,
		arg.WritingCategoryID,
		arg.Title,
		arg.Published,
		arg.Writing,
		arg.Abstract,
		arg.Private,
	)
	return err
}

const adminListPendingDeactivatedBlogs = `-- name: AdminListPendingDeactivatedBlogs :many
SELECT idblogs, blog FROM deactivated_blogs WHERE users_idusers = ? AND restored_at IS NULL
LIMIT ? OFFSET ?
`

type AdminListPendingDeactivatedBlogsParams struct {
	UsersIdusers int32
	Limit        int32
	Offset       int32
}

type AdminListPendingDeactivatedBlogsRow struct {
	Idblogs int32
	Blog    sql.NullString
}

func (q *Queries) AdminListPendingDeactivatedBlogs(ctx context.Context, arg AdminListPendingDeactivatedBlogsParams) ([]*AdminListPendingDeactivatedBlogsRow, error) {
	rows, err := q.db.QueryContext(ctx, adminListPendingDeactivatedBlogs, arg.UsersIdusers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*AdminListPendingDeactivatedBlogsRow
	for rows.Next() {
		var i AdminListPendingDeactivatedBlogsRow
		if err := rows.Scan(&i.Idblogs, &i.Blog); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const adminListPendingDeactivatedComments = `-- name: AdminListPendingDeactivatedComments :many
SELECT idcomments, text FROM deactivated_comments
WHERE users_idusers = ? AND restored_at IS NULL
LIMIT ? OFFSET ?
`

type AdminListPendingDeactivatedCommentsParams struct {
	UsersIdusers int32
	Limit        int32
	Offset       int32
}

type AdminListPendingDeactivatedCommentsRow struct {
	Idcomments int32
	Text       sql.NullString
}

func (q *Queries) AdminListPendingDeactivatedComments(ctx context.Context, arg AdminListPendingDeactivatedCommentsParams) ([]*AdminListPendingDeactivatedCommentsRow, error) {
	rows, err := q.db.QueryContext(ctx, adminListPendingDeactivatedComments, arg.UsersIdusers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*AdminListPendingDeactivatedCommentsRow
	for rows.Next() {
		var i AdminListPendingDeactivatedCommentsRow
		if err := rows.Scan(&i.Idcomments, &i.Text); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const adminListPendingDeactivatedImageposts = `-- name: AdminListPendingDeactivatedImageposts :many
SELECT idimagepost, description, thumbnail, fullimage FROM deactivated_imageposts WHERE users_idusers = ? AND restored_at IS NULL
LIMIT ? OFFSET ?
`

type AdminListPendingDeactivatedImagepostsParams struct {
	UsersIdusers int32
	Limit        int32
	Offset       int32
}

type AdminListPendingDeactivatedImagepostsRow struct {
	Idimagepost int32
	Description sql.NullString
	Thumbnail   sql.NullString
	Fullimage   sql.NullString
}

func (q *Queries) AdminListPendingDeactivatedImageposts(ctx context.Context, arg AdminListPendingDeactivatedImagepostsParams) ([]*AdminListPendingDeactivatedImagepostsRow, error) {
	rows, err := q.db.QueryContext(ctx, adminListPendingDeactivatedImageposts, arg.UsersIdusers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*AdminListPendingDeactivatedImagepostsRow
	for rows.Next() {
		var i AdminListPendingDeactivatedImagepostsRow
		if err := rows.Scan(
			&i.Idimagepost,
			&i.Description,
			&i.Thumbnail,
			&i.Fullimage,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const adminListPendingDeactivatedLinks = `-- name: AdminListPendingDeactivatedLinks :many
SELECT idlinker, title, url, description FROM deactivated_linker WHERE users_idusers = ? AND restored_at IS NULL
LIMIT ? OFFSET ?
`

type AdminListPendingDeactivatedLinksParams struct {
	UsersIdusers int32
	Limit        int32
	Offset       int32
}

type AdminListPendingDeactivatedLinksRow struct {
	Idlinker    int32
	Title       sql.NullString
	Url         sql.NullString
	Description sql.NullString
}

func (q *Queries) AdminListPendingDeactivatedLinks(ctx context.Context, arg AdminListPendingDeactivatedLinksParams) ([]*AdminListPendingDeactivatedLinksRow, error) {
	rows, err := q.db.QueryContext(ctx, adminListPendingDeactivatedLinks, arg.UsersIdusers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*AdminListPendingDeactivatedLinksRow
	for rows.Next() {
		var i AdminListPendingDeactivatedLinksRow
		if err := rows.Scan(
			&i.Idlinker,
			&i.Title,
			&i.Url,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const adminListPendingDeactivatedWritings = `-- name: AdminListPendingDeactivatedWritings :many
SELECT idwriting, title, writing, abstract, private FROM deactivated_writings
WHERE users_idusers = ? AND restored_at IS NULL
LIMIT ? OFFSET ?
`

type AdminListPendingDeactivatedWritingsParams struct {
	UsersIdusers int32
	Limit        int32
	Offset       int32
}

type AdminListPendingDeactivatedWritingsRow struct {
	Idwriting int32
	Title     sql.NullString
	Writing   sql.NullString
	Abstract  sql.NullString
	Private   sql.NullBool
}

func (q *Queries) AdminListPendingDeactivatedWritings(ctx context.Context, arg AdminListPendingDeactivatedWritingsParams) ([]*AdminListPendingDeactivatedWritingsRow, error) {
	rows, err := q.db.QueryContext(ctx, adminListPendingDeactivatedWritings, arg.UsersIdusers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*AdminListPendingDeactivatedWritingsRow
	for rows.Next() {
		var i AdminListPendingDeactivatedWritingsRow
		if err := rows.Scan(
			&i.Idwriting,
			&i.Title,
			&i.Writing,
			&i.Abstract,
			&i.Private,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const adminMarkBlogRestored = `-- name: AdminMarkBlogRestored :exec
UPDATE deactivated_blogs SET restored_at = NOW() WHERE idblogs = ?
`

func (q *Queries) AdminMarkBlogRestored(ctx context.Context, idblogs int32) error {
	_, err := q.db.ExecContext(ctx, adminMarkBlogRestored, idblogs)
	return err
}

const adminMarkCommentRestored = `-- name: AdminMarkCommentRestored :exec
UPDATE deactivated_comments SET restored_at = NOW() WHERE idcomments = ?
`

func (q *Queries) AdminMarkCommentRestored(ctx context.Context, idcomments int32) error {
	_, err := q.db.ExecContext(ctx, adminMarkCommentRestored, idcomments)
	return err
}

const adminMarkImagepostRestored = `-- name: AdminMarkImagepostRestored :exec
UPDATE deactivated_imageposts SET restored_at = NOW() WHERE idimagepost = ?
`

func (q *Queries) AdminMarkImagepostRestored(ctx context.Context, idimagepost int32) error {
	_, err := q.db.ExecContext(ctx, adminMarkImagepostRestored, idimagepost)
	return err
}

const adminMarkLinkRestored = `-- name: AdminMarkLinkRestored :exec
UPDATE deactivated_linker SET restored_at = NOW() WHERE idlinker = ?
`

func (q *Queries) AdminMarkLinkRestored(ctx context.Context, idlinker int32) error {
	_, err := q.db.ExecContext(ctx, adminMarkLinkRestored, idlinker)
	return err
}

const adminMarkWritingRestored = `-- name: AdminMarkWritingRestored :exec
UPDATE deactivated_writings SET restored_at = NOW() WHERE idwriting = ?
`

func (q *Queries) AdminMarkWritingRestored(ctx context.Context, idwriting int32) error {
	_, err := q.db.ExecContext(ctx, adminMarkWritingRestored, idwriting)
	return err
}

const adminRestoreBlog = `-- name: AdminRestoreBlog :exec
UPDATE blogs SET blog = ?, deleted_at = NULL WHERE idblogs = ?
`

type AdminRestoreBlogParams struct {
	Blog    sql.NullString
	Idblogs int32
}

func (q *Queries) AdminRestoreBlog(ctx context.Context, arg AdminRestoreBlogParams) error {
	_, err := q.db.ExecContext(ctx, adminRestoreBlog, arg.Blog, arg.Idblogs)
	return err
}

const adminRestoreComment = `-- name: AdminRestoreComment :exec
UPDATE comments SET text = ?, deleted_at = NULL WHERE idcomments = ?
`

type AdminRestoreCommentParams struct {
	Text       sql.NullString
	Idcomments int32
}

func (q *Queries) AdminRestoreComment(ctx context.Context, arg AdminRestoreCommentParams) error {
	_, err := q.db.ExecContext(ctx, adminRestoreComment, arg.Text, arg.Idcomments)
	return err
}

const adminRestoreImagepost = `-- name: AdminRestoreImagepost :exec
UPDATE imagepost SET description = ?, thumbnail = ?, fullimage = ?, deleted_at = NULL WHERE idimagepost = ?
`

type AdminRestoreImagepostParams struct {
	Description sql.NullString
	Thumbnail   sql.NullString
	Fullimage   sql.NullString
	Idimagepost int32
}

func (q *Queries) AdminRestoreImagepost(ctx context.Context, arg AdminRestoreImagepostParams) error {
	_, err := q.db.ExecContext(ctx, adminRestoreImagepost,
		arg.Description,
		arg.Thumbnail,
		arg.Fullimage,
		arg.Idimagepost,
	)
	return err
}

const adminRestoreLink = `-- name: AdminRestoreLink :exec
UPDATE linker SET title = ?, url = ?, description = ?, deleted_at = NULL WHERE idlinker = ?
`

type AdminRestoreLinkParams struct {
	Title       sql.NullString
	Url         sql.NullString
	Description sql.NullString
	Idlinker    int32
}

func (q *Queries) AdminRestoreLink(ctx context.Context, arg AdminRestoreLinkParams) error {
	_, err := q.db.ExecContext(ctx, adminRestoreLink,
		arg.Title,
		arg.Url,
		arg.Description,
		arg.Idlinker,
	)
	return err
}

const adminRestoreUser = `-- name: AdminRestoreUser :exec
UPDATE users u JOIN deactivated_users d ON u.idusers = d.idusers
SET u.email = d.email, u.passwd = d.passwd, u.passwd_algorithm = d.passwd_algorithm, u.username = d.username, u.deleted_at = NULL, d.restored_at = NOW()
WHERE u.idusers = ? AND d.restored_at IS NULL
`

func (q *Queries) AdminRestoreUser(ctx context.Context, idusers int32) error {
	_, err := q.db.ExecContext(ctx, adminRestoreUser, idusers)
	return err
}

const adminRestoreWriting = `-- name: AdminRestoreWriting :exec
UPDATE writing SET title = ?, writing = ?, abstract = ?, private = ?, deleted_at = NULL WHERE idwriting = ?
`

type AdminRestoreWritingParams struct {
	Title     sql.NullString
	Writing   sql.NullString
	Abstract  sql.NullString
	Private   sql.NullBool
	Idwriting int32
}

func (q *Queries) AdminRestoreWriting(ctx context.Context, arg AdminRestoreWritingParams) error {
	_, err := q.db.ExecContext(ctx, adminRestoreWriting,
		arg.Title,
		arg.Writing,
		arg.Abstract,
		arg.Private,
		arg.Idwriting,
	)
	return err
}

const adminScrubBlog = `-- name: AdminScrubBlog :exec
UPDATE blogs SET blog = ?, deleted_at = NOW() WHERE idblogs = ?
`

type AdminScrubBlogParams struct {
	Blog    sql.NullString
	Idblogs int32
}

func (q *Queries) AdminScrubBlog(ctx context.Context, arg AdminScrubBlogParams) error {
	_, err := q.db.ExecContext(ctx, adminScrubBlog, arg.Blog, arg.Idblogs)
	return err
}

const adminScrubComment = `-- name: AdminScrubComment :exec
UPDATE comments SET text = ?, deleted_at = NOW() WHERE idcomments = ?
`

type AdminScrubCommentParams struct {
	Text       sql.NullString
	Idcomments int32
}

func (q *Queries) AdminScrubComment(ctx context.Context, arg AdminScrubCommentParams) error {
	_, err := q.db.ExecContext(ctx, adminScrubComment, arg.Text, arg.Idcomments)
	return err
}

const adminScrubImagepost = `-- name: AdminScrubImagepost :exec
UPDATE imagepost SET description = '', thumbnail = '', fullimage = '', deleted_at = NOW() WHERE idimagepost = ?
`

func (q *Queries) AdminScrubImagepost(ctx context.Context, idimagepost int32) error {
	_, err := q.db.ExecContext(ctx, adminScrubImagepost, idimagepost)
	return err
}

const adminScrubLink = `-- name: AdminScrubLink :exec
UPDATE linker SET title = ?, url = '', description = '', deleted_at = NOW() WHERE idlinker = ?
`

type AdminScrubLinkParams struct {
	Title    sql.NullString
	Idlinker int32
}

func (q *Queries) AdminScrubLink(ctx context.Context, arg AdminScrubLinkParams) error {
	_, err := q.db.ExecContext(ctx, adminScrubLink, arg.Title, arg.Idlinker)
	return err
}

const adminScrubUser = `-- name: AdminScrubUser :exec
UPDATE users SET username = ?, email = '', passwd = '', passwd_algorithm = '', deleted_at = NOW()
WHERE idusers = ?
`

type AdminScrubUserParams struct {
	Username sql.NullString
	Idusers  int32
}

func (q *Queries) AdminScrubUser(ctx context.Context, arg AdminScrubUserParams) error {
	_, err := q.db.ExecContext(ctx, adminScrubUser, arg.Username, arg.Idusers)
	return err
}

const adminScrubWriting = `-- name: AdminScrubWriting :exec
UPDATE writing SET title = ?, writing = ?, abstract = ?, deleted_at = NOW() WHERE idwriting = ?
`

type AdminScrubWritingParams struct {
	Title     sql.NullString
	Writing   sql.NullString
	Abstract  sql.NullString
	Idwriting int32
}

func (q *Queries) AdminScrubWriting(ctx context.Context, arg AdminScrubWritingParams) error {
	_, err := q.db.ExecContext(ctx, adminScrubWriting,
		arg.Title,
		arg.Writing,
		arg.Abstract,
		arg.Idwriting,
	)
	return err
}
