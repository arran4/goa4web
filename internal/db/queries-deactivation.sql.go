// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries-deactivation.sql

package db

import (
	"context"
	"database/sql"
)

const archiveBlog = `-- name: ArchiveBlog :exec
INSERT INTO deactivated_blogs (idblogs, forumthread_idforumthread, users_idusers, language_idlanguage, blog, written, deleted_at)
VALUES (?, ?, ?, ?, ?, ?, NOW())
`

type ArchiveBlogParams struct {
	Idblogs                  int32
	ForumthreadIdforumthread int32
	UsersIdusers             int32
	LanguageIdlanguage       int32
	Blog                     sql.NullString
	Written                  sql.NullTime
}

func (q *Queries) ArchiveBlog(ctx context.Context, arg ArchiveBlogParams) error {
	_, err := q.db.ExecContext(ctx, archiveBlog,
		arg.Idblogs,
		arg.ForumthreadIdforumthread,
		arg.UsersIdusers,
		arg.LanguageIdlanguage,
		arg.Blog,
		arg.Written,
	)
	return err
}

const archiveComment = `-- name: ArchiveComment :exec
INSERT INTO deactivated_comments (idcomments, forumthread_idforumthread, users_idusers, language_idlanguage, written, text, deleted_at)
VALUES (?, ?, ?, ?, ?, ?, NOW())
`

type ArchiveCommentParams struct {
	Idcomments               int32
	ForumthreadIdforumthread int32
	UsersIdusers             int32
	LanguageIdlanguage       int32
	Written                  sql.NullTime
	Text                     sql.NullString
}

func (q *Queries) ArchiveComment(ctx context.Context, arg ArchiveCommentParams) error {
	_, err := q.db.ExecContext(ctx, archiveComment,
		arg.Idcomments,
		arg.ForumthreadIdforumthread,
		arg.UsersIdusers,
		arg.LanguageIdlanguage,
		arg.Written,
		arg.Text,
	)
	return err
}

const archiveImagepost = `-- name: ArchiveImagepost :exec
INSERT INTO deactivated_imageposts (idimagepost, forumthread_idforumthread, users_idusers, imageboard_idimageboard, posted, description, thumbnail, fullimage, file_size, approved, deleted_at)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, NOW())
`

type ArchiveImagepostParams struct {
	Idimagepost              int32
	ForumthreadIdforumthread int32
	UsersIdusers             int32
	ImageboardIdimageboard   int32
	Posted                   sql.NullTime
	Description              sql.NullString
	Thumbnail                sql.NullString
	Fullimage                sql.NullString
	FileSize                 int32
	Approved                 sql.NullBool
}

func (q *Queries) ArchiveImagepost(ctx context.Context, arg ArchiveImagepostParams) error {
	_, err := q.db.ExecContext(ctx, archiveImagepost,
		arg.Idimagepost,
		arg.ForumthreadIdforumthread,
		arg.UsersIdusers,
		arg.ImageboardIdimageboard,
		arg.Posted,
		arg.Description,
		arg.Thumbnail,
		arg.Fullimage,
		arg.FileSize,
		arg.Approved,
	)
	return err
}

const archiveLink = `-- name: ArchiveLink :exec
INSERT INTO deactivated_linker (idlinker, language_idlanguage, users_idusers, linkerCategory_idlinkerCategory, forumthread_idforumthread, title, url, description, listed, deleted_at)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, NOW())
`

type ArchiveLinkParams struct {
	Idlinker                       int32
	LanguageIdlanguage             int32
	UsersIdusers                   int32
	LinkercategoryIdlinkercategory int32
	ForumthreadIdforumthread       int32
	Title                          sql.NullString
	Url                            sql.NullString
	Description                    sql.NullString
	Listed                         sql.NullTime
}

func (q *Queries) ArchiveLink(ctx context.Context, arg ArchiveLinkParams) error {
	_, err := q.db.ExecContext(ctx, archiveLink,
		arg.Idlinker,
		arg.LanguageIdlanguage,
		arg.UsersIdusers,
		arg.LinkercategoryIdlinkercategory,
		arg.ForumthreadIdforumthread,
		arg.Title,
		arg.Url,
		arg.Description,
		arg.Listed,
	)
	return err
}

const archiveUser = `-- name: ArchiveUser :exec

INSERT INTO deactivated_users (idusers, email, passwd, passwd_algorithm, username, deleted_at)
SELECT u.idusers, u.email, u.passwd, u.passwd_algorithm, u.username, NOW()
FROM users u WHERE u.idusers = ?
`

// Queries for user deactivation and restoration
func (q *Queries) ArchiveUser(ctx context.Context, idusers int32) error {
	_, err := q.db.ExecContext(ctx, archiveUser, idusers)
	return err
}

const archiveWriting = `-- name: ArchiveWriting :exec
INSERT INTO deactivated_writings (idwriting, users_idusers, forumthread_idforumthread, language_idlanguage, writingCategory_idwritingCategory, title, published, writing, abstract, private, deleted_at)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, NOW())
`

type ArchiveWritingParams struct {
	Idwriting                        int32
	UsersIdusers                     int32
	ForumthreadIdforumthread         int32
	LanguageIdlanguage               int32
	WritingcategoryIdwritingcategory int32
	Title                            sql.NullString
	Published                        sql.NullTime
	Writing                          sql.NullString
	Abstract                         sql.NullString
	Private                          sql.NullBool
}

func (q *Queries) ArchiveWriting(ctx context.Context, arg ArchiveWritingParams) error {
	_, err := q.db.ExecContext(ctx, archiveWriting,
		arg.Idwriting,
		arg.UsersIdusers,
		arg.ForumthreadIdforumthread,
		arg.LanguageIdlanguage,
		arg.WritingcategoryIdwritingcategory,
		arg.Title,
		arg.Published,
		arg.Writing,
		arg.Abstract,
		arg.Private,
	)
	return err
}

const markBlogRestored = `-- name: MarkBlogRestored :exec
UPDATE deactivated_blogs SET restored_at = NOW() WHERE idblogs = ?
`

func (q *Queries) MarkBlogRestored(ctx context.Context, idblogs int32) error {
	_, err := q.db.ExecContext(ctx, markBlogRestored, idblogs)
	return err
}

const markCommentRestored = `-- name: MarkCommentRestored :exec
UPDATE deactivated_comments SET restored_at = NOW() WHERE idcomments = ?
`

func (q *Queries) MarkCommentRestored(ctx context.Context, idcomments int32) error {
	_, err := q.db.ExecContext(ctx, markCommentRestored, idcomments)
	return err
}

const markImagepostRestored = `-- name: MarkImagepostRestored :exec
UPDATE deactivated_imageposts SET restored_at = NOW() WHERE idimagepost = ?
`

func (q *Queries) MarkImagepostRestored(ctx context.Context, idimagepost int32) error {
	_, err := q.db.ExecContext(ctx, markImagepostRestored, idimagepost)
	return err
}

const markLinkRestored = `-- name: MarkLinkRestored :exec
UPDATE deactivated_linker SET restored_at = NOW() WHERE idlinker = ?
`

func (q *Queries) MarkLinkRestored(ctx context.Context, idlinker int32) error {
	_, err := q.db.ExecContext(ctx, markLinkRestored, idlinker)
	return err
}

const markWritingRestored = `-- name: MarkWritingRestored :exec
UPDATE deactivated_writings SET restored_at = NOW() WHERE idwriting = ?
`

func (q *Queries) MarkWritingRestored(ctx context.Context, idwriting int32) error {
	_, err := q.db.ExecContext(ctx, markWritingRestored, idwriting)
	return err
}

const pendingDeactivatedBlogs = `-- name: PendingDeactivatedBlogs :many
SELECT idblogs, blog FROM deactivated_blogs WHERE users_idusers = ? AND restored_at IS NULL
`

type PendingDeactivatedBlogsRow struct {
	Idblogs int32
	Blog    sql.NullString
}

func (q *Queries) PendingDeactivatedBlogs(ctx context.Context, usersIdusers int32) ([]*PendingDeactivatedBlogsRow, error) {
	rows, err := q.db.QueryContext(ctx, pendingDeactivatedBlogs, usersIdusers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*PendingDeactivatedBlogsRow
	for rows.Next() {
		var i PendingDeactivatedBlogsRow
		if err := rows.Scan(&i.Idblogs, &i.Blog); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const pendingDeactivatedComments = `-- name: PendingDeactivatedComments :many
SELECT idcomments, text FROM deactivated_comments
WHERE users_idusers = ? AND restored_at IS NULL
`

type PendingDeactivatedCommentsRow struct {
	Idcomments int32
	Text       sql.NullString
}

func (q *Queries) PendingDeactivatedComments(ctx context.Context, usersIdusers int32) ([]*PendingDeactivatedCommentsRow, error) {
	rows, err := q.db.QueryContext(ctx, pendingDeactivatedComments, usersIdusers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*PendingDeactivatedCommentsRow
	for rows.Next() {
		var i PendingDeactivatedCommentsRow
		if err := rows.Scan(&i.Idcomments, &i.Text); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const pendingDeactivatedImageposts = `-- name: PendingDeactivatedImageposts :many
SELECT idimagepost, description, thumbnail, fullimage FROM deactivated_imageposts WHERE users_idusers = ? AND restored_at IS NULL
`

type PendingDeactivatedImagepostsRow struct {
	Idimagepost int32
	Description sql.NullString
	Thumbnail   sql.NullString
	Fullimage   sql.NullString
}

func (q *Queries) PendingDeactivatedImageposts(ctx context.Context, usersIdusers int32) ([]*PendingDeactivatedImagepostsRow, error) {
	rows, err := q.db.QueryContext(ctx, pendingDeactivatedImageposts, usersIdusers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*PendingDeactivatedImagepostsRow
	for rows.Next() {
		var i PendingDeactivatedImagepostsRow
		if err := rows.Scan(
			&i.Idimagepost,
			&i.Description,
			&i.Thumbnail,
			&i.Fullimage,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const pendingDeactivatedLinks = `-- name: PendingDeactivatedLinks :many
SELECT idlinker, title, url, description FROM deactivated_linker WHERE users_idusers = ? AND restored_at IS NULL
`

type PendingDeactivatedLinksRow struct {
	Idlinker    int32
	Title       sql.NullString
	Url         sql.NullString
	Description sql.NullString
}

func (q *Queries) PendingDeactivatedLinks(ctx context.Context, usersIdusers int32) ([]*PendingDeactivatedLinksRow, error) {
	rows, err := q.db.QueryContext(ctx, pendingDeactivatedLinks, usersIdusers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*PendingDeactivatedLinksRow
	for rows.Next() {
		var i PendingDeactivatedLinksRow
		if err := rows.Scan(
			&i.Idlinker,
			&i.Title,
			&i.Url,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const pendingDeactivatedWritings = `-- name: PendingDeactivatedWritings :many
SELECT idwriting, title, writing, abstract, private FROM deactivated_writings
WHERE users_idusers = ? AND restored_at IS NULL
`

type PendingDeactivatedWritingsRow struct {
	Idwriting int32
	Title     sql.NullString
	Writing   sql.NullString
	Abstract  sql.NullString
	Private   sql.NullBool
}

func (q *Queries) PendingDeactivatedWritings(ctx context.Context, usersIdusers int32) ([]*PendingDeactivatedWritingsRow, error) {
	rows, err := q.db.QueryContext(ctx, pendingDeactivatedWritings, usersIdusers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*PendingDeactivatedWritingsRow
	for rows.Next() {
		var i PendingDeactivatedWritingsRow
		if err := rows.Scan(
			&i.Idwriting,
			&i.Title,
			&i.Writing,
			&i.Abstract,
			&i.Private,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const restoreBlog = `-- name: RestoreBlog :exec
UPDATE blogs SET blog = ?, deleted_at = NULL WHERE idblogs = ?
`

type RestoreBlogParams struct {
	Blog    sql.NullString
	Idblogs int32
}

func (q *Queries) RestoreBlog(ctx context.Context, arg RestoreBlogParams) error {
	_, err := q.db.ExecContext(ctx, restoreBlog, arg.Blog, arg.Idblogs)
	return err
}

const restoreComment = `-- name: RestoreComment :exec
UPDATE comments SET text = ?, deleted_at = NULL WHERE idcomments = ?
`

type RestoreCommentParams struct {
	Text       sql.NullString
	Idcomments int32
}

func (q *Queries) RestoreComment(ctx context.Context, arg RestoreCommentParams) error {
	_, err := q.db.ExecContext(ctx, restoreComment, arg.Text, arg.Idcomments)
	return err
}

const restoreImagepost = `-- name: RestoreImagepost :exec
UPDATE imagepost SET description = ?, thumbnail = ?, fullimage = ?, deleted_at = NULL WHERE idimagepost = ?
`

type RestoreImagepostParams struct {
	Description sql.NullString
	Thumbnail   sql.NullString
	Fullimage   sql.NullString
	Idimagepost int32
}

func (q *Queries) RestoreImagepost(ctx context.Context, arg RestoreImagepostParams) error {
	_, err := q.db.ExecContext(ctx, restoreImagepost,
		arg.Description,
		arg.Thumbnail,
		arg.Fullimage,
		arg.Idimagepost,
	)
	return err
}

const restoreLink = `-- name: RestoreLink :exec
UPDATE linker SET title = ?, url = ?, description = ?, deleted_at = NULL WHERE idlinker = ?
`

type RestoreLinkParams struct {
	Title       sql.NullString
	Url         sql.NullString
	Description sql.NullString
	Idlinker    int32
}

func (q *Queries) RestoreLink(ctx context.Context, arg RestoreLinkParams) error {
	_, err := q.db.ExecContext(ctx, restoreLink,
		arg.Title,
		arg.Url,
		arg.Description,
		arg.Idlinker,
	)
	return err
}

const restoreUser = `-- name: RestoreUser :exec
UPDATE users u JOIN deactivated_users d ON u.idusers = d.idusers
SET u.email = d.email, u.passwd = d.passwd, u.passwd_algorithm = d.passwd_algorithm, u.username = d.username, u.deleted_at = NULL, d.restored_at = NOW()
WHERE u.idusers = ? AND d.restored_at IS NULL
`

func (q *Queries) RestoreUser(ctx context.Context, idusers int32) error {
	_, err := q.db.ExecContext(ctx, restoreUser, idusers)
	return err
}

const restoreWriting = `-- name: RestoreWriting :exec
UPDATE writing SET title = ?, writing = ?, abstract = ?, private = ?, deleted_at = NULL WHERE idwriting = ?
`

type RestoreWritingParams struct {
	Title     sql.NullString
	Writing   sql.NullString
	Abstract  sql.NullString
	Private   sql.NullBool
	Idwriting int32
}

func (q *Queries) RestoreWriting(ctx context.Context, arg RestoreWritingParams) error {
	_, err := q.db.ExecContext(ctx, restoreWriting,
		arg.Title,
		arg.Writing,
		arg.Abstract,
		arg.Private,
		arg.Idwriting,
	)
	return err
}

const scrubBlog = `-- name: ScrubBlog :exec
UPDATE blogs SET blog = ?, deleted_at = NOW() WHERE idblogs = ?
`

type ScrubBlogParams struct {
	Blog    sql.NullString
	Idblogs int32
}

func (q *Queries) ScrubBlog(ctx context.Context, arg ScrubBlogParams) error {
	_, err := q.db.ExecContext(ctx, scrubBlog, arg.Blog, arg.Idblogs)
	return err
}

const scrubComment = `-- name: ScrubComment :exec
UPDATE comments SET text = ?, deleted_at = NOW() WHERE idcomments = ?
`

type ScrubCommentParams struct {
	Text       sql.NullString
	Idcomments int32
}

func (q *Queries) ScrubComment(ctx context.Context, arg ScrubCommentParams) error {
	_, err := q.db.ExecContext(ctx, scrubComment, arg.Text, arg.Idcomments)
	return err
}

const scrubImagepost = `-- name: ScrubImagepost :exec
UPDATE imagepost SET description = '', thumbnail = '', fullimage = '', deleted_at = NOW() WHERE idimagepost = ?
`

func (q *Queries) ScrubImagepost(ctx context.Context, idimagepost int32) error {
	_, err := q.db.ExecContext(ctx, scrubImagepost, idimagepost)
	return err
}

const scrubLink = `-- name: ScrubLink :exec
UPDATE linker SET title = ?, url = '', description = '', deleted_at = NOW() WHERE idlinker = ?
`

type ScrubLinkParams struct {
	Title    sql.NullString
	Idlinker int32
}

func (q *Queries) ScrubLink(ctx context.Context, arg ScrubLinkParams) error {
	_, err := q.db.ExecContext(ctx, scrubLink, arg.Title, arg.Idlinker)
	return err
}

const scrubUser = `-- name: ScrubUser :exec
UPDATE users SET username = ?, email = '', passwd = '', passwd_algorithm = '', deleted_at = NOW()
WHERE idusers = ?
`

type ScrubUserParams struct {
	Username sql.NullString
	Idusers  int32
}

func (q *Queries) ScrubUser(ctx context.Context, arg ScrubUserParams) error {
	_, err := q.db.ExecContext(ctx, scrubUser, arg.Username, arg.Idusers)
	return err
}

const scrubWriting = `-- name: ScrubWriting :exec
UPDATE writing SET title = ?, writing = ?, abstract = ?, deleted_at = NOW() WHERE idwriting = ?
`

type ScrubWritingParams struct {
	Title     sql.NullString
	Writing   sql.NullString
	Abstract  sql.NullString
	Idwriting int32
}

func (q *Queries) ScrubWriting(ctx context.Context, arg ScrubWritingParams) error {
	_, err := q.db.ExecContext(ctx, scrubWriting,
		arg.Title,
		arg.Writing,
		arg.Abstract,
		arg.Idwriting,
	)
	return err
}
