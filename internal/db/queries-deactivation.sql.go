// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries-deactivation.sql

package db

import (
	"context"
	"database/sql"
)

const archiveBlogForAdmin = `-- name: ArchiveBlogForAdmin :exec
INSERT INTO deactivated_blogs (idblogs, forumthread_id, users_idusers, language_idlanguage, blog, written, deleted_at)
VALUES (?, ?, ?, ?, ?, ?, NOW())
`

type ArchiveBlogForAdminParams struct {
	Idblogs            int32
	ForumthreadID      int32
	UsersIdusers       int32
	LanguageIdlanguage int32
	Blog               sql.NullString
	Written            sql.NullTime
}

func (q *Queries) ArchiveBlogForAdmin(ctx context.Context, arg ArchiveBlogForAdminParams) error {
	_, err := q.db.ExecContext(ctx, archiveBlogForAdmin,
		arg.Idblogs,
		arg.ForumthreadID,
		arg.UsersIdusers,
		arg.LanguageIdlanguage,
		arg.Blog,
		arg.Written,
	)
	return err
}

const archiveCommentForAdmin = `-- name: ArchiveCommentForAdmin :exec
INSERT INTO deactivated_comments (idcomments, forumthread_id, users_idusers, language_idlanguage, written, text, deleted_at)
VALUES (?, ?, ?, ?, ?, ?, NOW())
`

type ArchiveCommentForAdminParams struct {
	Idcomments         int32
	ForumthreadID      int32
	UsersIdusers       int32
	LanguageIdlanguage int32
	Written            sql.NullTime
	Text               sql.NullString
}

func (q *Queries) ArchiveCommentForAdmin(ctx context.Context, arg ArchiveCommentForAdminParams) error {
	_, err := q.db.ExecContext(ctx, archiveCommentForAdmin,
		arg.Idcomments,
		arg.ForumthreadID,
		arg.UsersIdusers,
		arg.LanguageIdlanguage,
		arg.Written,
		arg.Text,
	)
	return err
}

const archiveImagepostForAdmin = `-- name: ArchiveImagepostForAdmin :exec
INSERT INTO deactivated_imageposts (idimagepost, forumthread_id, users_idusers, imageboard_idimageboard, posted, description, thumbnail, fullimage, file_size, approved, deleted_at)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, NOW())
`

type ArchiveImagepostForAdminParams struct {
	Idimagepost            int32
	ForumthreadID          int32
	UsersIdusers           int32
	ImageboardIdimageboard int32
	Posted                 sql.NullTime
	Description            sql.NullString
	Thumbnail              sql.NullString
	Fullimage              sql.NullString
	FileSize               int32
	Approved               sql.NullBool
}

func (q *Queries) ArchiveImagepostForAdmin(ctx context.Context, arg ArchiveImagepostForAdminParams) error {
	_, err := q.db.ExecContext(ctx, archiveImagepostForAdmin,
		arg.Idimagepost,
		arg.ForumthreadID,
		arg.UsersIdusers,
		arg.ImageboardIdimageboard,
		arg.Posted,
		arg.Description,
		arg.Thumbnail,
		arg.Fullimage,
		arg.FileSize,
		arg.Approved,
	)
	return err
}

const archiveLinkForAdmin = `-- name: ArchiveLinkForAdmin :exec
INSERT INTO deactivated_linker (idlinker, language_idlanguage, users_idusers, linker_category_id, forumthread_id, title, url, description, listed, deleted_at)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, NOW())
`

type ArchiveLinkForAdminParams struct {
	Idlinker           int32
	LanguageIdlanguage int32
	UsersIdusers       int32
	LinkerCategoryID   int32
	ForumthreadID      int32
	Title              sql.NullString
	Url                sql.NullString
	Description        sql.NullString
	Listed             sql.NullTime
}

func (q *Queries) ArchiveLinkForAdmin(ctx context.Context, arg ArchiveLinkForAdminParams) error {
	_, err := q.db.ExecContext(ctx, archiveLinkForAdmin,
		arg.Idlinker,
		arg.LanguageIdlanguage,
		arg.UsersIdusers,
		arg.LinkerCategoryID,
		arg.ForumthreadID,
		arg.Title,
		arg.Url,
		arg.Description,
		arg.Listed,
	)
	return err
}

const archiveUserForAdmin = `-- name: ArchiveUserForAdmin :exec

INSERT INTO deactivated_users (idusers, email, passwd, passwd_algorithm, username, deleted_at)
SELECT u.idusers, u.email, u.passwd, u.passwd_algorithm, u.username, NOW()
FROM users u WHERE u.idusers = ?
`

// Queries for user deactivation and restoration
func (q *Queries) ArchiveUserForAdmin(ctx context.Context, idusers int32) error {
	_, err := q.db.ExecContext(ctx, archiveUserForAdmin, idusers)
	return err
}

const archiveWritingForAdmin = `-- name: ArchiveWritingForAdmin :exec
INSERT INTO deactivated_writings (idwriting, users_idusers, forumthread_id, language_idlanguage, writing_category_id, title, published, writing, abstract, private, deleted_at)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, NOW())
`

type ArchiveWritingForAdminParams struct {
	Idwriting          int32
	UsersIdusers       int32
	ForumthreadID      int32
	LanguageIdlanguage int32
	WritingCategoryID  int32
	Title              sql.NullString
	Published          sql.NullTime
	Writing            sql.NullString
	Abstract           sql.NullString
	Private            sql.NullBool
}

func (q *Queries) ArchiveWritingForAdmin(ctx context.Context, arg ArchiveWritingForAdminParams) error {
	_, err := q.db.ExecContext(ctx, archiveWritingForAdmin,
		arg.Idwriting,
		arg.UsersIdusers,
		arg.ForumthreadID,
		arg.LanguageIdlanguage,
		arg.WritingCategoryID,
		arg.Title,
		arg.Published,
		arg.Writing,
		arg.Abstract,
		arg.Private,
	)
	return err
}

const markBlogRestoredForAdmin = `-- name: MarkBlogRestoredForAdmin :exec
UPDATE deactivated_blogs SET restored_at = NOW() WHERE idblogs = ?
`

func (q *Queries) MarkBlogRestoredForAdmin(ctx context.Context, idblogs int32) error {
	_, err := q.db.ExecContext(ctx, markBlogRestoredForAdmin, idblogs)
	return err
}

const markCommentRestoredForAdmin = `-- name: MarkCommentRestoredForAdmin :exec
UPDATE deactivated_comments SET restored_at = NOW() WHERE idcomments = ?
`

func (q *Queries) MarkCommentRestoredForAdmin(ctx context.Context, idcomments int32) error {
	_, err := q.db.ExecContext(ctx, markCommentRestoredForAdmin, idcomments)
	return err
}

const markImagepostRestoredForAdmin = `-- name: MarkImagepostRestoredForAdmin :exec
UPDATE deactivated_imageposts SET restored_at = NOW() WHERE idimagepost = ?
`

func (q *Queries) MarkImagepostRestoredForAdmin(ctx context.Context, idimagepost int32) error {
	_, err := q.db.ExecContext(ctx, markImagepostRestoredForAdmin, idimagepost)
	return err
}

const markLinkRestoredForAdmin = `-- name: MarkLinkRestoredForAdmin :exec
UPDATE deactivated_linker SET restored_at = NOW() WHERE idlinker = ?
`

func (q *Queries) MarkLinkRestoredForAdmin(ctx context.Context, idlinker int32) error {
	_, err := q.db.ExecContext(ctx, markLinkRestoredForAdmin, idlinker)
	return err
}

const markWritingRestoredForAdmin = `-- name: MarkWritingRestoredForAdmin :exec
UPDATE deactivated_writings SET restored_at = NOW() WHERE idwriting = ?
`

func (q *Queries) MarkWritingRestoredForAdmin(ctx context.Context, idwriting int32) error {
	_, err := q.db.ExecContext(ctx, markWritingRestoredForAdmin, idwriting)
	return err
}

const pendingDeactivatedBlogsForAdmin = `-- name: PendingDeactivatedBlogsForAdmin :many
SELECT idblogs, blog FROM deactivated_blogs WHERE users_idusers = ? AND restored_at IS NULL
`

type PendingDeactivatedBlogsForAdminRow struct {
	Idblogs int32
	Blog    sql.NullString
}

func (q *Queries) PendingDeactivatedBlogsForAdmin(ctx context.Context, usersIdusers int32) ([]*PendingDeactivatedBlogsForAdminRow, error) {
	rows, err := q.db.QueryContext(ctx, pendingDeactivatedBlogsForAdmin, usersIdusers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*PendingDeactivatedBlogsForAdminRow
	for rows.Next() {
		var i PendingDeactivatedBlogsForAdminRow
		if err := rows.Scan(&i.Idblogs, &i.Blog); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const pendingDeactivatedCommentsForAdmin = `-- name: PendingDeactivatedCommentsForAdmin :many
SELECT idcomments, text FROM deactivated_comments
WHERE users_idusers = ? AND restored_at IS NULL
`

type PendingDeactivatedCommentsForAdminRow struct {
	Idcomments int32
	Text       sql.NullString
}

func (q *Queries) PendingDeactivatedCommentsForAdmin(ctx context.Context, usersIdusers int32) ([]*PendingDeactivatedCommentsForAdminRow, error) {
	rows, err := q.db.QueryContext(ctx, pendingDeactivatedCommentsForAdmin, usersIdusers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*PendingDeactivatedCommentsForAdminRow
	for rows.Next() {
		var i PendingDeactivatedCommentsForAdminRow
		if err := rows.Scan(&i.Idcomments, &i.Text); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const pendingDeactivatedImagepostsForAdmin = `-- name: PendingDeactivatedImagepostsForAdmin :many
SELECT idimagepost, description, thumbnail, fullimage FROM deactivated_imageposts WHERE users_idusers = ? AND restored_at IS NULL
`

type PendingDeactivatedImagepostsForAdminRow struct {
	Idimagepost int32
	Description sql.NullString
	Thumbnail   sql.NullString
	Fullimage   sql.NullString
}

func (q *Queries) PendingDeactivatedImagepostsForAdmin(ctx context.Context, usersIdusers int32) ([]*PendingDeactivatedImagepostsForAdminRow, error) {
	rows, err := q.db.QueryContext(ctx, pendingDeactivatedImagepostsForAdmin, usersIdusers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*PendingDeactivatedImagepostsForAdminRow
	for rows.Next() {
		var i PendingDeactivatedImagepostsForAdminRow
		if err := rows.Scan(
			&i.Idimagepost,
			&i.Description,
			&i.Thumbnail,
			&i.Fullimage,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const pendingDeactivatedLinksForAdmin = `-- name: PendingDeactivatedLinksForAdmin :many
SELECT idlinker, title, url, description FROM deactivated_linker WHERE users_idusers = ? AND restored_at IS NULL
`

type PendingDeactivatedLinksForAdminRow struct {
	Idlinker    int32
	Title       sql.NullString
	Url         sql.NullString
	Description sql.NullString
}

func (q *Queries) PendingDeactivatedLinksForAdmin(ctx context.Context, usersIdusers int32) ([]*PendingDeactivatedLinksForAdminRow, error) {
	rows, err := q.db.QueryContext(ctx, pendingDeactivatedLinksForAdmin, usersIdusers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*PendingDeactivatedLinksForAdminRow
	for rows.Next() {
		var i PendingDeactivatedLinksForAdminRow
		if err := rows.Scan(
			&i.Idlinker,
			&i.Title,
			&i.Url,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const pendingDeactivatedWritingsForAdmin = `-- name: PendingDeactivatedWritingsForAdmin :many
SELECT idwriting, title, writing, abstract, private FROM deactivated_writings
WHERE users_idusers = ? AND restored_at IS NULL
`

type PendingDeactivatedWritingsForAdminRow struct {
	Idwriting int32
	Title     sql.NullString
	Writing   sql.NullString
	Abstract  sql.NullString
	Private   sql.NullBool
}

func (q *Queries) PendingDeactivatedWritingsForAdmin(ctx context.Context, usersIdusers int32) ([]*PendingDeactivatedWritingsForAdminRow, error) {
	rows, err := q.db.QueryContext(ctx, pendingDeactivatedWritingsForAdmin, usersIdusers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*PendingDeactivatedWritingsForAdminRow
	for rows.Next() {
		var i PendingDeactivatedWritingsForAdminRow
		if err := rows.Scan(
			&i.Idwriting,
			&i.Title,
			&i.Writing,
			&i.Abstract,
			&i.Private,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const restoreBlogForAdmin = `-- name: RestoreBlogForAdmin :exec
UPDATE blogs SET blog = ?, deleted_at = NULL WHERE idblogs = ?
`

type RestoreBlogForAdminParams struct {
	Blog    sql.NullString
	Idblogs int32
}

func (q *Queries) RestoreBlogForAdmin(ctx context.Context, arg RestoreBlogForAdminParams) error {
	_, err := q.db.ExecContext(ctx, restoreBlogForAdmin, arg.Blog, arg.Idblogs)
	return err
}

const restoreCommentForAdmin = `-- name: RestoreCommentForAdmin :exec
UPDATE comments SET text = ?, deleted_at = NULL WHERE idcomments = ?
`

type RestoreCommentForAdminParams struct {
	Text       sql.NullString
	Idcomments int32
}

func (q *Queries) RestoreCommentForAdmin(ctx context.Context, arg RestoreCommentForAdminParams) error {
	_, err := q.db.ExecContext(ctx, restoreCommentForAdmin, arg.Text, arg.Idcomments)
	return err
}

const restoreImagepostForAdmin = `-- name: RestoreImagepostForAdmin :exec
UPDATE imagepost SET description = ?, thumbnail = ?, fullimage = ?, deleted_at = NULL WHERE idimagepost = ?
`

type RestoreImagepostForAdminParams struct {
	Description sql.NullString
	Thumbnail   sql.NullString
	Fullimage   sql.NullString
	Idimagepost int32
}

func (q *Queries) RestoreImagepostForAdmin(ctx context.Context, arg RestoreImagepostForAdminParams) error {
	_, err := q.db.ExecContext(ctx, restoreImagepostForAdmin,
		arg.Description,
		arg.Thumbnail,
		arg.Fullimage,
		arg.Idimagepost,
	)
	return err
}

const restoreLinkForAdmin = `-- name: RestoreLinkForAdmin :exec
UPDATE linker SET title = ?, url = ?, description = ?, deleted_at = NULL WHERE idlinker = ?
`

type RestoreLinkForAdminParams struct {
	Title       sql.NullString
	Url         sql.NullString
	Description sql.NullString
	Idlinker    int32
}

func (q *Queries) RestoreLinkForAdmin(ctx context.Context, arg RestoreLinkForAdminParams) error {
	_, err := q.db.ExecContext(ctx, restoreLinkForAdmin,
		arg.Title,
		arg.Url,
		arg.Description,
		arg.Idlinker,
	)
	return err
}

const restoreUserForAdmin = `-- name: RestoreUserForAdmin :exec
UPDATE users u JOIN deactivated_users d ON u.idusers = d.idusers
SET u.email = d.email, u.passwd = d.passwd, u.passwd_algorithm = d.passwd_algorithm, u.username = d.username, u.deleted_at = NULL, d.restored_at = NOW()
WHERE u.idusers = ? AND d.restored_at IS NULL
`

func (q *Queries) RestoreUserForAdmin(ctx context.Context, idusers int32) error {
	_, err := q.db.ExecContext(ctx, restoreUserForAdmin, idusers)
	return err
}

const restoreWritingForAdmin = `-- name: RestoreWritingForAdmin :exec
UPDATE writing SET title = ?, writing = ?, abstract = ?, private = ?, deleted_at = NULL WHERE idwriting = ?
`

type RestoreWritingForAdminParams struct {
	Title     sql.NullString
	Writing   sql.NullString
	Abstract  sql.NullString
	Private   sql.NullBool
	Idwriting int32
}

func (q *Queries) RestoreWritingForAdmin(ctx context.Context, arg RestoreWritingForAdminParams) error {
	_, err := q.db.ExecContext(ctx, restoreWritingForAdmin,
		arg.Title,
		arg.Writing,
		arg.Abstract,
		arg.Private,
		arg.Idwriting,
	)
	return err
}

const scrubBlogForAdmin = `-- name: ScrubBlogForAdmin :exec
UPDATE blogs SET blog = ?, deleted_at = NOW() WHERE idblogs = ?
`

type ScrubBlogForAdminParams struct {
	Blog    sql.NullString
	Idblogs int32
}

func (q *Queries) ScrubBlogForAdmin(ctx context.Context, arg ScrubBlogForAdminParams) error {
	_, err := q.db.ExecContext(ctx, scrubBlogForAdmin, arg.Blog, arg.Idblogs)
	return err
}

const scrubCommentForAdmin = `-- name: ScrubCommentForAdmin :exec
UPDATE comments SET text = ?, deleted_at = NOW() WHERE idcomments = ?
`

type ScrubCommentForAdminParams struct {
	Text       sql.NullString
	Idcomments int32
}

func (q *Queries) ScrubCommentForAdmin(ctx context.Context, arg ScrubCommentForAdminParams) error {
	_, err := q.db.ExecContext(ctx, scrubCommentForAdmin, arg.Text, arg.Idcomments)
	return err
}

const scrubImagepostForAdmin = `-- name: ScrubImagepostForAdmin :exec
UPDATE imagepost SET description = '', thumbnail = '', fullimage = '', deleted_at = NOW() WHERE idimagepost = ?
`

func (q *Queries) ScrubImagepostForAdmin(ctx context.Context, idimagepost int32) error {
	_, err := q.db.ExecContext(ctx, scrubImagepostForAdmin, idimagepost)
	return err
}

const scrubLinkForAdmin = `-- name: ScrubLinkForAdmin :exec
UPDATE linker SET title = ?, url = '', description = '', deleted_at = NOW() WHERE idlinker = ?
`

type ScrubLinkForAdminParams struct {
	Title    sql.NullString
	Idlinker int32
}

func (q *Queries) ScrubLinkForAdmin(ctx context.Context, arg ScrubLinkForAdminParams) error {
	_, err := q.db.ExecContext(ctx, scrubLinkForAdmin, arg.Title, arg.Idlinker)
	return err
}

const scrubUserForAdmin = `-- name: ScrubUserForAdmin :exec
UPDATE users SET username = ?, email = '', passwd = '', passwd_algorithm = '', deleted_at = NOW()
WHERE idusers = ?
`

type ScrubUserForAdminParams struct {
	Username sql.NullString
	Idusers  int32
}

func (q *Queries) ScrubUserForAdmin(ctx context.Context, arg ScrubUserForAdminParams) error {
	_, err := q.db.ExecContext(ctx, scrubUserForAdmin, arg.Username, arg.Idusers)
	return err
}

const scrubWritingForAdmin = `-- name: ScrubWritingForAdmin :exec
UPDATE writing SET title = ?, writing = ?, abstract = ?, deleted_at = NOW() WHERE idwriting = ?
`

type ScrubWritingForAdminParams struct {
	Title     sql.NullString
	Writing   sql.NullString
	Abstract  sql.NullString
	Idwriting int32
}

func (q *Queries) ScrubWritingForAdmin(ctx context.Context, arg ScrubWritingForAdminParams) error {
	_, err := q.db.ExecContext(ctx, scrubWritingForAdmin,
		arg.Title,
		arg.Writing,
		arg.Abstract,
		arg.Idwriting,
	)
	return err
}
