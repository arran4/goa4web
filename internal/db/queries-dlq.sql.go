// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries-dlq.sql

package db

import (
	"context"
	"time"
)

const countDeadLetters = `-- name: CountDeadLetters :one
SELECT COUNT(*) FROM dead_letters
`

func (q *Queries) CountDeadLetters(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countDeadLetters)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteDeadLetter = `-- name: DeleteDeadLetter :exec
DELETE FROM dead_letters WHERE id = ?
`

func (q *Queries) DeleteDeadLetter(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteDeadLetter, id)
	return err
}

const insertDeadLetter = `-- name: InsertDeadLetter :exec
INSERT INTO dead_letters (message) VALUES (?)
`

func (q *Queries) InsertDeadLetter(ctx context.Context, message string) error {
	_, err := q.db.ExecContext(ctx, insertDeadLetter, message)
	return err
}

const listDeadLetters = `-- name: ListDeadLetters :many
SELECT id, message, created_at FROM dead_letters
ORDER BY id DESC
LIMIT ?
`

func (q *Queries) ListDeadLetters(ctx context.Context, limit int32) ([]*DeadLetter, error) {
	rows, err := q.db.QueryContext(ctx, listDeadLetters, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*DeadLetter
	for rows.Next() {
		var i DeadLetter
		if err := rows.Scan(&i.ID, &i.Message, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const purgeDeadLettersBefore = `-- name: PurgeDeadLettersBefore :exec
DELETE FROM dead_letters WHERE created_at < ?
`

func (q *Queries) PurgeDeadLettersBefore(ctx context.Context, createdAt time.Time) error {
	_, err := q.db.ExecContext(ctx, purgeDeadLettersBefore, createdAt)
	return err
}
