// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries-dlq.sql

package db

import (
	"context"
	"time"
)

const countWorkerErrors = `-- name: CountWorkerErrors :one
SELECT COUNT(*) FROM worker_errors
`

func (q *Queries) CountWorkerErrors(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countWorkerErrors)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteWorkerError = `-- name: DeleteWorkerError :exec
DELETE FROM worker_errors WHERE id = ?
`

func (q *Queries) DeleteWorkerError(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteWorkerError, id)
	return err
}

const insertWorkerError = `-- name: InsertWorkerError :exec
INSERT INTO worker_errors (message) VALUES (?)
`

func (q *Queries) InsertWorkerError(ctx context.Context, message string) error {
	_, err := q.db.ExecContext(ctx, insertWorkerError, message)
	return err
}

const listWorkerErrors = `-- name: ListWorkerErrors :many
SELECT id, message, created_at FROM worker_errors
ORDER BY id DESC
LIMIT ?
`

func (q *Queries) ListWorkerErrors(ctx context.Context, limit int32) ([]*WorkerError, error) {
	rows, err := q.db.QueryContext(ctx, listWorkerErrors, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*WorkerError
	for rows.Next() {
		var i WorkerError
		if err := rows.Scan(&i.ID, &i.Message, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const purgeWorkerErrorsBefore = `-- name: PurgeWorkerErrorsBefore :exec
DELETE FROM worker_errors WHERE created_at < ?
`

func (q *Queries) PurgeWorkerErrorsBefore(ctx context.Context, createdAt time.Time) error {
	_, err := q.db.ExecContext(ctx, purgeWorkerErrorsBefore, createdAt)
	return err
}
