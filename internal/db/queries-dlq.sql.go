// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries-dlq.sql

package db

import (
	"context"
	"time"
)

const adminDeleteDeadLetter = `-- name: AdminDeleteDeadLetter :exec
DELETE FROM dead_letters WHERE id = ?
`

func (q *Queries) AdminDeleteDeadLetter(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, adminDeleteDeadLetter, id)
	return err
}

const adminLatestDeadLetter = `-- name: AdminLatestDeadLetter :one
SELECT MAX(created_at) FROM dead_letters
`

func (q *Queries) AdminLatestDeadLetter(ctx context.Context) (interface{}, error) {
	row := q.db.QueryRowContext(ctx, adminLatestDeadLetter)
	var max interface{}
	err := row.Scan(&max)
	return max, err
}

const adminListDeadLetters = `-- name: AdminListDeadLetters :many
SELECT id, message, created_at FROM dead_letters
ORDER BY id DESC
LIMIT ?
`

func (q *Queries) AdminListDeadLetters(ctx context.Context, limit int32) ([]*DeadLetter, error) {
	rows, err := q.db.QueryContext(ctx, adminListDeadLetters, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*DeadLetter
	for rows.Next() {
		var i DeadLetter
		if err := rows.Scan(&i.ID, &i.Message, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const adminPurgeDeadLettersBefore = `-- name: AdminPurgeDeadLettersBefore :exec
DELETE FROM dead_letters WHERE created_at < ?
`

func (q *Queries) AdminPurgeDeadLettersBefore(ctx context.Context, createdAt time.Time) error {
	_, err := q.db.ExecContext(ctx, adminPurgeDeadLettersBefore, createdAt)
	return err
}

const systemCountDeadLetters = `-- name: SystemCountDeadLetters :one
SELECT COUNT(*) FROM dead_letters
`

func (q *Queries) SystemCountDeadLetters(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, systemCountDeadLetters)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const systemInsertDeadLetter = `-- name: SystemInsertDeadLetter :exec
INSERT INTO dead_letters (message) VALUES (?)
`

func (q *Queries) SystemInsertDeadLetter(ctx context.Context, message string) error {
	_, err := q.db.ExecContext(ctx, systemInsertDeadLetter, message)
	return err
}
