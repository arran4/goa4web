// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries-externallinks.sql

package db

import (
	"context"
	"database/sql"
)

const clearExternalLinkCacheForAdmin = `-- name: ClearExternalLinkCacheForAdmin :exec
UPDATE external_links SET card_image_cache = NULL, favicon_cache = NULL, updated_at = CURRENT_TIMESTAMP, updated_by = ? WHERE id = ?
`

type ClearExternalLinkCacheForAdminParams struct {
	UpdatedBy sql.NullInt32
	ID        int32
}

func (q *Queries) ClearExternalLinkCacheForAdmin(ctx context.Context, arg ClearExternalLinkCacheForAdminParams) error {
	_, err := q.db.ExecContext(ctx, clearExternalLinkCacheForAdmin, arg.UpdatedBy, arg.ID)
	return err
}

const deleteExternalLinkForAdmin = `-- name: DeleteExternalLinkForAdmin :exec
DELETE FROM external_links WHERE id = ?
`

func (q *Queries) DeleteExternalLinkForAdmin(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteExternalLinkForAdmin, id)
	return err
}

const getExternalLinkByIDForAdmin = `-- name: GetExternalLinkByIDForAdmin :one
SELECT id, url, clicks, created_at, updated_at, updated_by, card_title, card_description, card_image, card_image_cache, favicon_cache FROM external_links WHERE id = ? LIMIT 1
`

func (q *Queries) GetExternalLinkByIDForAdmin(ctx context.Context, id int32) (*ExternalLink, error) {
	row := q.db.QueryRowContext(ctx, getExternalLinkByIDForAdmin, id)
	var i ExternalLink
	err := row.Scan(
		&i.ID,
		&i.Url,
		&i.Clicks,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.CardTitle,
		&i.CardDescription,
		&i.CardImage,
		&i.CardImageCache,
		&i.FaviconCache,
	)
	return &i, err
}

const getExternalLinkSystem = `-- name: GetExternalLinkSystem :one
SELECT id, url, clicks, created_at, updated_at, updated_by, card_title, card_description, card_image, card_image_cache, favicon_cache FROM external_links WHERE url = ? LIMIT 1
`

func (q *Queries) GetExternalLinkSystem(ctx context.Context, url string) (*ExternalLink, error) {
	row := q.db.QueryRowContext(ctx, getExternalLinkSystem, url)
	var i ExternalLink
	err := row.Scan(
		&i.ID,
		&i.Url,
		&i.Clicks,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.CardTitle,
		&i.CardDescription,
		&i.CardImage,
		&i.CardImageCache,
		&i.FaviconCache,
	)
	return &i, err
}

const listExternalLinksForAdmin = `-- name: ListExternalLinksForAdmin :many
SELECT id, url, clicks, created_at, updated_at, updated_by, card_title, card_description, card_image, card_image_cache, favicon_cache FROM external_links
ORDER BY created_at DESC
LIMIT ? OFFSET ?
`

type ListExternalLinksForAdminParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListExternalLinksForAdmin(ctx context.Context, arg ListExternalLinksForAdminParams) ([]*ExternalLink, error) {
	rows, err := q.db.QueryContext(ctx, listExternalLinksForAdmin, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*ExternalLink
	for rows.Next() {
		var i ExternalLink
		if err := rows.Scan(
			&i.ID,
			&i.Url,
			&i.Clicks,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.CardTitle,
			&i.CardDescription,
			&i.CardImage,
			&i.CardImageCache,
			&i.FaviconCache,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const registerExternalLinkClickSystem = `-- name: RegisterExternalLinkClickSystem :exec
INSERT INTO external_links (url, clicks)
VALUES (?, 1)
ON DUPLICATE KEY UPDATE clicks = clicks + 1
`

func (q *Queries) RegisterExternalLinkClickSystem(ctx context.Context, url string) error {
	_, err := q.db.ExecContext(ctx, registerExternalLinkClickSystem, url)
	return err
}

const updateExternalLinkForAdmin = `-- name: UpdateExternalLinkForAdmin :exec
UPDATE external_links
SET url = ?, card_title = ?, card_description = ?, card_image = ?, card_image_cache = ?, favicon_cache = ?, updated_at = CURRENT_TIMESTAMP, updated_by = ?
WHERE id = ?
`

type UpdateExternalLinkForAdminParams struct {
	Url             string
	CardTitle       sql.NullString
	CardDescription sql.NullString
	CardImage       sql.NullString
	CardImageCache  sql.NullString
	FaviconCache    sql.NullString
	UpdatedBy       sql.NullInt32
	ID              int32
}

func (q *Queries) UpdateExternalLinkForAdmin(ctx context.Context, arg UpdateExternalLinkForAdminParams) error {
	_, err := q.db.ExecContext(ctx, updateExternalLinkForAdmin,
		arg.Url,
		arg.CardTitle,
		arg.CardDescription,
		arg.CardImage,
		arg.CardImageCache,
		arg.FaviconCache,
		arg.UpdatedBy,
		arg.ID,
	)
	return err
}
