// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries-externallinks.sql

package db

import (
	"context"
	"database/sql"
)

const clearExternalLinkCache = `-- name: ClearExternalLinkCache :exec
UPDATE external_links
SET card_image_cache = NULL,
    favicon_cache    = NULL,
    updated_at       = CURRENT_TIMESTAMP,
    updated_by       = ?
WHERE external_links.id = ?
  AND EXISTS (
    SELECT 1 FROM user_roles ur
    JOIN roles r ON ur.role_id = r.id AND r.is_admin = 1
    WHERE ur.users_idusers = ?
  )
`

type ClearExternalLinkCacheParams struct {
	UpdatedBy sql.NullInt32
	ID        int32
	AdminID   int32
}

func (q *Queries) ClearExternalLinkCache(ctx context.Context, arg ClearExternalLinkCacheParams) error {
	_, err := q.db.ExecContext(ctx, clearExternalLinkCache, arg.UpdatedBy, arg.ID, arg.AdminID)
	return err
}

const deleteExternalLink = `-- name: DeleteExternalLink :exec
DELETE FROM external_links
WHERE external_links.id = ?
  AND EXISTS (
    SELECT 1 FROM user_roles ur
    JOIN roles r ON ur.role_id = r.id AND r.is_admin = 1
    WHERE ur.users_idusers = ?
  )
`

type DeleteExternalLinkParams struct {
	ID      int32
	AdminID int32
}

func (q *Queries) DeleteExternalLink(ctx context.Context, arg DeleteExternalLinkParams) error {
	_, err := q.db.ExecContext(ctx, deleteExternalLink, arg.ID, arg.AdminID)
	return err
}

const getExternalLink = `-- name: GetExternalLink :one
SELECT id, url, clicks, created_at, updated_at, updated_by, card_title, card_description, card_image, card_image_cache, favicon_cache FROM external_links WHERE url = ? LIMIT 1
`

func (q *Queries) GetExternalLink(ctx context.Context, url string) (*ExternalLink, error) {
	row := q.db.QueryRowContext(ctx, getExternalLink, url)
	var i ExternalLink
	err := row.Scan(
		&i.ID,
		&i.Url,
		&i.Clicks,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.CardTitle,
		&i.CardDescription,
		&i.CardImage,
		&i.CardImageCache,
		&i.FaviconCache,
	)
	return &i, err
}

const listExternalLinks = `-- name: ListExternalLinks :many
SELECT id, url, clicks, created_at, updated_at, updated_by, card_title, card_description, card_image, card_image_cache, favicon_cache FROM external_links
ORDER BY created_at DESC
LIMIT ? OFFSET ?
`

type ListExternalLinksParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListExternalLinks(ctx context.Context, arg ListExternalLinksParams) ([]*ExternalLink, error) {
	rows, err := q.db.QueryContext(ctx, listExternalLinks, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*ExternalLink
	for rows.Next() {
		var i ExternalLink
		if err := rows.Scan(
			&i.ID,
			&i.Url,
			&i.Clicks,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.CardTitle,
			&i.CardDescription,
			&i.CardImage,
			&i.CardImageCache,
			&i.FaviconCache,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const registerExternalLinkClick = `-- name: RegisterExternalLinkClick :exec
INSERT INTO external_links (url, clicks)
VALUES (?, 1)
ON DUPLICATE KEY UPDATE clicks = clicks + 1
`

func (q *Queries) RegisterExternalLinkClick(ctx context.Context, url string) error {
	_, err := q.db.ExecContext(ctx, registerExternalLinkClick, url)
	return err
}
