// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries-forum.sql

package db

import (
	"context"
	"database/sql"
)

const createForumCategory = `-- name: CreateForumCategory :exec
INSERT INTO forumcategory (forumcategory_idforumcategory, title, description) VALUES (?, ?, ?)
`

type CreateForumCategoryParams struct {
	ForumcategoryIdforumcategory int32
	Title                        sql.NullString
	Description                  sql.NullString
}

func (q *Queries) CreateForumCategory(ctx context.Context, arg CreateForumCategoryParams) error {
	_, err := q.db.ExecContext(ctx, createForumCategory, arg.ForumcategoryIdforumcategory, arg.Title, arg.Description)
	return err
}

const createForumTopic = `-- name: CreateForumTopic :execlastid
INSERT INTO forumtopic (forumcategory_idforumcategory, title, description) VALUES (?, ?, ?)
`

type CreateForumTopicParams struct {
	ForumcategoryIdforumcategory int32
	Title                        sql.NullString
	Description                  sql.NullString
}

func (q *Queries) CreateForumTopic(ctx context.Context, arg CreateForumTopicParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createForumTopic, arg.ForumcategoryIdforumcategory, arg.Title, arg.Description)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const deleteForumCategory = `-- name: DeleteForumCategory :exec
UPDATE forumcategory SET deleted_at = NOW() WHERE idforumcategory = ?
`

func (q *Queries) DeleteForumCategory(ctx context.Context, idforumcategory int32) error {
	_, err := q.db.ExecContext(ctx, deleteForumCategory, idforumcategory)
	return err
}

const deleteForumTopic = `-- name: DeleteForumTopic :exec
UPDATE forumtopic SET deleted_at = NOW() WHERE idforumtopic = ?
`

// Removes a forum topic by ID.
func (q *Queries) DeleteForumTopic(ctx context.Context, idforumtopic int32) error {
	_, err := q.db.ExecContext(ctx, deleteForumTopic, idforumtopic)
	return err
}

const findForumTopicByTitle = `-- name: FindForumTopicByTitle :one
SELECT idforumtopic, lastposter, forumcategory_idforumcategory, title, description, threads, comments, lastaddition
FROM forumtopic
WHERE title=?
`

func (q *Queries) FindForumTopicByTitle(ctx context.Context, title sql.NullString) (*Forumtopic, error) {
	row := q.db.QueryRowContext(ctx, findForumTopicByTitle, title)
	var i Forumtopic
	err := row.Scan(
		&i.Idforumtopic,
		&i.Lastposter,
		&i.ForumcategoryIdforumcategory,
		&i.Title,
		&i.Description,
		&i.Threads,
		&i.Comments,
		&i.Lastaddition,
	)
	return &i, err
}

const getAllForumCategories = `-- name: GetAllForumCategories :many
SELECT f.idforumcategory, f.forumcategory_idforumcategory, f.title, f.description
FROM forumcategory f
`

func (q *Queries) GetAllForumCategories(ctx context.Context) ([]*Forumcategory, error) {
	rows, err := q.db.QueryContext(ctx, getAllForumCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Forumcategory
	for rows.Next() {
		var i Forumcategory
		if err := rows.Scan(
			&i.Idforumcategory,
			&i.ForumcategoryIdforumcategory,
			&i.Title,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllForumCategoriesWithSubcategoryCount = `-- name: GetAllForumCategoriesWithSubcategoryCount :many
SELECT c.idforumcategory, c.forumcategory_idforumcategory, c.title, c.description, COUNT(c2.idforumcategory) as SubcategoryCount,
       COUNT(t.idforumtopic)   as TopicCount
FROM forumcategory c
LEFT JOIN forumcategory c2 ON c.idforumcategory = c2.forumcategory_idforumcategory
LEFT JOIN forumtopic t ON c.idforumcategory = t.forumcategory_idforumcategory
GROUP BY c.idforumcategory
`

type GetAllForumCategoriesWithSubcategoryCountRow struct {
	Idforumcategory              int32
	ForumcategoryIdforumcategory int32
	Title                        sql.NullString
	Description                  sql.NullString
	Subcategorycount             int64
	Topiccount                   int64
}

func (q *Queries) GetAllForumCategoriesWithSubcategoryCount(ctx context.Context) ([]*GetAllForumCategoriesWithSubcategoryCountRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllForumCategoriesWithSubcategoryCount)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetAllForumCategoriesWithSubcategoryCountRow
	for rows.Next() {
		var i GetAllForumCategoriesWithSubcategoryCountRow
		if err := rows.Scan(
			&i.Idforumcategory,
			&i.ForumcategoryIdforumcategory,
			&i.Title,
			&i.Description,
			&i.Subcategorycount,
			&i.Topiccount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllForumThreadsWithTopic = `-- name: GetAllForumThreadsWithTopic :many
SELECT th.idforumthread, th.firstpost, th.lastposter, th.forumtopic_idforumtopic, th.comments, th.lastaddition, th.locked, t.title AS topic_title
FROM forumthread th
LEFT JOIN forumtopic t ON th.forumtopic_idforumtopic = t.idforumtopic
ORDER BY t.idforumtopic, th.lastaddition DESC
`

type GetAllForumThreadsWithTopicRow struct {
	Idforumthread          int32
	Firstpost              int32
	Lastposter             int32
	ForumtopicIdforumtopic int32
	Comments               sql.NullInt32
	Lastaddition           sql.NullTime
	Locked                 sql.NullBool
	TopicTitle             sql.NullString
}

func (q *Queries) GetAllForumThreadsWithTopic(ctx context.Context) ([]*GetAllForumThreadsWithTopicRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllForumThreadsWithTopic)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetAllForumThreadsWithTopicRow
	for rows.Next() {
		var i GetAllForumThreadsWithTopicRow
		if err := rows.Scan(
			&i.Idforumthread,
			&i.Firstpost,
			&i.Lastposter,
			&i.ForumtopicIdforumtopic,
			&i.Comments,
			&i.Lastaddition,
			&i.Locked,
			&i.TopicTitle,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllForumTopics = `-- name: GetAllForumTopics :many
SELECT t.idforumtopic, t.lastposter, t.forumcategory_idforumcategory, t.title, t.description, t.threads, t.comments, t.lastaddition
FROM forumtopic t
GROUP BY t.idforumtopic
`

func (q *Queries) GetAllForumTopics(ctx context.Context) ([]*Forumtopic, error) {
	rows, err := q.db.QueryContext(ctx, getAllForumTopics)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Forumtopic
	for rows.Next() {
		var i Forumtopic
		if err := rows.Scan(
			&i.Idforumtopic,
			&i.Lastposter,
			&i.ForumcategoryIdforumcategory,
			&i.Title,
			&i.Description,
			&i.Threads,
			&i.Comments,
			&i.Lastaddition,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllForumTopicsByCategoryIdForUserWithLastPosterName = `-- name: GetAllForumTopicsByCategoryIdForUserWithLastPosterName :many
WITH RECURSIVE role_ids(id) AS (
    SELECT ur.role_id FROM user_roles ur WHERE ur.users_idusers = ?
    UNION
    SELECT r2.id FROM role_ids ri
    JOIN grants g ON g.role_id = ri.id AND g.section='role' AND g.active = 1
    JOIN roles r2 ON r2.name = g.action
)
SELECT t.idforumtopic, t.lastposter, t.forumcategory_idforumcategory, t.title, t.description, t.threads, t.comments, t.lastaddition, lu.username AS LastPosterUsername
FROM forumtopic t
LEFT JOIN users lu ON lu.idusers = t.lastposter
WHERE t.forumcategory_idforumcategory = ?
  AND EXISTS (
    SELECT 1 FROM grants g
    WHERE g.section='forum'
      AND g.item='topic'
      AND g.action='see'
      AND g.active=1
      AND g.item_id = t.idforumtopic
      AND (g.user_id = ? OR g.user_id IS NULL)
      AND (g.role_id IS NULL OR g.role_id IN (SELECT id FROM role_ids))
  )
ORDER BY t.lastaddition DESC
`

type GetAllForumTopicsByCategoryIdForUserWithLastPosterNameParams struct {
	ViewerID      int32
	CategoryID    int32
	ViewerMatchID sql.NullInt32
}

type GetAllForumTopicsByCategoryIdForUserWithLastPosterNameRow struct {
	Idforumtopic                 int32
	Lastposter                   int32
	ForumcategoryIdforumcategory int32
	Title                        sql.NullString
	Description                  sql.NullString
	Threads                      sql.NullInt32
	Comments                     sql.NullInt32
	Lastaddition                 sql.NullTime
	Lastposterusername           sql.NullString
}

func (q *Queries) GetAllForumTopicsByCategoryIdForUserWithLastPosterName(ctx context.Context, arg GetAllForumTopicsByCategoryIdForUserWithLastPosterNameParams) ([]*GetAllForumTopicsByCategoryIdForUserWithLastPosterNameRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllForumTopicsByCategoryIdForUserWithLastPosterName, arg.ViewerID, arg.CategoryID, arg.ViewerMatchID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetAllForumTopicsByCategoryIdForUserWithLastPosterNameRow
	for rows.Next() {
		var i GetAllForumTopicsByCategoryIdForUserWithLastPosterNameRow
		if err := rows.Scan(
			&i.Idforumtopic,
			&i.Lastposter,
			&i.ForumcategoryIdforumcategory,
			&i.Title,
			&i.Description,
			&i.Threads,
			&i.Comments,
			&i.Lastaddition,
			&i.Lastposterusername,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllForumTopicsForUser = `-- name: GetAllForumTopicsForUser :many
WITH RECURSIVE role_ids(id) AS (
    SELECT ur.role_id FROM user_roles ur WHERE ur.users_idusers = ?
    UNION
    SELECT r2.id FROM role_ids ri
    JOIN grants g ON g.role_id = ri.id AND g.section='role' AND g.active = 1
    JOIN roles r2 ON r2.name = g.action
)
SELECT t.idforumtopic, t.lastposter, t.forumcategory_idforumcategory, t.title, t.description, t.threads, t.comments, t.lastaddition, lu.username AS LastPosterUsername
FROM forumtopic t
LEFT JOIN users lu ON lu.idusers = t.lastposter
WHERE EXISTS (
    SELECT 1 FROM grants g
    WHERE g.section='forum'
      AND g.item='topic'
      AND g.action='see'
      AND g.active=1
      AND g.item_id = t.idforumtopic
      AND (g.user_id = ? OR g.user_id IS NULL)
      AND (g.role_id IS NULL OR g.role_id IN (SELECT id FROM role_ids))
  )
ORDER BY t.lastaddition DESC
`

type GetAllForumTopicsForUserParams struct {
	ViewerID      int32
	ViewerMatchID sql.NullInt32
}

type GetAllForumTopicsForUserRow struct {
	Idforumtopic                 int32
	Lastposter                   int32
	ForumcategoryIdforumcategory int32
	Title                        sql.NullString
	Description                  sql.NullString
	Threads                      sql.NullInt32
	Comments                     sql.NullInt32
	Lastaddition                 sql.NullTime
	Lastposterusername           sql.NullString
}

func (q *Queries) GetAllForumTopicsForUser(ctx context.Context, arg GetAllForumTopicsForUserParams) ([]*GetAllForumTopicsForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllForumTopicsForUser, arg.ViewerID, arg.ViewerMatchID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetAllForumTopicsForUserRow
	for rows.Next() {
		var i GetAllForumTopicsForUserRow
		if err := rows.Scan(
			&i.Idforumtopic,
			&i.Lastposter,
			&i.ForumcategoryIdforumcategory,
			&i.Title,
			&i.Description,
			&i.Threads,
			&i.Comments,
			&i.Lastaddition,
			&i.Lastposterusername,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getForumCategoryById = `-- name: GetForumCategoryById :one
SELECT idforumcategory, forumcategory_idforumcategory, title, description FROM forumcategory WHERE idforumcategory = ?
`

func (q *Queries) GetForumCategoryById(ctx context.Context, idforumcategory int32) (*Forumcategory, error) {
	row := q.db.QueryRowContext(ctx, getForumCategoryById, idforumcategory)
	var i Forumcategory
	err := row.Scan(
		&i.Idforumcategory,
		&i.ForumcategoryIdforumcategory,
		&i.Title,
		&i.Description,
	)
	return &i, err
}

const getForumThreadsByForumTopicIdForUserWithFirstAndLastPosterAndFirstPostText = `-- name: GetForumThreadsByForumTopicIdForUserWithFirstAndLastPosterAndFirstPostText :many
WITH RECURSIVE role_ids(id) AS (
    SELECT ur.role_id FROM user_roles ur WHERE ur.users_idusers = ?
    UNION
    SELECT r2.id FROM role_ids ri
    JOIN grants g ON g.role_id = ri.id AND g.section='role' AND g.active = 1
    JOIN roles r2 ON r2.name = g.action
)
SELECT th.idforumthread, th.firstpost, th.lastposter, th.forumtopic_idforumtopic, th.comments, th.lastaddition, th.locked, lu.username AS lastposterusername, lu.idusers AS lastposterid, fcu.username as firstpostusername, fc.written as firstpostwritten, fc.text as firstposttext
FROM forumthread th
LEFT JOIN forumtopic t ON th.forumtopic_idforumtopic=t.idforumtopic
LEFT JOIN users lu ON lu.idusers = t.lastposter
LEFT JOIN comments fc ON th.firstpost=fc.idcomments
LEFT JOIN users fcu ON fcu.idusers = fc.users_idusers
WHERE th.forumtopic_idforumtopic=?
  AND EXISTS (
    SELECT 1 FROM grants g
    WHERE g.section='forum'
      AND g.item='topic'
      AND g.action='view'
      AND g.active=1
      AND g.item_id = t.idforumtopic
      AND (g.user_id = ? OR g.user_id IS NULL)
      AND (g.role_id IS NULL OR g.role_id IN (SELECT id FROM role_ids))
  )
ORDER BY th.lastaddition DESC
`

type GetForumThreadsByForumTopicIdForUserWithFirstAndLastPosterAndFirstPostTextParams struct {
	ViewerID      int32
	TopicID       int32
	ViewerMatchID sql.NullInt32
}

type GetForumThreadsByForumTopicIdForUserWithFirstAndLastPosterAndFirstPostTextRow struct {
	Idforumthread          int32
	Firstpost              int32
	Lastposter             int32
	ForumtopicIdforumtopic int32
	Comments               sql.NullInt32
	Lastaddition           sql.NullTime
	Locked                 sql.NullBool
	Lastposterusername     sql.NullString
	Lastposterid           sql.NullInt32
	Firstpostusername      sql.NullString
	Firstpostwritten       sql.NullTime
	Firstposttext          sql.NullString
}

func (q *Queries) GetForumThreadsByForumTopicIdForUserWithFirstAndLastPosterAndFirstPostText(ctx context.Context, arg GetForumThreadsByForumTopicIdForUserWithFirstAndLastPosterAndFirstPostTextParams) ([]*GetForumThreadsByForumTopicIdForUserWithFirstAndLastPosterAndFirstPostTextRow, error) {
	rows, err := q.db.QueryContext(ctx, getForumThreadsByForumTopicIdForUserWithFirstAndLastPosterAndFirstPostText, arg.ViewerID, arg.TopicID, arg.ViewerMatchID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetForumThreadsByForumTopicIdForUserWithFirstAndLastPosterAndFirstPostTextRow
	for rows.Next() {
		var i GetForumThreadsByForumTopicIdForUserWithFirstAndLastPosterAndFirstPostTextRow
		if err := rows.Scan(
			&i.Idforumthread,
			&i.Firstpost,
			&i.Lastposter,
			&i.ForumtopicIdforumtopic,
			&i.Comments,
			&i.Lastaddition,
			&i.Locked,
			&i.Lastposterusername,
			&i.Lastposterid,
			&i.Firstpostusername,
			&i.Firstpostwritten,
			&i.Firstposttext,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getForumTopicById = `-- name: GetForumTopicById :one
SELECT idforumtopic, lastposter, forumcategory_idforumcategory, title, description, threads, comments, lastaddition
FROM forumtopic
WHERE idforumtopic = ?
`

func (q *Queries) GetForumTopicById(ctx context.Context, idforumtopic int32) (*Forumtopic, error) {
	row := q.db.QueryRowContext(ctx, getForumTopicById, idforumtopic)
	var i Forumtopic
	err := row.Scan(
		&i.Idforumtopic,
		&i.Lastposter,
		&i.ForumcategoryIdforumcategory,
		&i.Title,
		&i.Description,
		&i.Threads,
		&i.Comments,
		&i.Lastaddition,
	)
	return &i, err
}

const getForumTopicByIdForUser = `-- name: GetForumTopicByIdForUser :one
WITH RECURSIVE role_ids(id) AS (
    SELECT ur.role_id FROM user_roles ur WHERE ur.users_idusers = ?
    UNION
    SELECT r2.id FROM role_ids ri
    JOIN grants g ON g.role_id = ri.id AND g.section='role' AND g.active = 1
    JOIN roles r2 ON r2.name = g.action
)
SELECT t.idforumtopic, t.lastposter, t.forumcategory_idforumcategory, t.title, t.description, t.threads, t.comments, t.lastaddition, lu.username AS LastPosterUsername
FROM forumtopic t
LEFT JOIN users lu ON lu.idusers = t.lastposter
WHERE t.idforumtopic = ?
  AND EXISTS (
    SELECT 1 FROM grants g
    WHERE g.section='forum'
      AND g.item='topic'
      AND g.action='view'
      AND g.active=1
      AND g.item_id = t.idforumtopic
      AND (g.user_id = ? OR g.user_id IS NULL)
      AND (g.role_id IS NULL OR g.role_id IN (SELECT id FROM role_ids))
  )
ORDER BY t.lastaddition DESC
`

type GetForumTopicByIdForUserParams struct {
	ViewerID      int32
	Idforumtopic  int32
	ViewerMatchID sql.NullInt32
}

type GetForumTopicByIdForUserRow struct {
	Idforumtopic                 int32
	Lastposter                   int32
	ForumcategoryIdforumcategory int32
	Title                        sql.NullString
	Description                  sql.NullString
	Threads                      sql.NullInt32
	Comments                     sql.NullInt32
	Lastaddition                 sql.NullTime
	Lastposterusername           sql.NullString
}

func (q *Queries) GetForumTopicByIdForUser(ctx context.Context, arg GetForumTopicByIdForUserParams) (*GetForumTopicByIdForUserRow, error) {
	row := q.db.QueryRowContext(ctx, getForumTopicByIdForUser, arg.ViewerID, arg.Idforumtopic, arg.ViewerMatchID)
	var i GetForumTopicByIdForUserRow
	err := row.Scan(
		&i.Idforumtopic,
		&i.Lastposter,
		&i.ForumcategoryIdforumcategory,
		&i.Title,
		&i.Description,
		&i.Threads,
		&i.Comments,
		&i.Lastaddition,
		&i.Lastposterusername,
	)
	return &i, err
}

const getForumTopicsByCategoryId = `-- name: GetForumTopicsByCategoryId :many
SELECT idforumtopic, lastposter, forumcategory_idforumcategory, title, description, threads, comments, lastaddition FROM forumtopic WHERE forumcategory_idforumcategory = ? ORDER BY lastaddition DESC
`

func (q *Queries) GetForumTopicsByCategoryId(ctx context.Context, forumcategoryIdforumcategory int32) ([]*Forumtopic, error) {
	rows, err := q.db.QueryContext(ctx, getForumTopicsByCategoryId, forumcategoryIdforumcategory)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Forumtopic
	for rows.Next() {
		var i Forumtopic
		if err := rows.Scan(
			&i.Idforumtopic,
			&i.Lastposter,
			&i.ForumcategoryIdforumcategory,
			&i.Title,
			&i.Description,
			&i.Threads,
			&i.Comments,
			&i.Lastaddition,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const rebuildAllForumTopicMetaColumns = `-- name: RebuildAllForumTopicMetaColumns :exec
UPDATE forumtopic
SET threads = (
    SELECT COUNT(idforumthread)
    FROM forumthread
    WHERE forumtopic_idforumtopic = idforumtopic
), comments = (
    SELECT SUM(comments)
    FROM forumthread
    WHERE forumtopic_idforumtopic = idforumtopic
), lastaddition = (
    SELECT lastaddition
    FROM forumthread
    WHERE forumtopic_idforumtopic = idforumtopic
    ORDER BY lastaddition DESC
    LIMIT 1
), lastposter = (
    SELECT lastposter
    FROM forumthread
    WHERE forumtopic_idforumtopic = idforumtopic
    ORDER BY lastaddition DESC
    LIMIT 1
)
`

func (q *Queries) RebuildAllForumTopicMetaColumns(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, rebuildAllForumTopicMetaColumns)
	return err
}

const rebuildForumTopicByIdMetaColumns = `-- name: RebuildForumTopicByIdMetaColumns :exec
UPDATE forumtopic
SET threads = (
    SELECT COUNT(idforumthread)
    FROM forumthread
    WHERE forumtopic_idforumtopic = idforumtopic
), comments = (
    SELECT SUM(comments)
    FROM forumthread
    WHERE forumtopic_idforumtopic = idforumtopic
), lastaddition = (
    SELECT lastaddition
    FROM forumthread
    WHERE forumtopic_idforumtopic = idforumtopic
    ORDER BY lastaddition DESC
    LIMIT 1
), lastposter = (
    SELECT lastposter
    FROM forumthread
    WHERE forumtopic_idforumtopic = idforumtopic
    ORDER BY lastaddition DESC
    LIMIT 1
)
WHERE idforumtopic = ?
`

func (q *Queries) RebuildForumTopicByIdMetaColumns(ctx context.Context, idforumtopic int32) error {
	_, err := q.db.ExecContext(ctx, rebuildForumTopicByIdMetaColumns, idforumtopic)
	return err
}

const updateForumCategory = `-- name: UpdateForumCategory :exec
UPDATE forumcategory SET title = ?, description = ?, forumcategory_idforumcategory = ? WHERE idforumcategory = ?
`

type UpdateForumCategoryParams struct {
	Title                        sql.NullString
	Description                  sql.NullString
	ForumcategoryIdforumcategory int32
	Idforumcategory              int32
}

func (q *Queries) UpdateForumCategory(ctx context.Context, arg UpdateForumCategoryParams) error {
	_, err := q.db.ExecContext(ctx, updateForumCategory,
		arg.Title,
		arg.Description,
		arg.ForumcategoryIdforumcategory,
		arg.Idforumcategory,
	)
	return err
}

const updateForumTopic = `-- name: UpdateForumTopic :exec
UPDATE forumtopic SET title = ?, description = ?, forumcategory_idforumcategory = ? WHERE idforumtopic = ?
`

type UpdateForumTopicParams struct {
	Title                        sql.NullString
	Description                  sql.NullString
	ForumcategoryIdforumcategory int32
	Idforumtopic                 int32
}

func (q *Queries) UpdateForumTopic(ctx context.Context, arg UpdateForumTopicParams) error {
	_, err := q.db.ExecContext(ctx, updateForumTopic,
		arg.Title,
		arg.Description,
		arg.ForumcategoryIdforumcategory,
		arg.Idforumtopic,
	)
	return err
}
