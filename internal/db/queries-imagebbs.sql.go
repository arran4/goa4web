// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries-imagebbs.sql

package db

import (
	"context"
	"database/sql"
)

const adminApproveImagePost = `-- name: AdminApproveImagePost :exec
UPDATE imagepost SET approved = 1 WHERE idimagepost = ?
`

// Administrative approval of an image post.
func (q *Queries) AdminApproveImagePost(ctx context.Context, imagePostID int32) error {
	_, err := q.db.ExecContext(ctx, adminApproveImagePost, imagePostID)
	return err
}

const adminCreateImageBoard = `-- name: AdminCreateImageBoard :exec
INSERT INTO imageboard (imageboard_idimageboard, title, description, approval_required)
VALUES (
    ?,
    ?,
    ?,
    ?
)
`

type AdminCreateImageBoardParams struct {
	ParentID         int32
	Title            sql.NullString
	Description      sql.NullString
	ApprovalRequired bool
}

// Administrative creation of a new image board.
// Admin commands must not require a user ID.
func (q *Queries) AdminCreateImageBoard(ctx context.Context, arg AdminCreateImageBoardParams) error {
	_, err := q.db.ExecContext(ctx, adminCreateImageBoard,
		arg.ParentID,
		arg.Title,
		arg.Description,
		arg.ApprovalRequired,
	)
	return err
}

const adminDeleteImageBoard = `-- name: AdminDeleteImageBoard :exec
UPDATE imageboard SET deleted_at = NOW() WHERE idimageboard = ?
`

// Administrative soft delete of a board.
func (q *Queries) AdminDeleteImageBoard(ctx context.Context, boardID int32) error {
	_, err := q.db.ExecContext(ctx, adminDeleteImageBoard, boardID)
	return err
}

const adminGetImageBoardByID = `-- name: AdminGetImageBoardByID :one
SELECT idimageboard, imageboard_idimageboard, title, description, approval_required FROM imageboard WHERE idimageboard = ?
`

// Administrative fetch of a board by ID.
func (q *Queries) AdminGetImageBoardByID(ctx context.Context, boardID int32) (*Imageboard, error) {
	row := q.db.QueryRowContext(ctx, adminGetImageBoardByID, boardID)
	var i Imageboard
	err := row.Scan(
		&i.Idimageboard,
		&i.ImageboardIdimageboard,
		&i.Title,
		&i.Description,
		&i.ApprovalRequired,
	)
	return &i, err
}

const adminListAllImagePostsByPoster = `-- name: AdminListAllImagePostsByPoster :many
SELECT i.idimagepost, i.forumthread_id, i.users_idusers, i.imageboard_idimageboard, i.posted, i.description, i.thumbnail, i.fullimage, i.file_size, i.approved, i.deleted_at, i.last_index, u.username, th.comments
FROM imagepost i
LEFT JOIN users u ON i.users_idusers = u.idusers
LEFT JOIN forumthread th ON i.forumthread_id = th.idforumthread
WHERE i.users_idusers = ? AND i.deleted_at IS NULL
ORDER BY i.posted DESC
LIMIT ? OFFSET ?
`

type AdminListAllImagePostsByPosterParams struct {
	PosterID int32
	Limit    int32
	Offset   int32
}

type AdminListAllImagePostsByPosterRow struct {
	Idimagepost            int32
	ForumthreadID          int32
	UsersIdusers           int32
	ImageboardIdimageboard int32
	Posted                 sql.NullTime
	Description            sql.NullString
	Thumbnail              sql.NullString
	Fullimage              sql.NullString
	FileSize               int32
	Approved               bool
	DeletedAt              sql.NullTime
	LastIndex              sql.NullTime
	Username               sql.NullString
	Comments               sql.NullInt32
}

// Administrative listing of all image posts by poster regardless of approval.
func (q *Queries) AdminListAllImagePostsByPoster(ctx context.Context, arg AdminListAllImagePostsByPosterParams) ([]*AdminListAllImagePostsByPosterRow, error) {
	rows, err := q.db.QueryContext(ctx, adminListAllImagePostsByPoster, arg.PosterID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*AdminListAllImagePostsByPosterRow
	for rows.Next() {
		var i AdminListAllImagePostsByPosterRow
		if err := rows.Scan(
			&i.Idimagepost,
			&i.ForumthreadID,
			&i.UsersIdusers,
			&i.ImageboardIdimageboard,
			&i.Posted,
			&i.Description,
			&i.Thumbnail,
			&i.Fullimage,
			&i.FileSize,
			&i.Approved,
			&i.DeletedAt,
			&i.LastIndex,
			&i.Username,
			&i.Comments,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const adminListBoards = `-- name: AdminListBoards :many
SELECT b.idimageboard, b.imageboard_idimageboard, b.title, b.description, b.approval_required
FROM imageboard b
LIMIT ? OFFSET ?
`

type AdminListBoardsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) AdminListBoards(ctx context.Context, arg AdminListBoardsParams) ([]*Imageboard, error) {
	rows, err := q.db.QueryContext(ctx, adminListBoards, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Imageboard
	for rows.Next() {
		var i Imageboard
		if err := rows.Scan(
			&i.Idimageboard,
			&i.ImageboardIdimageboard,
			&i.Title,
			&i.Description,
			&i.ApprovalRequired,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const adminListImagePostsByPoster = `-- name: AdminListImagePostsByPoster :many
SELECT i.idimagepost, i.forumthread_id, i.users_idusers, i.imageboard_idimageboard, i.posted, i.description, i.thumbnail, i.fullimage, i.file_size, i.approved, i.deleted_at, i.last_index, u.username, th.comments
FROM imagepost i
LEFT JOIN users u ON i.users_idusers = u.idusers
LEFT JOIN forumthread th ON i.forumthread_id = th.idforumthread
WHERE i.users_idusers = ? AND i.approved = 1 AND i.deleted_at IS NULL
ORDER BY i.posted DESC
LIMIT ? OFFSET ?
`

type AdminListImagePostsByPosterParams struct {
	PosterID int32
	Limit    int32
	Offset   int32
}

type AdminListImagePostsByPosterRow struct {
	Idimagepost            int32
	ForumthreadID          int32
	UsersIdusers           int32
	ImageboardIdimageboard int32
	Posted                 sql.NullTime
	Description            sql.NullString
	Thumbnail              sql.NullString
	Fullimage              sql.NullString
	FileSize               int32
	Approved               bool
	DeletedAt              sql.NullTime
	LastIndex              sql.NullTime
	Username               sql.NullString
	Comments               sql.NullInt32
}

// Administrative listing of approved image posts by poster.
func (q *Queries) AdminListImagePostsByPoster(ctx context.Context, arg AdminListImagePostsByPosterParams) ([]*AdminListImagePostsByPosterRow, error) {
	rows, err := q.db.QueryContext(ctx, adminListImagePostsByPoster, arg.PosterID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*AdminListImagePostsByPosterRow
	for rows.Next() {
		var i AdminListImagePostsByPosterRow
		if err := rows.Scan(
			&i.Idimagepost,
			&i.ForumthreadID,
			&i.UsersIdusers,
			&i.ImageboardIdimageboard,
			&i.Posted,
			&i.Description,
			&i.Thumbnail,
			&i.Fullimage,
			&i.FileSize,
			&i.Approved,
			&i.DeletedAt,
			&i.LastIndex,
			&i.Username,
			&i.Comments,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const adminSetImagePostForumThreadID = `-- name: AdminSetImagePostForumThreadID :exec
UPDATE imagepost
SET forumthread_id = ?
WHERE idimagepost = ?
`

type AdminSetImagePostForumThreadIDParams struct {
	ForumThreadID int32
	ImagePostID   int32
}

// Administrative association of an image post to a forum thread.
func (q *Queries) AdminSetImagePostForumThreadID(ctx context.Context, arg AdminSetImagePostForumThreadIDParams) error {
	_, err := q.db.ExecContext(ctx, adminSetImagePostForumThreadID, arg.ForumThreadID, arg.ImagePostID)
	return err
}

const adminUpdateImageBoard = `-- name: AdminUpdateImageBoard :exec
UPDATE imageboard
SET
    title = ?,
    description = ?,
    imageboard_idimageboard = ?,
    approval_required = ?
WHERE idimageboard = ?
`

type AdminUpdateImageBoardParams struct {
	Title            sql.NullString
	Description      sql.NullString
	ParentID         int32
	ApprovalRequired bool
	BoardID          int32
}

// Administrative update of board properties.
func (q *Queries) AdminUpdateImageBoard(ctx context.Context, arg AdminUpdateImageBoardParams) error {
	_, err := q.db.ExecContext(ctx, adminUpdateImageBoard,
		arg.Title,
		arg.Description,
		arg.ParentID,
		arg.ApprovalRequired,
		arg.BoardID,
	)
	return err
}

const createImagePostForPoster = `-- name: CreateImagePostForPoster :execlastid
INSERT INTO imagepost (
    imageboard_idimageboard,
    thumbnail,
    fullimage,
    users_idusers,
    description,
    posted,
    approved,
    file_size
)
VALUES (
    ?,
    ?,
    ?,
    ?,
    ?,
    NOW(),
    ?,
    ?
)
`

type CreateImagePostForPosterParams struct {
	BoardID     int32
	Thumbnail   sql.NullString
	Fullimage   sql.NullString
	PosterID    int32
	Description sql.NullString
	Approved    bool
	FileSize    int32
}

// Posts an image on behalf of a poster.
func (q *Queries) CreateImagePostForPoster(ctx context.Context, arg CreateImagePostForPosterParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createImagePostForPoster,
		arg.BoardID,
		arg.Thumbnail,
		arg.Fullimage,
		arg.PosterID,
		arg.Description,
		arg.Approved,
		arg.FileSize,
	)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const getAllImagePostsForIndex = `-- name: GetAllImagePostsForIndex :many
SELECT idimagepost, description FROM imagepost WHERE deleted_at IS NULL
`

type GetAllImagePostsForIndexRow struct {
	Idimagepost int32
	Description sql.NullString
}

func (q *Queries) GetAllImagePostsForIndex(ctx context.Context) ([]*GetAllImagePostsForIndexRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllImagePostsForIndex)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetAllImagePostsForIndexRow
	for rows.Next() {
		var i GetAllImagePostsForIndexRow
		if err := rows.Scan(&i.Idimagepost, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getImageBoardByIDForLister = `-- name: GetImageBoardByIDForLister :one
WITH RECURSIVE role_ids(id) AS (
    SELECT DISTINCT ur.role_id FROM user_roles ur WHERE ur.users_idusers = ?
)
SELECT b.idimageboard, b.imageboard_idimageboard, b.title, b.description, b.approval_required
FROM imageboard b
WHERE b.idimageboard = ?
  AND b.deleted_at IS NULL
  AND EXISTS (
    SELECT 1 FROM grants g
    WHERE g.section='imagebbs'
      AND (g.item='board' OR g.item IS NULL)
      AND g.action='see'
      AND g.active=1
      AND (g.item_id = b.idimageboard OR g.item_id IS NULL)
      AND (g.user_id = ? OR g.user_id IS NULL)
      AND (g.role_id IS NULL OR g.role_id IN (SELECT id FROM role_ids))
  )
`

type GetImageBoardByIDForListerParams struct {
	ListerID     int32
	BoardID      int32
	ListerUserID sql.NullInt32
}

func (q *Queries) GetImageBoardByIDForLister(ctx context.Context, arg GetImageBoardByIDForListerParams) (*Imageboard, error) {
	row := q.db.QueryRowContext(ctx, getImageBoardByIDForLister, arg.ListerID, arg.BoardID, arg.ListerUserID)
	var i Imageboard
	err := row.Scan(
		&i.Idimageboard,
		&i.ImageboardIdimageboard,
		&i.Title,
		&i.Description,
		&i.ApprovalRequired,
	)
	return &i, err
}

const getImagePostByIDForLister = `-- name: GetImagePostByIDForLister :one
WITH RECURSIVE role_ids(id) AS (
    SELECT DISTINCT ur.role_id FROM user_roles ur WHERE ur.users_idusers = ?
)
SELECT i.idimagepost, i.forumthread_id, i.users_idusers, i.imageboard_idimageboard, i.posted, i.description, i.thumbnail, i.fullimage, i.file_size, i.approved, i.deleted_at, i.last_index, u.username, th.comments
FROM imagepost i
LEFT JOIN users u ON i.users_idusers = u.idusers
LEFT JOIN forumthread th ON i.forumthread_id = th.idforumthread
WHERE i.idimagepost = ?
  AND i.approved = 1
  AND i.deleted_at IS NULL
  AND EXISTS (
    SELECT 1 FROM grants g
    WHERE g.section='imagebbs'
      AND g.item='board'
      AND g.action='view'
      AND g.active=1
      AND g.item_id = i.imageboard_idimageboard
      AND (g.user_id = ? OR g.user_id IS NULL)
      AND (g.role_id IS NULL OR g.role_id IN (SELECT id FROM role_ids))
  )
LIMIT 1
`

type GetImagePostByIDForListerParams struct {
	ListerID     int32
	ID           int32
	ListerUserID sql.NullInt32
}

type GetImagePostByIDForListerRow struct {
	Idimagepost            int32
	ForumthreadID          int32
	UsersIdusers           int32
	ImageboardIdimageboard int32
	Posted                 sql.NullTime
	Description            sql.NullString
	Thumbnail              sql.NullString
	Fullimage              sql.NullString
	FileSize               int32
	Approved               bool
	DeletedAt              sql.NullTime
	LastIndex              sql.NullTime
	Username               sql.NullString
	Comments               sql.NullInt32
}

func (q *Queries) GetImagePostByIDForLister(ctx context.Context, arg GetImagePostByIDForListerParams) (*GetImagePostByIDForListerRow, error) {
	row := q.db.QueryRowContext(ctx, getImagePostByIDForLister, arg.ListerID, arg.ID, arg.ListerUserID)
	var i GetImagePostByIDForListerRow
	err := row.Scan(
		&i.Idimagepost,
		&i.ForumthreadID,
		&i.UsersIdusers,
		&i.ImageboardIdimageboard,
		&i.Posted,
		&i.Description,
		&i.Thumbnail,
		&i.Fullimage,
		&i.FileSize,
		&i.Approved,
		&i.DeletedAt,
		&i.LastIndex,
		&i.Username,
		&i.Comments,
	)
	return &i, err
}

const getImagePostInfoByPath = `-- name: GetImagePostInfoByPath :one
SELECT i.idimagepost, i.imageboard_idimageboard, i.users_idusers, i.posted, u.username, b.title
FROM imagepost i
LEFT JOIN users u ON i.users_idusers = u.idusers
LEFT JOIN imageboard b ON i.imageboard_idimageboard = b.idimageboard
WHERE i.fullimage = ? OR i.thumbnail = ?
LIMIT 1
`

type GetImagePostInfoByPathParams struct {
	Fullimage sql.NullString
	Thumbnail sql.NullString
}

type GetImagePostInfoByPathRow struct {
	Idimagepost            int32
	ImageboardIdimageboard int32
	UsersIdusers           int32
	Posted                 sql.NullTime
	Username               sql.NullString
	Title                  sql.NullString
}

func (q *Queries) GetImagePostInfoByPath(ctx context.Context, arg GetImagePostInfoByPathParams) (*GetImagePostInfoByPathRow, error) {
	row := q.db.QueryRowContext(ctx, getImagePostInfoByPath, arg.Fullimage, arg.Thumbnail)
	var i GetImagePostInfoByPathRow
	err := row.Scan(
		&i.Idimagepost,
		&i.ImageboardIdimageboard,
		&i.UsersIdusers,
		&i.Posted,
		&i.Username,
		&i.Title,
	)
	return &i, err
}

const listBoardsByParentIDForLister = `-- name: ListBoardsByParentIDForLister :many
WITH RECURSIVE role_ids(id) AS (
    SELECT DISTINCT ur.role_id FROM user_roles ur WHERE ur.users_idusers = ?
)
SELECT b.idimageboard, b.imageboard_idimageboard, b.title, b.description, b.approval_required
FROM imageboard b
WHERE b.imageboard_idimageboard = ?
  AND b.deleted_at IS NULL
  AND EXISTS (
    SELECT 1 FROM grants g
    WHERE g.section='imagebbs'
      AND (g.item='board' OR g.item IS NULL)
      AND g.action='see'
      AND g.active=1
      AND (g.item_id = b.idimageboard OR g.item_id IS NULL)
      AND (g.user_id = ? OR g.user_id IS NULL)
      AND (g.role_id IS NULL OR g.role_id IN (SELECT id FROM role_ids))
  )
LIMIT ? OFFSET ?
`

type ListBoardsByParentIDForListerParams struct {
	ListerID     int32
	ParentID     int32
	ListerUserID sql.NullInt32
	Limit        int32
	Offset       int32
}

func (q *Queries) ListBoardsByParentIDForLister(ctx context.Context, arg ListBoardsByParentIDForListerParams) ([]*Imageboard, error) {
	rows, err := q.db.QueryContext(ctx, listBoardsByParentIDForLister,
		arg.ListerID,
		arg.ParentID,
		arg.ListerUserID,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Imageboard
	for rows.Next() {
		var i Imageboard
		if err := rows.Scan(
			&i.Idimageboard,
			&i.ImageboardIdimageboard,
			&i.Title,
			&i.Description,
			&i.ApprovalRequired,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listBoardsForLister = `-- name: ListBoardsForLister :many
WITH RECURSIVE role_ids(id) AS (
    SELECT DISTINCT ur.role_id FROM user_roles ur WHERE ur.users_idusers = ?
)
SELECT b.idimageboard, b.imageboard_idimageboard, b.title, b.description, b.approval_required
FROM imageboard b
WHERE b.deleted_at IS NULL AND EXISTS (
    SELECT 1 FROM grants g
    WHERE g.section='imagebbs'
      AND (g.item='board' OR g.item IS NULL)
      AND g.action='see'
      AND g.active=1
      AND (g.item_id = b.idimageboard OR g.item_id IS NULL)
      AND (g.user_id = ? OR g.user_id IS NULL)
      AND (g.role_id IS NULL OR g.role_id IN (SELECT id FROM role_ids))
  )
LIMIT ? OFFSET ?
`

type ListBoardsForListerParams struct {
	ListerID     int32
	ListerUserID sql.NullInt32
	Limit        int32
	Offset       int32
}

func (q *Queries) ListBoardsForLister(ctx context.Context, arg ListBoardsForListerParams) ([]*Imageboard, error) {
	rows, err := q.db.QueryContext(ctx, listBoardsForLister,
		arg.ListerID,
		arg.ListerUserID,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Imageboard
	for rows.Next() {
		var i Imageboard
		if err := rows.Scan(
			&i.Idimageboard,
			&i.ImageboardIdimageboard,
			&i.Title,
			&i.Description,
			&i.ApprovalRequired,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listImagePostsByBoardForLister = `-- name: ListImagePostsByBoardForLister :many
WITH RECURSIVE role_ids(id) AS (
    SELECT DISTINCT ur.role_id FROM user_roles ur WHERE ur.users_idusers = ?
)
SELECT i.idimagepost, i.forumthread_id, i.users_idusers, i.imageboard_idimageboard, i.posted, i.description, i.thumbnail, i.fullimage, i.file_size, i.approved, i.deleted_at, i.last_index, u.username, th.comments
FROM imagepost i
LEFT JOIN users u ON i.users_idusers = u.idusers
LEFT JOIN forumthread th ON i.forumthread_id = th.idforumthread
WHERE i.imageboard_idimageboard = ?
  AND i.approved = 1
  AND i.deleted_at IS NULL
  AND EXISTS (
    SELECT 1 FROM grants g
    WHERE g.section='imagebbs'
      AND g.item='board'
      AND g.action='view'
      AND g.active=1
      AND g.item_id = i.imageboard_idimageboard
      AND (g.user_id = ? OR g.user_id IS NULL)
      AND (g.role_id IS NULL OR g.role_id IN (SELECT id FROM role_ids))
  )
LIMIT ? OFFSET ?
`

type ListImagePostsByBoardForListerParams struct {
	ListerID     int32
	BoardID      int32
	ListerUserID sql.NullInt32
	Limit        int32
	Offset       int32
}

type ListImagePostsByBoardForListerRow struct {
	Idimagepost            int32
	ForumthreadID          int32
	UsersIdusers           int32
	ImageboardIdimageboard int32
	Posted                 sql.NullTime
	Description            sql.NullString
	Thumbnail              sql.NullString
	Fullimage              sql.NullString
	FileSize               int32
	Approved               bool
	DeletedAt              sql.NullTime
	LastIndex              sql.NullTime
	Username               sql.NullString
	Comments               sql.NullInt32
}

func (q *Queries) ListImagePostsByBoardForLister(ctx context.Context, arg ListImagePostsByBoardForListerParams) ([]*ListImagePostsByBoardForListerRow, error) {
	rows, err := q.db.QueryContext(ctx, listImagePostsByBoardForLister,
		arg.ListerID,
		arg.BoardID,
		arg.ListerUserID,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*ListImagePostsByBoardForListerRow
	for rows.Next() {
		var i ListImagePostsByBoardForListerRow
		if err := rows.Scan(
			&i.Idimagepost,
			&i.ForumthreadID,
			&i.UsersIdusers,
			&i.ImageboardIdimageboard,
			&i.Posted,
			&i.Description,
			&i.Thumbnail,
			&i.Fullimage,
			&i.FileSize,
			&i.Approved,
			&i.DeletedAt,
			&i.LastIndex,
			&i.Username,
			&i.Comments,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listImagePostsByPosterForLister = `-- name: ListImagePostsByPosterForLister :many
WITH RECURSIVE role_ids(id) AS (
    SELECT DISTINCT ur.role_id FROM user_roles ur WHERE ur.users_idusers = ?
)
SELECT i.idimagepost, i.forumthread_id, i.users_idusers, i.imageboard_idimageboard, i.posted, i.description, i.thumbnail, i.fullimage, i.file_size, i.approved, i.deleted_at, i.last_index, u.username, th.comments
FROM imagepost i
LEFT JOIN users u ON i.users_idusers = u.idusers
LEFT JOIN forumthread th ON i.forumthread_id = th.idforumthread
WHERE i.users_idusers = ?
  AND i.approved = 1
  AND i.deleted_at IS NULL
  AND EXISTS (
    SELECT 1 FROM grants g
    WHERE g.section='imagebbs'
      AND (g.item='board' OR g.item IS NULL)
      AND g.action='see'
      AND g.active=1
      AND (g.item_id = i.imageboard_idimageboard OR g.item_id IS NULL)
      AND (g.user_id = ? OR g.user_id IS NULL)
      AND (g.role_id IS NULL OR g.role_id IN (SELECT id FROM role_ids))
  )
ORDER BY i.posted DESC
LIMIT ? OFFSET ?
`

type ListImagePostsByPosterForListerParams struct {
	ListerID     int32
	PosterID     int32
	ListerUserID sql.NullInt32
	Limit        int32
	Offset       int32
}

type ListImagePostsByPosterForListerRow struct {
	Idimagepost            int32
	ForumthreadID          int32
	UsersIdusers           int32
	ImageboardIdimageboard int32
	Posted                 sql.NullTime
	Description            sql.NullString
	Thumbnail              sql.NullString
	Fullimage              sql.NullString
	FileSize               int32
	Approved               bool
	DeletedAt              sql.NullTime
	LastIndex              sql.NullTime
	Username               sql.NullString
	Comments               sql.NullInt32
}

func (q *Queries) ListImagePostsByPosterForLister(ctx context.Context, arg ListImagePostsByPosterForListerParams) ([]*ListImagePostsByPosterForListerRow, error) {
	rows, err := q.db.QueryContext(ctx, listImagePostsByPosterForLister,
		arg.ListerID,
		arg.PosterID,
		arg.ListerUserID,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*ListImagePostsByPosterForListerRow
	for rows.Next() {
		var i ListImagePostsByPosterForListerRow
		if err := rows.Scan(
			&i.Idimagepost,
			&i.ForumthreadID,
			&i.UsersIdusers,
			&i.ImageboardIdimageboard,
			&i.Posted,
			&i.Description,
			&i.Thumbnail,
			&i.Fullimage,
			&i.FileSize,
			&i.Approved,
			&i.DeletedAt,
			&i.LastIndex,
			&i.Username,
			&i.Comments,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setImagePostLastIndex = `-- name: SetImagePostLastIndex :exec
UPDATE imagepost SET last_index = NOW() WHERE idimagepost = ?
`

func (q *Queries) SetImagePostLastIndex(ctx context.Context, idimagepost int32) error {
	_, err := q.db.ExecContext(ctx, setImagePostLastIndex, idimagepost)
	return err
}

const systemListBoardsByParentID = `-- name: SystemListBoardsByParentID :many
SELECT b.idimageboard, b.imageboard_idimageboard, b.title, b.description, b.approval_required
FROM imageboard b
WHERE b.imageboard_idimageboard = ?
LIMIT ? OFFSET ?
`

type SystemListBoardsByParentIDParams struct {
	ParentID int32
	Limit    int32
	Offset   int32
}

func (q *Queries) SystemListBoardsByParentID(ctx context.Context, arg SystemListBoardsByParentIDParams) ([]*Imageboard, error) {
	rows, err := q.db.QueryContext(ctx, systemListBoardsByParentID, arg.ParentID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Imageboard
	for rows.Next() {
		var i Imageboard
		if err := rows.Scan(
			&i.Idimageboard,
			&i.ImageboardIdimageboard,
			&i.Title,
			&i.Description,
			&i.ApprovalRequired,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
