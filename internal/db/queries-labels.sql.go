// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries-labels.sql

package db

import (
	"context"
)

const addContentLabelStatus = `-- name: AddContentLabelStatus :exec
INSERT IGNORE INTO content_label_status (
    item, item_id, label
) VALUES (?, ?, ?)
`

type AddContentLabelStatusParams struct {
	Item   string
	ItemID int32
	Label  string
}

func (q *Queries) AddContentLabelStatus(ctx context.Context, arg AddContentLabelStatusParams) error {
	_, err := q.db.ExecContext(ctx, addContentLabelStatus, arg.Item, arg.ItemID, arg.Label)
	return err
}

const addContentPrivateLabel = `-- name: AddContentPrivateLabel :exec
INSERT IGNORE INTO content_private_labels (
    item, item_id, user_id, label, invert
) VALUES (?, ?, ?, ?, ?)
`

type AddContentPrivateLabelParams struct {
	Item   string
	ItemID int32
	UserID int32
	Label  string
	Invert bool
}

func (q *Queries) AddContentPrivateLabel(ctx context.Context, arg AddContentPrivateLabelParams) error {
	_, err := q.db.ExecContext(ctx, addContentPrivateLabel,
		arg.Item,
		arg.ItemID,
		arg.UserID,
		arg.Label,
		arg.Invert,
	)
	return err
}

const addContentPublicLabel = `-- name: AddContentPublicLabel :exec
INSERT IGNORE INTO content_public_labels (
    item, item_id, label
) VALUES (?, ?, ?)
`

type AddContentPublicLabelParams struct {
	Item   string
	ItemID int32
	Label  string
}

func (q *Queries) AddContentPublicLabel(ctx context.Context, arg AddContentPublicLabelParams) error {
	_, err := q.db.ExecContext(ctx, addContentPublicLabel, arg.Item, arg.ItemID, arg.Label)
	return err
}

const clearUnreadContentPrivateLabelExceptUser = `-- name: ClearUnreadContentPrivateLabelExceptUser :exec
DELETE FROM content_private_labels
WHERE item = ? AND item_id = ? AND label = 'unread' AND invert = true AND user_id <> ?
`

type ClearUnreadContentPrivateLabelExceptUserParams struct {
	Item   string
	ItemID int32
	UserID int32
}

func (q *Queries) ClearUnreadContentPrivateLabelExceptUser(ctx context.Context, arg ClearUnreadContentPrivateLabelExceptUserParams) error {
	_, err := q.db.ExecContext(ctx, clearUnreadContentPrivateLabelExceptUser, arg.Item, arg.ItemID, arg.UserID)
	return err
}

const listContentLabelStatus = `-- name: ListContentLabelStatus :many
SELECT item, item_id, label
FROM content_label_status
WHERE item = ? AND item_id = ?
`

type ListContentLabelStatusParams struct {
	Item   string
	ItemID int32
}

type ListContentLabelStatusRow struct {
	Item   string
	ItemID int32
	Label  string
}

func (q *Queries) ListContentLabelStatus(ctx context.Context, arg ListContentLabelStatusParams) ([]*ListContentLabelStatusRow, error) {
	rows, err := q.db.QueryContext(ctx, listContentLabelStatus, arg.Item, arg.ItemID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*ListContentLabelStatusRow
	for rows.Next() {
		var i ListContentLabelStatusRow
		if err := rows.Scan(&i.Item, &i.ItemID, &i.Label); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listContentPrivateLabels = `-- name: ListContentPrivateLabels :many
SELECT item, item_id, user_id, label, invert
FROM content_private_labels
WHERE item = ? AND item_id = ? AND user_id = ?
`

type ListContentPrivateLabelsParams struct {
	Item   string
	ItemID int32
	UserID int32
}

type ListContentPrivateLabelsRow struct {
	Item   string
	ItemID int32
	UserID int32
	Label  string
	Invert bool
}

func (q *Queries) ListContentPrivateLabels(ctx context.Context, arg ListContentPrivateLabelsParams) ([]*ListContentPrivateLabelsRow, error) {
	rows, err := q.db.QueryContext(ctx, listContentPrivateLabels, arg.Item, arg.ItemID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*ListContentPrivateLabelsRow
	for rows.Next() {
		var i ListContentPrivateLabelsRow
		if err := rows.Scan(
			&i.Item,
			&i.ItemID,
			&i.UserID,
			&i.Label,
			&i.Invert,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listContentPublicLabels = `-- name: ListContentPublicLabels :many
SELECT item, item_id, label
FROM content_public_labels
WHERE item = ? AND item_id = ?
`

type ListContentPublicLabelsParams struct {
	Item   string
	ItemID int32
}

type ListContentPublicLabelsRow struct {
	Item   string
	ItemID int32
	Label  string
}

func (q *Queries) ListContentPublicLabels(ctx context.Context, arg ListContentPublicLabelsParams) ([]*ListContentPublicLabelsRow, error) {
	rows, err := q.db.QueryContext(ctx, listContentPublicLabels, arg.Item, arg.ItemID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*ListContentPublicLabelsRow
	for rows.Next() {
		var i ListContentPublicLabelsRow
		if err := rows.Scan(&i.Item, &i.ItemID, &i.Label); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeContentLabelStatus = `-- name: RemoveContentLabelStatus :exec
DELETE FROM content_label_status
WHERE item = ? AND item_id = ? AND label = ?
`

type RemoveContentLabelStatusParams struct {
	Item   string
	ItemID int32
	Label  string
}

func (q *Queries) RemoveContentLabelStatus(ctx context.Context, arg RemoveContentLabelStatusParams) error {
	_, err := q.db.ExecContext(ctx, removeContentLabelStatus, arg.Item, arg.ItemID, arg.Label)
	return err
}

const removeContentPrivateLabel = `-- name: RemoveContentPrivateLabel :exec
DELETE FROM content_private_labels
WHERE item = ? AND item_id = ? AND user_id = ? AND label = ?
`

type RemoveContentPrivateLabelParams struct {
	Item   string
	ItemID int32
	UserID int32
	Label  string
}

func (q *Queries) RemoveContentPrivateLabel(ctx context.Context, arg RemoveContentPrivateLabelParams) error {
	_, err := q.db.ExecContext(ctx, removeContentPrivateLabel,
		arg.Item,
		arg.ItemID,
		arg.UserID,
		arg.Label,
	)
	return err
}

const removeContentPublicLabel = `-- name: RemoveContentPublicLabel :exec
DELETE FROM content_public_labels
WHERE item = ? AND item_id = ? AND label = ?
`

type RemoveContentPublicLabelParams struct {
	Item   string
	ItemID int32
	Label  string
}

func (q *Queries) RemoveContentPublicLabel(ctx context.Context, arg RemoveContentPublicLabelParams) error {
	_, err := q.db.ExecContext(ctx, removeContentPublicLabel, arg.Item, arg.ItemID, arg.Label)
	return err
}

const systemClearContentLabelStatus = `-- name: SystemClearContentLabelStatus :exec
DELETE FROM content_label_status
WHERE item = ? AND item_id = ?
`

type SystemClearContentLabelStatusParams struct {
	Item   string
	ItemID int32
}

func (q *Queries) SystemClearContentLabelStatus(ctx context.Context, arg SystemClearContentLabelStatusParams) error {
	_, err := q.db.ExecContext(ctx, systemClearContentLabelStatus, arg.Item, arg.ItemID)
	return err
}

const systemClearContentPrivateLabel = `-- name: SystemClearContentPrivateLabel :exec
DELETE FROM content_private_labels
WHERE item = ? AND item_id = ? AND label = ?
`

type SystemClearContentPrivateLabelParams struct {
	Item   string
	ItemID int32
	Label  string
}

func (q *Queries) SystemClearContentPrivateLabel(ctx context.Context, arg SystemClearContentPrivateLabelParams) error {
	_, err := q.db.ExecContext(ctx, systemClearContentPrivateLabel, arg.Item, arg.ItemID, arg.Label)
	return err
}
