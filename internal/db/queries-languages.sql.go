// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries-languages.sql

package db

import (
	"context"
	"database/sql"
)

const adminCreateLanguage = `-- name: AdminCreateLanguage :exec
INSERT INTO language (nameof)
VALUES (?)
`

// AdminCreateLanguage adds a new language.
// Parameters:
//
//	? - Name of the new language (string)
func (q *Queries) AdminCreateLanguage(ctx context.Context, nameof sql.NullString) error {
	_, err := q.db.ExecContext(ctx, adminCreateLanguage, nameof)
	return err
}

const adminDeleteLanguage = `-- name: AdminDeleteLanguage :exec
DELETE FROM language
WHERE idlanguage = ?
`

// AdminDeleteLanguage removes a language entry.
// Parameters:
//
//	? - Language ID to be deleted (int)
func (q *Queries) AdminDeleteLanguage(ctx context.Context, idlanguage int32) error {
	_, err := q.db.ExecContext(ctx, adminDeleteLanguage, idlanguage)
	return err
}

const adminInsertLanguage = `-- name: AdminInsertLanguage :execresult
INSERT INTO language (nameof)
VALUES (?)
`

// AdminInsertLanguage adds a new language returning a result.
func (q *Queries) AdminInsertLanguage(ctx context.Context, nameof sql.NullString) (sql.Result, error) {
	return q.db.ExecContext(ctx, adminInsertLanguage, nameof)
}

const adminLanguageUsageCounts = `-- name: AdminLanguageUsageCounts :one
SELECT
    (SELECT COUNT(*) FROM comments WHERE comments.language_idlanguage = ?) AS comments,
    (SELECT COUNT(*) FROM writing WHERE writing.language_idlanguage = ?) AS writings,
    (SELECT COUNT(*) FROM blogs WHERE blogs.language_idlanguage = ?) AS blogs,
    (SELECT COUNT(*) FROM site_news WHERE site_news.language_idlanguage = ?) AS news,
    (SELECT COUNT(*) FROM linker WHERE linker.language_idlanguage = ?) AS links
`

type AdminLanguageUsageCountsParams struct {
	ID sql.NullInt32
}

type AdminLanguageUsageCountsRow struct {
	Comments int64
	Writings int64
	Blogs    int64
	News     int64
	Links    int64
}

// AdminLanguageUsageCounts returns counts of content referencing a language.
func (q *Queries) AdminLanguageUsageCounts(ctx context.Context, arg AdminLanguageUsageCountsParams) (*AdminLanguageUsageCountsRow, error) {
	row := q.db.QueryRowContext(ctx, adminLanguageUsageCounts,
		arg.ID,
		arg.ID,
		arg.ID,
		arg.ID,
		arg.ID,
	)
	var i AdminLanguageUsageCountsRow
	err := row.Scan(
		&i.Comments,
		&i.Writings,
		&i.Blogs,
		&i.News,
		&i.Links,
	)
	return &i, err
}

const adminRenameLanguage = `-- name: AdminRenameLanguage :exec
UPDATE language
SET nameof = ?
WHERE idlanguage = ?
`

type AdminRenameLanguageParams struct {
	Nameof     sql.NullString
	Idlanguage int32
}

// AdminRenameLanguage updates the language name.
// Parameters:
//
//	? - New name for the language (string)
//	? - Language ID to be updated (int)
func (q *Queries) AdminRenameLanguage(ctx context.Context, arg AdminRenameLanguageParams) error {
	_, err := q.db.ExecContext(ctx, adminRenameLanguage, arg.Nameof, arg.Idlanguage)
	return err
}

const systemCountLanguages = `-- name: SystemCountLanguages :one
SELECT COUNT(*) FROM language
`

// SystemCountLanguages counts all languages.
func (q *Queries) SystemCountLanguages(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, systemCountLanguages)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const systemGetLanguageIDByName = `-- name: SystemGetLanguageIDByName :one
SELECT idlanguage FROM language WHERE nameof = ?
`

// SystemGetLanguageIDByName resolves a language ID by name.
func (q *Queries) SystemGetLanguageIDByName(ctx context.Context, nameof sql.NullString) (int32, error) {
	row := q.db.QueryRowContext(ctx, systemGetLanguageIDByName, nameof)
	var idlanguage int32
	err := row.Scan(&idlanguage)
	return idlanguage, err
}

const systemListLanguages = `-- name: SystemListLanguages :many
SELECT idlanguage, nameof
FROM language
`

// SystemListLanguages lists all languages.
func (q *Queries) SystemListLanguages(ctx context.Context) ([]*Language, error) {
	rows, err := q.db.QueryContext(ctx, systemListLanguages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Language
	for rows.Next() {
		var i Language
		if err := rows.Scan(&i.Idlanguage, &i.Nameof); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
