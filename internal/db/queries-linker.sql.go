// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries-linker.sql

package db

import (
	"context"
	"database/sql"
	"strings"
)

const assignLinkerThisThreadId = `-- name: AssignLinkerThisThreadId :exec
UPDATE linker SET forumthread_id = ? WHERE idlinker = ?
`

type AssignLinkerThisThreadIdParams struct {
	ForumthreadID int32
	Idlinker      int32
}

func (q *Queries) AssignLinkerThisThreadId(ctx context.Context, arg AssignLinkerThisThreadIdParams) error {
	_, err := q.db.ExecContext(ctx, assignLinkerThisThreadId, arg.ForumthreadID, arg.Idlinker)
	return err
}

const countLinksByCategory = `-- name: CountLinksByCategory :one
SELECT COUNT(*) FROM linker WHERE linker_category_id = ?
`

func (q *Queries) CountLinksByCategory(ctx context.Context, linkerCategoryID int32) (int64, error) {
	row := q.db.QueryRowContext(ctx, countLinksByCategory, linkerCategoryID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createLinkerCategory = `-- name: CreateLinkerCategory :exec
INSERT INTO linker_category (title, position) VALUES (?, ?)
`

type CreateLinkerCategoryParams struct {
	Title    sql.NullString
	Position int32
}

func (q *Queries) CreateLinkerCategory(ctx context.Context, arg CreateLinkerCategoryParams) error {
	_, err := q.db.ExecContext(ctx, createLinkerCategory, arg.Title, arg.Position)
	return err
}

const createLinkerItem = `-- name: CreateLinkerItem :exec
INSERT INTO linker (users_idusers, linker_category_id, title, url, description, listed)
VALUES (?, ?, ?, ?, ?, NOW())
`

type CreateLinkerItemParams struct {
	UsersIdusers     int32
	LinkerCategoryID int32
	Title            sql.NullString
	Url              sql.NullString
	Description      sql.NullString
}

func (q *Queries) CreateLinkerItem(ctx context.Context, arg CreateLinkerItemParams) error {
	_, err := q.db.ExecContext(ctx, createLinkerItem,
		arg.UsersIdusers,
		arg.LinkerCategoryID,
		arg.Title,
		arg.Url,
		arg.Description,
	)
	return err
}

const createLinkerQueuedItem = `-- name: CreateLinkerQueuedItem :exec
INSERT INTO linker_queue (users_idusers, linker_category_id, title, url, description) VALUES (?, ?, ?, ?, ?)
`

type CreateLinkerQueuedItemParams struct {
	UsersIdusers     int32
	LinkerCategoryID int32
	Title            sql.NullString
	Url              sql.NullString
	Description      sql.NullString
}

func (q *Queries) CreateLinkerQueuedItem(ctx context.Context, arg CreateLinkerQueuedItemParams) error {
	_, err := q.db.ExecContext(ctx, createLinkerQueuedItem,
		arg.UsersIdusers,
		arg.LinkerCategoryID,
		arg.Title,
		arg.Url,
		arg.Description,
	)
	return err
}

const deleteLinkerCategory = `-- name: DeleteLinkerCategory :exec
DELETE FROM linker_category WHERE idlinkerCategory = ?
`

func (q *Queries) DeleteLinkerCategory(ctx context.Context, idlinkercategory int32) error {
	_, err := q.db.ExecContext(ctx, deleteLinkerCategory, idlinkercategory)
	return err
}

const deleteLinkerQueuedItem = `-- name: DeleteLinkerQueuedItem :exec
DELETE FROM linker_queue WHERE idlinkerQueue = ?
`

func (q *Queries) DeleteLinkerQueuedItem(ctx context.Context, idlinkerqueue int32) error {
	_, err := q.db.ExecContext(ctx, deleteLinkerQueuedItem, idlinkerqueue)
	return err
}

const getAllLinkerCategories = `-- name: GetAllLinkerCategories :many
SELECT
    lc.idlinkerCategory,
    lc.position,
    lc.title,
    lc.sortorder
FROM linker_category lc
ORDER BY lc.position
`

func (q *Queries) GetAllLinkerCategories(ctx context.Context) ([]*LinkerCategory, error) {
	rows, err := q.db.QueryContext(ctx, getAllLinkerCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*LinkerCategory
	for rows.Next() {
		var i LinkerCategory
		if err := rows.Scan(
			&i.Idlinkercategory,
			&i.Position,
			&i.Title,
			&i.Sortorder,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllLinkerCategoriesForUser = `-- name: GetAllLinkerCategoriesForUser :many
WITH RECURSIVE role_ids(id) AS (
    SELECT ur.role_id FROM user_roles ur WHERE ur.users_idusers = ?
    UNION
    SELECT r2.id
    FROM role_ids ri
    JOIN grants g ON g.role_id = ri.id AND g.section = 'role' AND g.active = 1
    JOIN roles r2 ON r2.name = g.action
)
SELECT
    lc.idlinkerCategory,
    lc.position,
    lc.title,
    lc.sortorder
FROM linker_category lc
WHERE EXISTS (
    SELECT 1 FROM grants g
    WHERE g.section='linker'
      AND g.item='category'
      AND g.action='see'
      AND g.active=1
      AND g.item_id = lc.idlinkerCategory
      AND (g.user_id = ? OR g.user_id IS NULL)
      AND (g.role_id IS NULL OR g.role_id IN (SELECT id FROM role_ids))
)
ORDER BY lc.position
`

type GetAllLinkerCategoriesForUserParams struct {
	ViewerID     int32
	ViewerUserID sql.NullInt32
}

func (q *Queries) GetAllLinkerCategoriesForUser(ctx context.Context, arg GetAllLinkerCategoriesForUserParams) ([]*LinkerCategory, error) {
	rows, err := q.db.QueryContext(ctx, getAllLinkerCategoriesForUser, arg.ViewerID, arg.ViewerUserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*LinkerCategory
	for rows.Next() {
		var i LinkerCategory
		if err := rows.Scan(
			&i.Idlinkercategory,
			&i.Position,
			&i.Title,
			&i.Sortorder,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllLinkerCategoriesWithSortOrder = `-- name: GetAllLinkerCategoriesWithSortOrder :many
SELECT
    idlinkerCategory,
    position,
    title,
    sortorder
FROM linker_category
ORDER BY sortorder
`

func (q *Queries) GetAllLinkerCategoriesWithSortOrder(ctx context.Context) ([]*LinkerCategory, error) {
	rows, err := q.db.QueryContext(ctx, getAllLinkerCategoriesWithSortOrder)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*LinkerCategory
	for rows.Next() {
		var i LinkerCategory
		if err := rows.Scan(
			&i.Idlinkercategory,
			&i.Position,
			&i.Title,
			&i.Sortorder,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllLinkerItemsByCategoryIdWitherPosterUsernameAndCategoryTitleDescending = `-- name: GetAllLinkerItemsByCategoryIdWitherPosterUsernameAndCategoryTitleDescending :many
SELECT l.idlinker, l.language_idlanguage, l.users_idusers, l.linker_category_id, l.forumthread_id, l.title, l.url, l.description, l.listed, th.Comments, lc.title as Category_Title, u.Username as PosterUsername
FROM linker l
LEFT JOIN users u ON l.users_idusers = u.idusers
LEFT JOIN linker_category lc ON l.linker_category_id = lc.idlinkerCategory
LEFT JOIN forumthread th ON l.forumthread_id = th.idforumthread
WHERE (lc.idlinkerCategory = ? OR ? = 0)
ORDER BY l.listed DESC
`

type GetAllLinkerItemsByCategoryIdWitherPosterUsernameAndCategoryTitleDescendingParams struct {
	Idlinkercategory int32
}

type GetAllLinkerItemsByCategoryIdWitherPosterUsernameAndCategoryTitleDescendingRow struct {
	Idlinker           int32
	LanguageIdlanguage int32
	UsersIdusers       int32
	LinkerCategoryID   int32
	ForumthreadID      int32
	Title              sql.NullString
	Url                sql.NullString
	Description        sql.NullString
	Listed             sql.NullTime
	Comments           sql.NullInt32
	CategoryTitle      sql.NullString
	Posterusername     sql.NullString
}

func (q *Queries) GetAllLinkerItemsByCategoryIdWitherPosterUsernameAndCategoryTitleDescending(ctx context.Context, arg GetAllLinkerItemsByCategoryIdWitherPosterUsernameAndCategoryTitleDescendingParams) ([]*GetAllLinkerItemsByCategoryIdWitherPosterUsernameAndCategoryTitleDescendingRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllLinkerItemsByCategoryIdWitherPosterUsernameAndCategoryTitleDescending, arg.Idlinkercategory, arg.Idlinkercategory)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetAllLinkerItemsByCategoryIdWitherPosterUsernameAndCategoryTitleDescendingRow
	for rows.Next() {
		var i GetAllLinkerItemsByCategoryIdWitherPosterUsernameAndCategoryTitleDescendingRow
		if err := rows.Scan(
			&i.Idlinker,
			&i.LanguageIdlanguage,
			&i.UsersIdusers,
			&i.LinkerCategoryID,
			&i.ForumthreadID,
			&i.Title,
			&i.Url,
			&i.Description,
			&i.Listed,
			&i.Comments,
			&i.CategoryTitle,
			&i.Posterusername,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllLinkerItemsByCategoryIdWitherPosterUsernameAndCategoryTitleDescendingForUser = `-- name: GetAllLinkerItemsByCategoryIdWitherPosterUsernameAndCategoryTitleDescendingForUser :many
WITH RECURSIVE role_ids(id) AS (
    SELECT ur.role_id FROM user_roles ur WHERE ur.users_idusers = ?
    UNION
    SELECT r2.id
    FROM role_ids ri
    JOIN grants g ON g.role_id = ri.id AND g.section = 'role' AND g.active = 1
    JOIN roles r2 ON r2.name = g.action
)
SELECT l.idlinker, l.language_idlanguage, l.users_idusers, l.linker_category_id, l.forumthread_id, l.title, l.url, l.description, l.listed, th.Comments, lc.title as Category_Title, u.Username as PosterUsername
FROM linker l
LEFT JOIN users u ON l.users_idusers = u.idusers
LEFT JOIN linker_category lc ON l.linker_category_id = lc.idlinkerCategory
LEFT JOIN forumthread th ON l.forumthread_id = th.idforumthread
WHERE (lc.idlinkerCategory = ? OR ? = 0)
  AND EXISTS (
    SELECT 1 FROM grants g
    WHERE g.section='linker'
      AND g.item='link'
      AND g.action='see'
      AND g.active=1
      AND g.item_id = l.idlinker
      AND (g.user_id = ? OR g.user_id IS NULL)
      AND (g.role_id IS NULL OR g.role_id IN (SELECT id FROM role_ids))
  )
ORDER BY l.listed DESC
`

type GetAllLinkerItemsByCategoryIdWitherPosterUsernameAndCategoryTitleDescendingForUserParams struct {
	ViewerID         int32
	Idlinkercategory int32
	ViewerUserID     sql.NullInt32
}

type GetAllLinkerItemsByCategoryIdWitherPosterUsernameAndCategoryTitleDescendingForUserRow struct {
	Idlinker           int32
	LanguageIdlanguage int32
	UsersIdusers       int32
	LinkerCategoryID   int32
	ForumthreadID      int32
	Title              sql.NullString
	Url                sql.NullString
	Description        sql.NullString
	Listed             sql.NullTime
	Comments           sql.NullInt32
	CategoryTitle      sql.NullString
	Posterusername     sql.NullString
}

func (q *Queries) GetAllLinkerItemsByCategoryIdWitherPosterUsernameAndCategoryTitleDescendingForUser(ctx context.Context, arg GetAllLinkerItemsByCategoryIdWitherPosterUsernameAndCategoryTitleDescendingForUserParams) ([]*GetAllLinkerItemsByCategoryIdWitherPosterUsernameAndCategoryTitleDescendingForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllLinkerItemsByCategoryIdWitherPosterUsernameAndCategoryTitleDescendingForUser,
		arg.ViewerID,
		arg.Idlinkercategory,
		arg.Idlinkercategory,
		arg.ViewerUserID,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetAllLinkerItemsByCategoryIdWitherPosterUsernameAndCategoryTitleDescendingForUserRow
	for rows.Next() {
		var i GetAllLinkerItemsByCategoryIdWitherPosterUsernameAndCategoryTitleDescendingForUserRow
		if err := rows.Scan(
			&i.Idlinker,
			&i.LanguageIdlanguage,
			&i.UsersIdusers,
			&i.LinkerCategoryID,
			&i.ForumthreadID,
			&i.Title,
			&i.Url,
			&i.Description,
			&i.Listed,
			&i.Comments,
			&i.CategoryTitle,
			&i.Posterusername,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllLinkerItemsByCategoryIdWitherPosterUsernameAndCategoryTitleDescendingForUserPaginated = `-- name: GetAllLinkerItemsByCategoryIdWitherPosterUsernameAndCategoryTitleDescendingForUserPaginated :many
WITH RECURSIVE role_ids(id) AS (
    SELECT ur.role_id FROM user_roles ur WHERE ur.users_idusers = ?
    UNION
    SELECT r2.id
    FROM role_ids ri
    JOIN grants g ON g.role_id = ri.id AND g.section = 'role' AND g.active = 1
    JOIN roles r2 ON r2.name = g.action
)
SELECT l.idlinker, l.language_idlanguage, l.users_idusers, l.linker_category_id, l.forumthread_id, l.title, l.url, l.description, l.listed, th.Comments, lc.title as Category_Title, u.Username as PosterUsername
FROM linker l
LEFT JOIN users u ON l.users_idusers = u.idusers
LEFT JOIN linker_category lc ON l.linker_category_id = lc.idlinkerCategory
LEFT JOIN forumthread th ON l.forumthread_id = th.idforumthread
WHERE (lc.idlinkerCategory = ? OR ? = 0)
  AND EXISTS (
    SELECT 1 FROM grants g
    WHERE g.section='linker'
      AND g.item='link'
      AND g.action='see'
      AND g.active=1
      AND g.item_id = l.idlinker
      AND (g.user_id = ? OR g.user_id IS NULL)
      AND (g.role_id IS NULL OR g.role_id IN (SELECT id FROM role_ids))
  )
ORDER BY l.listed DESC
LIMIT ? OFFSET ?
`

type GetAllLinkerItemsByCategoryIdWitherPosterUsernameAndCategoryTitleDescendingForUserPaginatedParams struct {
	ViewerID         int32
	Idlinkercategory int32
	ViewerUserID     sql.NullInt32
	Limit            int32
	Offset           int32
}

type GetAllLinkerItemsByCategoryIdWitherPosterUsernameAndCategoryTitleDescendingForUserPaginatedRow struct {
	Idlinker           int32
	LanguageIdlanguage int32
	UsersIdusers       int32
	LinkerCategoryID   int32
	ForumthreadID      int32
	Title              sql.NullString
	Url                sql.NullString
	Description        sql.NullString
	Listed             sql.NullTime
	Comments           sql.NullInt32
	CategoryTitle      sql.NullString
	Posterusername     sql.NullString
}

func (q *Queries) GetAllLinkerItemsByCategoryIdWitherPosterUsernameAndCategoryTitleDescendingForUserPaginated(ctx context.Context, arg GetAllLinkerItemsByCategoryIdWitherPosterUsernameAndCategoryTitleDescendingForUserPaginatedParams) ([]*GetAllLinkerItemsByCategoryIdWitherPosterUsernameAndCategoryTitleDescendingForUserPaginatedRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllLinkerItemsByCategoryIdWitherPosterUsernameAndCategoryTitleDescendingForUserPaginated,
		arg.ViewerID,
		arg.Idlinkercategory,
		arg.Idlinkercategory,
		arg.ViewerUserID,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetAllLinkerItemsByCategoryIdWitherPosterUsernameAndCategoryTitleDescendingForUserPaginatedRow
	for rows.Next() {
		var i GetAllLinkerItemsByCategoryIdWitherPosterUsernameAndCategoryTitleDescendingForUserPaginatedRow
		if err := rows.Scan(
			&i.Idlinker,
			&i.LanguageIdlanguage,
			&i.UsersIdusers,
			&i.LinkerCategoryID,
			&i.ForumthreadID,
			&i.Title,
			&i.Url,
			&i.Description,
			&i.Listed,
			&i.Comments,
			&i.CategoryTitle,
			&i.Posterusername,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllLinkerItemsByCategoryIdWitherPosterUsernameAndCategoryTitleDescendingForUserPaginatedRow = `-- name: GetAllLinkerItemsByCategoryIdWitherPosterUsernameAndCategoryTitleDescendingForUserPaginatedRow :many
WITH RECURSIVE role_ids(id) AS (
    SELECT ur.role_id FROM user_roles ur WHERE ur.users_idusers = ?
    UNION
    SELECT r2.id
    FROM role_ids ri
    JOIN grants g ON g.role_id = ri.id AND g.section = 'role' AND g.active = 1
    JOIN roles r2 ON r2.name = g.action
)
SELECT l.idlinker, l.language_idlanguage, l.users_idusers, l.linker_category_id, l.forumthread_id, l.title, l.url, l.description, l.listed, th.Comments, lc.title as Category_Title, u.Username as PosterUsername
FROM linker l
LEFT JOIN users u ON l.users_idusers = u.idusers
LEFT JOIN linker_category lc ON l.linker_category_id = lc.idlinkerCategory
LEFT JOIN forumthread th ON l.forumthread_id = th.idforumthread
WHERE (lc.idlinkerCategory = ? OR ? = 0)
  AND EXISTS (
    SELECT 1 FROM grants g
    WHERE g.section='linker'
      AND g.item='link'
      AND g.action='see'
      AND g.active=1
      AND g.item_id = l.idlinker
      AND (g.user_id = ? OR g.user_id IS NULL)
      AND (g.role_id IS NULL OR g.role_id IN (SELECT id FROM role_ids))
  )
ORDER BY l.listed DESC
LIMIT ? OFFSET ?
`

type GetAllLinkerItemsByCategoryIdWitherPosterUsernameAndCategoryTitleDescendingForUserPaginatedRowParams struct {
	ViewerID         int32
	Idlinkercategory int32
	ViewerUserID     sql.NullInt32
	Limit            int32
	Offset           int32
}

type GetAllLinkerItemsByCategoryIdWitherPosterUsernameAndCategoryTitleDescendingForUserPaginatedRowRow struct {
	Idlinker           int32
	LanguageIdlanguage int32
	UsersIdusers       int32
	LinkerCategoryID   int32
	ForumthreadID      int32
	Title              sql.NullString
	Url                sql.NullString
	Description        sql.NullString
	Listed             sql.NullTime
	Comments           sql.NullInt32
	CategoryTitle      sql.NullString
	Posterusername     sql.NullString
}

func (q *Queries) GetAllLinkerItemsByCategoryIdWitherPosterUsernameAndCategoryTitleDescendingForUserPaginatedRow(ctx context.Context, arg GetAllLinkerItemsByCategoryIdWitherPosterUsernameAndCategoryTitleDescendingForUserPaginatedRowParams) ([]*GetAllLinkerItemsByCategoryIdWitherPosterUsernameAndCategoryTitleDescendingForUserPaginatedRowRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllLinkerItemsByCategoryIdWitherPosterUsernameAndCategoryTitleDescendingForUserPaginatedRow,
		arg.ViewerID,
		arg.Idlinkercategory,
		arg.Idlinkercategory,
		arg.ViewerUserID,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetAllLinkerItemsByCategoryIdWitherPosterUsernameAndCategoryTitleDescendingForUserPaginatedRowRow
	for rows.Next() {
		var i GetAllLinkerItemsByCategoryIdWitherPosterUsernameAndCategoryTitleDescendingForUserPaginatedRowRow
		if err := rows.Scan(
			&i.Idlinker,
			&i.LanguageIdlanguage,
			&i.UsersIdusers,
			&i.LinkerCategoryID,
			&i.ForumthreadID,
			&i.Title,
			&i.Url,
			&i.Description,
			&i.Listed,
			&i.Comments,
			&i.CategoryTitle,
			&i.Posterusername,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllLinkerItemsByCategoryIdWitherPosterUsernameAndCategoryTitleDescendingPaginated = `-- name: GetAllLinkerItemsByCategoryIdWitherPosterUsernameAndCategoryTitleDescendingPaginated :many
SELECT l.idlinker, l.language_idlanguage, l.users_idusers, l.linker_category_id, l.forumthread_id, l.title, l.url, l.description, l.listed, th.Comments, lc.title as Category_Title, u.Username as PosterUsername
FROM linker l
LEFT JOIN users u ON l.users_idusers = u.idusers
LEFT JOIN linker_category lc ON l.linker_category_id = lc.idlinkerCategory
LEFT JOIN forumthread th ON l.forumthread_id = th.idforumthread
WHERE (lc.idlinkerCategory = ? OR ? = 0)
ORDER BY l.listed DESC
LIMIT ? OFFSET ?
`

type GetAllLinkerItemsByCategoryIdWitherPosterUsernameAndCategoryTitleDescendingPaginatedParams struct {
	Idlinkercategory int32
	Limit            int32
	Offset           int32
}

type GetAllLinkerItemsByCategoryIdWitherPosterUsernameAndCategoryTitleDescendingPaginatedRow struct {
	Idlinker           int32
	LanguageIdlanguage int32
	UsersIdusers       int32
	LinkerCategoryID   int32
	ForumthreadID      int32
	Title              sql.NullString
	Url                sql.NullString
	Description        sql.NullString
	Listed             sql.NullTime
	Comments           sql.NullInt32
	CategoryTitle      sql.NullString
	Posterusername     sql.NullString
}

func (q *Queries) GetAllLinkerItemsByCategoryIdWitherPosterUsernameAndCategoryTitleDescendingPaginated(ctx context.Context, arg GetAllLinkerItemsByCategoryIdWitherPosterUsernameAndCategoryTitleDescendingPaginatedParams) ([]*GetAllLinkerItemsByCategoryIdWitherPosterUsernameAndCategoryTitleDescendingPaginatedRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllLinkerItemsByCategoryIdWitherPosterUsernameAndCategoryTitleDescendingPaginated,
		arg.Idlinkercategory,
		arg.Idlinkercategory,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetAllLinkerItemsByCategoryIdWitherPosterUsernameAndCategoryTitleDescendingPaginatedRow
	for rows.Next() {
		var i GetAllLinkerItemsByCategoryIdWitherPosterUsernameAndCategoryTitleDescendingPaginatedRow
		if err := rows.Scan(
			&i.Idlinker,
			&i.LanguageIdlanguage,
			&i.UsersIdusers,
			&i.LinkerCategoryID,
			&i.ForumthreadID,
			&i.Title,
			&i.Url,
			&i.Description,
			&i.Listed,
			&i.Comments,
			&i.CategoryTitle,
			&i.Posterusername,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllLinkerQueuedItemsWithUserAndLinkerCategoryDetails = `-- name: GetAllLinkerQueuedItemsWithUserAndLinkerCategoryDetails :many
SELECT l.idlinkerqueue, l.language_idlanguage, l.users_idusers, l.linker_category_id, l.title, l.url, l.description, u.username, c.title as category_title, c.idlinkerCategory
FROM linker_queue l
JOIN users u ON l.users_idusers = u.idusers
JOIN linker_category c ON l.linker_category_id = c.idlinkerCategory
`

type GetAllLinkerQueuedItemsWithUserAndLinkerCategoryDetailsRow struct {
	Idlinkerqueue      int32
	LanguageIdlanguage int32
	UsersIdusers       int32
	LinkerCategoryID   int32
	Title              sql.NullString
	Url                sql.NullString
	Description        sql.NullString
	Username           sql.NullString
	CategoryTitle      sql.NullString
	Idlinkercategory   int32
}

func (q *Queries) GetAllLinkerQueuedItemsWithUserAndLinkerCategoryDetails(ctx context.Context) ([]*GetAllLinkerQueuedItemsWithUserAndLinkerCategoryDetailsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllLinkerQueuedItemsWithUserAndLinkerCategoryDetails)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetAllLinkerQueuedItemsWithUserAndLinkerCategoryDetailsRow
	for rows.Next() {
		var i GetAllLinkerQueuedItemsWithUserAndLinkerCategoryDetailsRow
		if err := rows.Scan(
			&i.Idlinkerqueue,
			&i.LanguageIdlanguage,
			&i.UsersIdusers,
			&i.LinkerCategoryID,
			&i.Title,
			&i.Url,
			&i.Description,
			&i.Username,
			&i.CategoryTitle,
			&i.Idlinkercategory,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLinkerCategoriesWithCount = `-- name: GetLinkerCategoriesWithCount :many
SELECT c.idlinkerCategory, c.title, c.sortorder, COUNT(l.idlinker) AS linkcount
FROM linker_category c
LEFT JOIN linker l ON l.linker_category_id = c.idlinkerCategory
GROUP BY c.idlinkerCategory
ORDER BY c.sortorder
`

type GetLinkerCategoriesWithCountRow struct {
	Idlinkercategory int32
	Title            sql.NullString
	Sortorder        int32
	Linkcount        int64
}

func (q *Queries) GetLinkerCategoriesWithCount(ctx context.Context) ([]*GetLinkerCategoriesWithCountRow, error) {
	rows, err := q.db.QueryContext(ctx, getLinkerCategoriesWithCount)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetLinkerCategoriesWithCountRow
	for rows.Next() {
		var i GetLinkerCategoriesWithCountRow
		if err := rows.Scan(
			&i.Idlinkercategory,
			&i.Title,
			&i.Sortorder,
			&i.Linkcount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLinkerCategoryLinkCounts = `-- name: GetLinkerCategoryLinkCounts :many
SELECT c.idlinkerCategory, c.title, c.position, COUNT(l.idlinker) as LinkCount
FROM linker_category c
LEFT JOIN linker l ON c.idlinkerCategory = l.linker_category_id
GROUP BY c.idlinkerCategory
ORDER BY c.position
`

type GetLinkerCategoryLinkCountsRow struct {
	Idlinkercategory int32
	Title            sql.NullString
	Position         int32
	Linkcount        int64
}

func (q *Queries) GetLinkerCategoryLinkCounts(ctx context.Context) ([]*GetLinkerCategoryLinkCountsRow, error) {
	rows, err := q.db.QueryContext(ctx, getLinkerCategoryLinkCounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetLinkerCategoryLinkCountsRow
	for rows.Next() {
		var i GetLinkerCategoryLinkCountsRow
		if err := rows.Scan(
			&i.Idlinkercategory,
			&i.Title,
			&i.Position,
			&i.Linkcount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLinkerItemByIdWithPosterUsernameAndCategoryTitleDescending = `-- name: GetLinkerItemByIdWithPosterUsernameAndCategoryTitleDescending :one
SELECT l.idlinker, l.language_idlanguage, l.users_idusers, l.linker_category_id, l.forumthread_id, l.title, l.url, l.description, l.listed, u.username, lc.title
FROM linker l
JOIN users u ON l.users_idusers = u.idusers
JOIN linker_category lc ON l.linker_category_id = lc.idlinkerCategory
WHERE l.idlinker = ?
`

type GetLinkerItemByIdWithPosterUsernameAndCategoryTitleDescendingRow struct {
	Idlinker           int32
	LanguageIdlanguage int32
	UsersIdusers       int32
	LinkerCategoryID   int32
	ForumthreadID      int32
	Title              sql.NullString
	Url                sql.NullString
	Description        sql.NullString
	Listed             sql.NullTime
	Username           sql.NullString
	Title_2            sql.NullString
}

func (q *Queries) GetLinkerItemByIdWithPosterUsernameAndCategoryTitleDescending(ctx context.Context, idlinker int32) (*GetLinkerItemByIdWithPosterUsernameAndCategoryTitleDescendingRow, error) {
	row := q.db.QueryRowContext(ctx, getLinkerItemByIdWithPosterUsernameAndCategoryTitleDescending, idlinker)
	var i GetLinkerItemByIdWithPosterUsernameAndCategoryTitleDescendingRow
	err := row.Scan(
		&i.Idlinker,
		&i.LanguageIdlanguage,
		&i.UsersIdusers,
		&i.LinkerCategoryID,
		&i.ForumthreadID,
		&i.Title,
		&i.Url,
		&i.Description,
		&i.Listed,
		&i.Username,
		&i.Title_2,
	)
	return &i, err
}

const getLinkerItemByIdWithPosterUsernameAndCategoryTitleDescendingForUser = `-- name: GetLinkerItemByIdWithPosterUsernameAndCategoryTitleDescendingForUser :one
WITH RECURSIVE role_ids(id) AS (
    SELECT ur.role_id FROM user_roles ur WHERE ur.users_idusers = ?
    UNION
    SELECT r2.id
    FROM role_ids ri
    JOIN grants g ON g.role_id = ri.id AND g.section = 'role' AND g.active = 1
    JOIN roles r2 ON r2.name = g.action
)
SELECT l.idlinker, l.language_idlanguage, l.users_idusers, l.linker_category_id, l.forumthread_id, l.title, l.url, l.description, l.listed, u.username, lc.title
FROM linker l
JOIN users u ON l.users_idusers = u.idusers
JOIN linker_category lc ON l.linker_category_id = lc.idlinkerCategory
WHERE l.idlinker = ?
  AND EXISTS (
    SELECT 1 FROM grants g
    WHERE g.section='linker'
      AND g.item='link'
      AND g.action IN ('view','comment','reply')
      AND g.active=1
      AND g.item_id = l.idlinker
      AND (g.user_id = ? OR g.user_id IS NULL)
      AND (g.role_id IS NULL OR g.role_id IN (SELECT id FROM role_ids))
  )
LIMIT 1
`

type GetLinkerItemByIdWithPosterUsernameAndCategoryTitleDescendingForUserParams struct {
	ViewerID     int32
	Idlinker     int32
	ViewerUserID sql.NullInt32
}

type GetLinkerItemByIdWithPosterUsernameAndCategoryTitleDescendingForUserRow struct {
	Idlinker           int32
	LanguageIdlanguage int32
	UsersIdusers       int32
	LinkerCategoryID   int32
	ForumthreadID      int32
	Title              sql.NullString
	Url                sql.NullString
	Description        sql.NullString
	Listed             sql.NullTime
	Username           sql.NullString
	Title_2            sql.NullString
}

func (q *Queries) GetLinkerItemByIdWithPosterUsernameAndCategoryTitleDescendingForUser(ctx context.Context, arg GetLinkerItemByIdWithPosterUsernameAndCategoryTitleDescendingForUserParams) (*GetLinkerItemByIdWithPosterUsernameAndCategoryTitleDescendingForUserRow, error) {
	row := q.db.QueryRowContext(ctx, getLinkerItemByIdWithPosterUsernameAndCategoryTitleDescendingForUser, arg.ViewerID, arg.Idlinker, arg.ViewerUserID)
	var i GetLinkerItemByIdWithPosterUsernameAndCategoryTitleDescendingForUserRow
	err := row.Scan(
		&i.Idlinker,
		&i.LanguageIdlanguage,
		&i.UsersIdusers,
		&i.LinkerCategoryID,
		&i.ForumthreadID,
		&i.Title,
		&i.Url,
		&i.Description,
		&i.Listed,
		&i.Username,
		&i.Title_2,
	)
	return &i, err
}

const getLinkerItemsByIdsWithPosterUsernameAndCategoryTitleDescending = `-- name: GetLinkerItemsByIdsWithPosterUsernameAndCategoryTitleDescending :many
SELECT l.idlinker, l.language_idlanguage, l.users_idusers, l.linker_category_id, l.forumthread_id, l.title, l.url, l.description, l.listed, u.username, lc.title
FROM linker l
JOIN users u ON l.users_idusers = u.idusers
JOIN linker_category lc ON l.linker_category_id = lc.idlinkerCategory
WHERE l.idlinker IN (/*SLICE:linkerids*/?)
`

type GetLinkerItemsByIdsWithPosterUsernameAndCategoryTitleDescendingRow struct {
	Idlinker           int32
	LanguageIdlanguage int32
	UsersIdusers       int32
	LinkerCategoryID   int32
	ForumthreadID      int32
	Title              sql.NullString
	Url                sql.NullString
	Description        sql.NullString
	Listed             sql.NullTime
	Username           sql.NullString
	Title_2            sql.NullString
}

func (q *Queries) GetLinkerItemsByIdsWithPosterUsernameAndCategoryTitleDescending(ctx context.Context, linkerids []int32) ([]*GetLinkerItemsByIdsWithPosterUsernameAndCategoryTitleDescendingRow, error) {
	query := getLinkerItemsByIdsWithPosterUsernameAndCategoryTitleDescending
	var queryParams []interface{}
	if len(linkerids) > 0 {
		for _, v := range linkerids {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:linkerids*/?", strings.Repeat(",?", len(linkerids))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:linkerids*/?", "NULL", 1)
	}
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetLinkerItemsByIdsWithPosterUsernameAndCategoryTitleDescendingRow
	for rows.Next() {
		var i GetLinkerItemsByIdsWithPosterUsernameAndCategoryTitleDescendingRow
		if err := rows.Scan(
			&i.Idlinker,
			&i.LanguageIdlanguage,
			&i.UsersIdusers,
			&i.LinkerCategoryID,
			&i.ForumthreadID,
			&i.Title,
			&i.Url,
			&i.Description,
			&i.Listed,
			&i.Username,
			&i.Title_2,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLinkerItemsByIdsWithPosterUsernameAndCategoryTitleDescendingForUser = `-- name: GetLinkerItemsByIdsWithPosterUsernameAndCategoryTitleDescendingForUser :many
WITH RECURSIVE role_ids(id) AS (
    SELECT ur.role_id FROM user_roles ur WHERE ur.users_idusers = ?
    UNION
    SELECT r2.id
    FROM role_ids ri
    JOIN grants g ON g.role_id = ri.id AND g.section = 'role' AND g.active = 1
    JOIN roles r2 ON r2.name = g.action
)
SELECT l.idlinker, l.language_idlanguage, l.users_idusers, l.linker_category_id, l.forumthread_id, l.title, l.url, l.description, l.listed, u.username, lc.title
FROM linker l
JOIN users u ON l.users_idusers = u.idusers
JOIN linker_category lc ON l.linker_category_id = lc.idlinkerCategory
WHERE l.idlinker IN (/*SLICE:linkerids*/?)
  AND EXISTS (
    SELECT 1 FROM grants g
    WHERE g.section='linker'
      AND g.item='link'
      AND g.action='view'
      AND g.active=1
      AND g.item_id = l.idlinker
      AND (g.user_id = ? OR g.user_id IS NULL)
      AND (g.role_id IS NULL OR g.role_id IN (SELECT id FROM role_ids))
  )
`

type GetLinkerItemsByIdsWithPosterUsernameAndCategoryTitleDescendingForUserParams struct {
	ViewerID     int32
	Linkerids    []int32
	ViewerUserID sql.NullInt32
}

type GetLinkerItemsByIdsWithPosterUsernameAndCategoryTitleDescendingForUserRow struct {
	Idlinker           int32
	LanguageIdlanguage int32
	UsersIdusers       int32
	LinkerCategoryID   int32
	ForumthreadID      int32
	Title              sql.NullString
	Url                sql.NullString
	Description        sql.NullString
	Listed             sql.NullTime
	Username           sql.NullString
	Title_2            sql.NullString
}

func (q *Queries) GetLinkerItemsByIdsWithPosterUsernameAndCategoryTitleDescendingForUser(ctx context.Context, arg GetLinkerItemsByIdsWithPosterUsernameAndCategoryTitleDescendingForUserParams) ([]*GetLinkerItemsByIdsWithPosterUsernameAndCategoryTitleDescendingForUserRow, error) {
	query := getLinkerItemsByIdsWithPosterUsernameAndCategoryTitleDescendingForUser
	var queryParams []interface{}
	queryParams = append(queryParams, arg.ViewerID)
	if len(arg.Linkerids) > 0 {
		for _, v := range arg.Linkerids {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:linkerids*/?", strings.Repeat(",?", len(arg.Linkerids))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:linkerids*/?", "NULL", 1)
	}
	queryParams = append(queryParams, arg.ViewerUserID)
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetLinkerItemsByIdsWithPosterUsernameAndCategoryTitleDescendingForUserRow
	for rows.Next() {
		var i GetLinkerItemsByIdsWithPosterUsernameAndCategoryTitleDescendingForUserRow
		if err := rows.Scan(
			&i.Idlinker,
			&i.LanguageIdlanguage,
			&i.UsersIdusers,
			&i.LinkerCategoryID,
			&i.ForumthreadID,
			&i.Title,
			&i.Url,
			&i.Description,
			&i.Listed,
			&i.Username,
			&i.Title_2,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLinkerItemsByUserDescending = `-- name: GetLinkerItemsByUserDescending :many
SELECT l.idlinker, l.language_idlanguage, l.users_idusers, l.linker_category_id, l.forumthread_id, l.title, l.url, l.description, l.listed, th.comments, lc.title as Category_Title, u.username as PosterUsername
FROM linker l
LEFT JOIN users u ON l.users_idusers = u.idusers
LEFT JOIN linker_category lc ON l.linker_category_id = lc.idlinkerCategory
LEFT JOIN forumthread th ON l.forumthread_id = th.idforumthread
WHERE l.users_idusers = ?
ORDER BY l.listed DESC
LIMIT ? OFFSET ?
`

type GetLinkerItemsByUserDescendingParams struct {
	UsersIdusers int32
	Limit        int32
	Offset       int32
}

type GetLinkerItemsByUserDescendingRow struct {
	Idlinker           int32
	LanguageIdlanguage int32
	UsersIdusers       int32
	LinkerCategoryID   int32
	ForumthreadID      int32
	Title              sql.NullString
	Url                sql.NullString
	Description        sql.NullString
	Listed             sql.NullTime
	Comments           sql.NullInt32
	CategoryTitle      sql.NullString
	Posterusername     sql.NullString
}

func (q *Queries) GetLinkerItemsByUserDescending(ctx context.Context, arg GetLinkerItemsByUserDescendingParams) ([]*GetLinkerItemsByUserDescendingRow, error) {
	rows, err := q.db.QueryContext(ctx, getLinkerItemsByUserDescending, arg.UsersIdusers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetLinkerItemsByUserDescendingRow
	for rows.Next() {
		var i GetLinkerItemsByUserDescendingRow
		if err := rows.Scan(
			&i.Idlinker,
			&i.LanguageIdlanguage,
			&i.UsersIdusers,
			&i.LinkerCategoryID,
			&i.ForumthreadID,
			&i.Title,
			&i.Url,
			&i.Description,
			&i.Listed,
			&i.Comments,
			&i.CategoryTitle,
			&i.Posterusername,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLinkerItemsByUserDescendingForUser = `-- name: GetLinkerItemsByUserDescendingForUser :many
WITH RECURSIVE role_ids(id) AS (
    SELECT ur.role_id FROM user_roles ur WHERE ur.users_idusers = ?
    UNION
    SELECT r2.id
    FROM role_ids ri
    JOIN grants g ON g.role_id = ri.id AND g.section = 'role' AND g.active = 1
    JOIN roles r2 ON r2.name = g.action
)
SELECT l.idlinker, l.language_idlanguage, l.users_idusers, l.linker_category_id, l.forumthread_id, l.title, l.url, l.description, l.listed, th.comments, lc.title as Category_Title, u.username as PosterUsername
FROM linker l
LEFT JOIN users u ON l.users_idusers = u.idusers
LEFT JOIN linker_category lc ON l.linker_category_id = lc.idlinkerCategory
LEFT JOIN forumthread th ON l.forumthread_id = th.idforumthread
WHERE l.users_idusers = ?
  AND EXISTS (
    SELECT 1 FROM grants g
    WHERE g.section='linker'
      AND g.item='link'
      AND g.action='see'
      AND g.active=1
      AND g.item_id = l.idlinker
      AND (g.user_id = ? OR g.user_id IS NULL)
      AND (g.role_id IS NULL OR g.role_id IN (SELECT id FROM role_ids))
  )
ORDER BY l.listed DESC
LIMIT ? OFFSET ?
`

type GetLinkerItemsByUserDescendingForUserParams struct {
	ViewerID     int32
	UserID       int32
	ViewerUserID sql.NullInt32
	Limit        int32
	Offset       int32
}

type GetLinkerItemsByUserDescendingForUserRow struct {
	Idlinker           int32
	LanguageIdlanguage int32
	UsersIdusers       int32
	LinkerCategoryID   int32
	ForumthreadID      int32
	Title              sql.NullString
	Url                sql.NullString
	Description        sql.NullString
	Listed             sql.NullTime
	Comments           sql.NullInt32
	CategoryTitle      sql.NullString
	Posterusername     sql.NullString
}

func (q *Queries) GetLinkerItemsByUserDescendingForUser(ctx context.Context, arg GetLinkerItemsByUserDescendingForUserParams) ([]*GetLinkerItemsByUserDescendingForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getLinkerItemsByUserDescendingForUser,
		arg.ViewerID,
		arg.UserID,
		arg.ViewerUserID,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetLinkerItemsByUserDescendingForUserRow
	for rows.Next() {
		var i GetLinkerItemsByUserDescendingForUserRow
		if err := rows.Scan(
			&i.Idlinker,
			&i.LanguageIdlanguage,
			&i.UsersIdusers,
			&i.LinkerCategoryID,
			&i.ForumthreadID,
			&i.Title,
			&i.Url,
			&i.Description,
			&i.Listed,
			&i.Comments,
			&i.CategoryTitle,
			&i.Posterusername,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const renameLinkerCategory = `-- name: RenameLinkerCategory :exec
UPDATE linker_category SET title = ?, position = ? WHERE idlinkerCategory = ?
`

type RenameLinkerCategoryParams struct {
	Title            sql.NullString
	Position         int32
	Idlinkercategory int32
}

func (q *Queries) RenameLinkerCategory(ctx context.Context, arg RenameLinkerCategoryParams) error {
	_, err := q.db.ExecContext(ctx, renameLinkerCategory, arg.Title, arg.Position, arg.Idlinkercategory)
	return err
}

const selectInsertLInkerQueuedItemIntoLinkerByLinkerQueueId = `-- name: SelectInsertLInkerQueuedItemIntoLinkerByLinkerQueueId :execlastid
INSERT INTO linker (users_idusers, linker_category_id, language_idlanguage, title, ` + "`" + `url` + "`" + `, description)
SELECT l.users_idusers, l.linker_category_id, l.language_idlanguage, l.title, l.url, l.description
FROM linker_queue l
WHERE l.idlinkerQueue = ?
`

func (q *Queries) SelectInsertLInkerQueuedItemIntoLinkerByLinkerQueueId(ctx context.Context, idlinkerqueue int32) (int64, error) {
	result, err := q.db.ExecContext(ctx, selectInsertLInkerQueuedItemIntoLinkerByLinkerQueueId, idlinkerqueue)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const setLinkerLastIndex = `-- name: SetLinkerLastIndex :exec
UPDATE linker SET last_index = NOW() WHERE idlinker = ?
`

func (q *Queries) SetLinkerLastIndex(ctx context.Context, idlinker int32) error {
	_, err := q.db.ExecContext(ctx, setLinkerLastIndex, idlinker)
	return err
}

const updateLinkerCategorySortOrder = `-- name: UpdateLinkerCategorySortOrder :exec
UPDATE linker_category SET sortorder = ? WHERE idlinkerCategory = ?
`

type UpdateLinkerCategorySortOrderParams struct {
	Sortorder        int32
	Idlinkercategory int32
}

func (q *Queries) UpdateLinkerCategorySortOrder(ctx context.Context, arg UpdateLinkerCategorySortOrderParams) error {
	_, err := q.db.ExecContext(ctx, updateLinkerCategorySortOrder, arg.Sortorder, arg.Idlinkercategory)
	return err
}

const updateLinkerItem = `-- name: UpdateLinkerItem :exec
UPDATE linker SET title = ?, url = ?, description = ?, linker_category_id = ?, language_idlanguage = ?
WHERE idlinker = ?
`

type UpdateLinkerItemParams struct {
	Title              sql.NullString
	Url                sql.NullString
	Description        sql.NullString
	LinkerCategoryID   int32
	LanguageIdlanguage int32
	Idlinker           int32
}

func (q *Queries) UpdateLinkerItem(ctx context.Context, arg UpdateLinkerItemParams) error {
	_, err := q.db.ExecContext(ctx, updateLinkerItem,
		arg.Title,
		arg.Url,
		arg.Description,
		arg.LinkerCategoryID,
		arg.LanguageIdlanguage,
		arg.Idlinker,
	)
	return err
}

const updateLinkerQueuedItem = `-- name: UpdateLinkerQueuedItem :exec
UPDATE linker_queue SET linker_category_id = ?, title = ?, url = ?, description = ? WHERE idlinkerQueue = ?
`

type UpdateLinkerQueuedItemParams struct {
	LinkerCategoryID int32
	Title            sql.NullString
	Url              sql.NullString
	Description      sql.NullString
	Idlinkerqueue    int32
}

func (q *Queries) UpdateLinkerQueuedItem(ctx context.Context, arg UpdateLinkerQueuedItemParams) error {
	_, err := q.db.ExecContext(ctx, updateLinkerQueuedItem,
		arg.LinkerCategoryID,
		arg.Title,
		arg.Url,
		arg.Description,
		arg.Idlinkerqueue,
	)
	return err
}
