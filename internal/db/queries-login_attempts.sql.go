// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries-login_attempts.sql

package db

import (
	"context"
	"time"
)

const countRecentLoginAttempts = `-- name: CountRecentLoginAttempts :one
SELECT COUNT(*) FROM login_attempts
WHERE (username = ? OR ip_address = ?) AND created_at > ?
`

type CountRecentLoginAttemptsParams struct {
	Username  string
	IpAddress string
	CreatedAt time.Time
}

func (q *Queries) CountRecentLoginAttempts(ctx context.Context, arg CountRecentLoginAttemptsParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, countRecentLoginAttempts, arg.Username, arg.IpAddress, arg.CreatedAt)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const insertLoginAttempt = `-- name: InsertLoginAttempt :exec
INSERT INTO login_attempts (username, ip_address)
VALUES (?, ?)
`

type InsertLoginAttemptParams struct {
	Username  string
	IpAddress string
}

func (q *Queries) InsertLoginAttempt(ctx context.Context, arg InsertLoginAttemptParams) error {
	_, err := q.db.ExecContext(ctx, insertLoginAttempt, arg.Username, arg.IpAddress)
	return err
}

const listLoginAttempts = `-- name: ListLoginAttempts :many
SELECT id, username, ip_address, created_at
FROM login_attempts
ORDER BY id DESC
`

func (q *Queries) ListLoginAttempts(ctx context.Context) ([]*LoginAttempt, error) {
	rows, err := q.db.QueryContext(ctx, listLoginAttempts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*LoginAttempt
	for rows.Next() {
		var i LoginAttempt
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.IpAddress,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
