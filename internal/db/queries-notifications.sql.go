// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries-notifications.sql

package db

import (
	"context"
	"database/sql"
)

const adminPurgeReadNotifications = `-- name: AdminPurgeReadNotifications :exec
DELETE FROM notifications
WHERE read_at IS NOT NULL AND read_at < (NOW() - INTERVAL 24 HOUR)
`

func (q *Queries) AdminPurgeReadNotifications(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, adminPurgeReadNotifications)
	return err
}

const countUnreadNotifications = `-- name: CountUnreadNotifications :one
SELECT COUNT(*) FROM notifications
WHERE users_idusers = ? AND read_at IS NULL
`

func (q *Queries) CountUnreadNotifications(ctx context.Context, usersIdusers int32) (int64, error) {
	row := q.db.QueryRowContext(ctx, countUnreadNotifications, usersIdusers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteNotification = `-- name: DeleteNotification :exec
DELETE FROM notifications WHERE id = ?
`

func (q *Queries) DeleteNotification(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteNotification, id)
	return err
}

const getNotification = `-- name: GetNotification :one
SELECT id, users_idusers, link, message, created_at, read_at
FROM notifications
WHERE id = ?
`

func (q *Queries) GetNotification(ctx context.Context, id int32) (*Notification, error) {
	row := q.db.QueryRowContext(ctx, getNotification, id)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.UsersIdusers,
		&i.Link,
		&i.Message,
		&i.CreatedAt,
		&i.ReadAt,
	)
	return &i, err
}

const getUnreadNotifications = `-- name: GetUnreadNotifications :many
SELECT id, users_idusers, link, message, created_at, read_at
FROM notifications
WHERE users_idusers = ? AND read_at IS NULL
ORDER BY id DESC
`

func (q *Queries) GetUnreadNotifications(ctx context.Context, usersIdusers int32) ([]*Notification, error) {
	rows, err := q.db.QueryContext(ctx, getUnreadNotifications, usersIdusers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Notification
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.ID,
			&i.UsersIdusers,
			&i.Link,
			&i.Message,
			&i.CreatedAt,
			&i.ReadAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertNotification = `-- name: InsertNotification :exec
INSERT INTO notifications (users_idusers, link, message)
VALUES (?, ?, ?)
`

type InsertNotificationParams struct {
	UsersIdusers int32
	Link         sql.NullString
	Message      sql.NullString
}

func (q *Queries) InsertNotification(ctx context.Context, arg InsertNotificationParams) error {
	_, err := q.db.ExecContext(ctx, insertNotification, arg.UsersIdusers, arg.Link, arg.Message)
	return err
}

const lastNotificationByMessage = `-- name: LastNotificationByMessage :one
SELECT id, users_idusers, link, message, created_at, read_at
FROM notifications
WHERE users_idusers = ? AND message = ?
ORDER BY id DESC LIMIT 1
`

type LastNotificationByMessageParams struct {
	UsersIdusers int32
	Message      sql.NullString
}

func (q *Queries) LastNotificationByMessage(ctx context.Context, arg LastNotificationByMessageParams) (*Notification, error) {
	row := q.db.QueryRowContext(ctx, lastNotificationByMessage, arg.UsersIdusers, arg.Message)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.UsersIdusers,
		&i.Link,
		&i.Message,
		&i.CreatedAt,
		&i.ReadAt,
	)
	return &i, err
}

const listUserNotifications = `-- name: ListUserNotifications :many
SELECT id, users_idusers, link, message, created_at, read_at
FROM notifications
WHERE users_idusers = ?
ORDER BY id DESC
LIMIT ? OFFSET ?
`

type ListUserNotificationsParams struct {
	UsersIdusers int32
	Limit        int32
	Offset       int32
}

func (q *Queries) ListUserNotifications(ctx context.Context, arg ListUserNotificationsParams) ([]*Notification, error) {
	rows, err := q.db.QueryContext(ctx, listUserNotifications, arg.UsersIdusers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Notification
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.ID,
			&i.UsersIdusers,
			&i.Link,
			&i.Message,
			&i.CreatedAt,
			&i.ReadAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserUnreadNotifications = `-- name: ListUserUnreadNotifications :many
SELECT id, users_idusers, link, message, created_at, read_at
FROM notifications
WHERE users_idusers = ? AND read_at IS NULL
ORDER BY id DESC
LIMIT ? OFFSET ?
`

type ListUserUnreadNotificationsParams struct {
	UsersIdusers int32
	Limit        int32
	Offset       int32
}

func (q *Queries) ListUserUnreadNotifications(ctx context.Context, arg ListUserUnreadNotificationsParams) ([]*Notification, error) {
	rows, err := q.db.QueryContext(ctx, listUserUnreadNotifications, arg.UsersIdusers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Notification
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.ID,
			&i.UsersIdusers,
			&i.Link,
			&i.Message,
			&i.CreatedAt,
			&i.ReadAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markNotificationRead = `-- name: MarkNotificationRead :exec
UPDATE notifications SET read_at = NOW() WHERE id = ?
`

func (q *Queries) MarkNotificationRead(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, markNotificationRead, id)
	return err
}

const markNotificationUnread = `-- name: MarkNotificationUnread :exec
UPDATE notifications SET read_at = NULL WHERE id = ?
`

func (q *Queries) MarkNotificationUnread(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, markNotificationUnread, id)
	return err
}

const recentNotifications = `-- name: RecentNotifications :many
SELECT id, users_idusers, link, message, created_at, read_at
FROM notifications
ORDER BY id DESC LIMIT ?
`

func (q *Queries) RecentNotifications(ctx context.Context, limit int32) ([]*Notification, error) {
	rows, err := q.db.QueryContext(ctx, recentNotifications, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Notification
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.ID,
			&i.UsersIdusers,
			&i.Link,
			&i.Message,
			&i.CreatedAt,
			&i.ReadAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
