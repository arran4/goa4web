// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries-permissions.sql

package db

import (
	"context"
	"database/sql"
)

const createUserRole = `-- name: CreateUserRole :exec
INSERT INTO user_roles (users_idusers, role_id)
SELECT ?, r.id FROM roles r WHERE r.name = ?
`

type CreateUserRoleParams struct {
	UsersIdusers int32
	Name         string
}

// This query inserts a new permission into the "permissions" table.
// Parameters:
//
//	? - User ID to be associated with the permission (int)
//	? - Role of the permission (string)
func (q *Queries) CreateUserRole(ctx context.Context, arg CreateUserRoleParams) error {
	_, err := q.db.ExecContext(ctx, createUserRole, arg.UsersIdusers, arg.Name)
	return err
}

const deleteTopicRestrictionsByForumTopicId = `-- name: DeleteTopicRestrictionsByForumTopicId :exec
DELETE FROM topicrestrictions WHERE forumtopic_idforumtopic = ?
`

func (q *Queries) DeleteTopicRestrictionsByForumTopicId(ctx context.Context, forumtopicIdforumtopic int32) error {
	_, err := q.db.ExecContext(ctx, deleteTopicRestrictionsByForumTopicId, forumtopicIdforumtopic)
	return err
}

const deleteUserRole = `-- name: DeleteUserRole :exec
DELETE FROM user_roles
WHERE idpermissions = ?
`

// This query deletes a permission from the "permissions" table based on the provided "permid".
// Parameters:
//
//	? - Permission ID to be deleted (int)
func (q *Queries) DeleteUserRole(ctx context.Context, idpermissions int32) error {
	_, err := q.db.ExecContext(ctx, deleteUserRole, idpermissions)
	return err
}

const getAdministratorUserRole = `-- name: GetAdministratorUserRole :one
SELECT ur.idpermissions, ur.users_idusers, ur.role_id
FROM user_roles ur
JOIN roles r ON ur.role_id = r.id
WHERE ur.users_idusers = ? AND r.name = 'administrator'
`

func (q *Queries) GetAdministratorUserRole(ctx context.Context, usersIdusers int32) (*UserRole, error) {
	row := q.db.QueryRowContext(ctx, getAdministratorUserRole, usersIdusers)
	var i UserRole
	err := row.Scan(&i.Idpermissions, &i.UsersIdusers, &i.RoleID)
	return &i, err
}

const getAllForumTopicRestrictionsWithForumTopicTitle = `-- name: GetAllForumTopicRestrictionsWithForumTopicTitle :many
SELECT t.idforumtopic, r.forumtopic_idforumtopic, r.viewlevel, r.replylevel, r.newthreadlevel, r.seelevel, r.invitelevel, r.readlevel, r.modlevel, r.adminlevel
FROM forumtopic t
LEFT JOIN topicrestrictions r ON t.idforumtopic = r.forumtopic_idforumtopic
`

type GetAllForumTopicRestrictionsWithForumTopicTitleRow struct {
	Idforumtopic           int32
	ForumtopicIdforumtopic sql.NullInt32
	Viewlevel              sql.NullInt32
	Replylevel             sql.NullInt32
	Newthreadlevel         sql.NullInt32
	Seelevel               sql.NullInt32
	Invitelevel            sql.NullInt32
	Readlevel              sql.NullInt32
	Modlevel               sql.NullInt32
	Adminlevel             sql.NullInt32
}

func (q *Queries) GetAllForumTopicRestrictionsWithForumTopicTitle(ctx context.Context) ([]*GetAllForumTopicRestrictionsWithForumTopicTitleRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllForumTopicRestrictionsWithForumTopicTitle)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetAllForumTopicRestrictionsWithForumTopicTitleRow
	for rows.Next() {
		var i GetAllForumTopicRestrictionsWithForumTopicTitleRow
		if err := rows.Scan(
			&i.Idforumtopic,
			&i.ForumtopicIdforumtopic,
			&i.Viewlevel,
			&i.Replylevel,
			&i.Newthreadlevel,
			&i.Seelevel,
			&i.Invitelevel,
			&i.Readlevel,
			&i.Modlevel,
			&i.Adminlevel,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getForumTopicRestrictionsByForumTopicId = `-- name: GetForumTopicRestrictionsByForumTopicId :many
SELECT t.idforumtopic, r.forumtopic_idforumtopic, r.viewlevel, r.replylevel, r.newthreadlevel, r.seelevel, r.invitelevel, r.readlevel, r.modlevel, r.adminlevel
FROM forumtopic t
LEFT JOIN topicrestrictions r ON t.idforumtopic = r.forumtopic_idforumtopic
WHERE idforumtopic = ?
`

type GetForumTopicRestrictionsByForumTopicIdRow struct {
	Idforumtopic           int32
	ForumtopicIdforumtopic sql.NullInt32
	Viewlevel              sql.NullInt32
	Replylevel             sql.NullInt32
	Newthreadlevel         sql.NullInt32
	Seelevel               sql.NullInt32
	Invitelevel            sql.NullInt32
	Readlevel              sql.NullInt32
	Modlevel               sql.NullInt32
	Adminlevel             sql.NullInt32
}

func (q *Queries) GetForumTopicRestrictionsByForumTopicId(ctx context.Context, idforumtopic int32) ([]*GetForumTopicRestrictionsByForumTopicIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getForumTopicRestrictionsByForumTopicId, idforumtopic)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetForumTopicRestrictionsByForumTopicIdRow
	for rows.Next() {
		var i GetForumTopicRestrictionsByForumTopicIdRow
		if err := rows.Scan(
			&i.Idforumtopic,
			&i.ForumtopicIdforumtopic,
			&i.Viewlevel,
			&i.Replylevel,
			&i.Newthreadlevel,
			&i.Seelevel,
			&i.Invitelevel,
			&i.Readlevel,
			&i.Modlevel,
			&i.Adminlevel,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserRole = `-- name: GetUserRole :one
SELECT r.name as role
FROM user_roles ur
JOIN roles r ON ur.role_id = r.id
WHERE ur.users_idusers = ?
LIMIT 1
`

// This query returns the role for a user.
// Result:
//
//	role (string)
func (q *Queries) GetUserRole(ctx context.Context, usersIdusers int32) (string, error) {
	row := q.db.QueryRowContext(ctx, getUserRole, usersIdusers)
	var role string
	err := row.Scan(&role)
	return role, err
}

const getUserRoles = `-- name: GetUserRoles :many
SELECT ur.idpermissions, ur.users_idusers, r.name AS role
FROM user_roles ur
JOIN roles r ON ur.role_id = r.id
`

type GetUserRolesRow struct {
	Idpermissions int32
	UsersIdusers  int32
	Role          string
}

// This query selects permissions information for admin users.
// Result:
//
//	idpermissions (int)
//	role (string)
//	username (string)
//	email (string)
func (q *Queries) GetUserRoles(ctx context.Context) ([]*GetUserRolesRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetUserRolesRow
	for rows.Next() {
		var i GetUserRolesRow
		if err := rows.Scan(&i.Idpermissions, &i.UsersIdusers, &i.Role); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersTopicLevelByUserIdAndThreadId = `-- name: GetUsersTopicLevelByUserIdAndThreadId :one
SELECT utl.users_idusers, utl.forumtopic_idforumtopic, utl.level, utl.invitemax, utl.expires_at
FROM userstopiclevel utl
WHERE utl.users_idusers = ? AND utl.forumtopic_idforumtopic = ?
`

type GetUsersTopicLevelByUserIdAndThreadIdParams struct {
	UsersIdusers           int32
	ForumtopicIdforumtopic int32
}

func (q *Queries) GetUsersTopicLevelByUserIdAndThreadId(ctx context.Context, arg GetUsersTopicLevelByUserIdAndThreadIdParams) (*Userstopiclevel, error) {
	row := q.db.QueryRowContext(ctx, getUsersTopicLevelByUserIdAndThreadId, arg.UsersIdusers, arg.ForumtopicIdforumtopic)
	var i Userstopiclevel
	err := row.Scan(
		&i.UsersIdusers,
		&i.ForumtopicIdforumtopic,
		&i.Level,
		&i.Invitemax,
		&i.ExpiresAt,
	)
	return &i, err
}

const upsertForumTopicRestrictions = `-- name: UpsertForumTopicRestrictions :exec
INSERT INTO topicrestrictions (forumtopic_idforumtopic, viewlevel, replylevel, newthreadlevel, seelevel, invitelevel, readlevel, modlevel, adminlevel)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
ON DUPLICATE KEY UPDATE
    viewlevel = VALUES(viewlevel),
    replylevel = VALUES(replylevel),
    newthreadlevel = VALUES(newthreadlevel),
    seelevel = VALUES(seelevel),
    invitelevel = VALUES(invitelevel),
    readlevel = VALUES(readlevel),
    modlevel = VALUES(modlevel),
    adminlevel = VALUES(adminlevel)
`

type UpsertForumTopicRestrictionsParams struct {
	ForumtopicIdforumtopic int32
	Viewlevel              sql.NullInt32
	Replylevel             sql.NullInt32
	Newthreadlevel         sql.NullInt32
	Seelevel               sql.NullInt32
	Invitelevel            sql.NullInt32
	Readlevel              sql.NullInt32
	Modlevel               sql.NullInt32
	Adminlevel             sql.NullInt32
}

func (q *Queries) UpsertForumTopicRestrictions(ctx context.Context, arg UpsertForumTopicRestrictionsParams) error {
	_, err := q.db.ExecContext(ctx, upsertForumTopicRestrictions,
		arg.ForumtopicIdforumtopic,
		arg.Viewlevel,
		arg.Replylevel,
		arg.Newthreadlevel,
		arg.Seelevel,
		arg.Invitelevel,
		arg.Readlevel,
		arg.Modlevel,
		arg.Adminlevel,
	)
	return err
}
