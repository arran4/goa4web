// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries-preferences.sql

package db

import (
	"context"
	"database/sql"
)

const getPreferenceForLister = `-- name: GetPreferenceForLister :one
SELECT idpreferences, language_idlanguage, users_idusers, emailforumupdates, page_size, auto_subscribe_replies, timezone
FROM preferences
WHERE users_idusers = ?
`

func (q *Queries) GetPreferenceForLister(ctx context.Context, listerID int32) (*Preference, error) {
	row := q.db.QueryRowContext(ctx, getPreferenceForLister, listerID)
	var i Preference
	err := row.Scan(
		&i.Idpreferences,
		&i.LanguageIdlanguage,
		&i.UsersIdusers,
		&i.Emailforumupdates,
		&i.PageSize,
		&i.AutoSubscribeReplies,
		&i.Timezone,
	)
	return &i, err
}

const insertEmailPreferenceForLister = `-- name: InsertEmailPreferenceForLister :exec
INSERT INTO preferences (emailforumupdates, auto_subscribe_replies, users_idusers)
VALUES (?, ?, ?)
`

type InsertEmailPreferenceForListerParams struct {
	EmailForumUpdates    sql.NullBool
	AutoSubscribeReplies bool
	ListerID             int32
}

func (q *Queries) InsertEmailPreferenceForLister(ctx context.Context, arg InsertEmailPreferenceForListerParams) error {
	_, err := q.db.ExecContext(ctx, insertEmailPreferenceForLister, arg.EmailForumUpdates, arg.AutoSubscribeReplies, arg.ListerID)
	return err
}

const insertPreferenceForLister = `-- name: InsertPreferenceForLister :exec
INSERT INTO preferences (language_idlanguage, users_idusers, page_size, timezone)
VALUES (?, ?, ?, ?)
`

type InsertPreferenceForListerParams struct {
	LanguageID int32
	ListerID   int32
	PageSize   int32
	Timezone   sql.NullString
}

func (q *Queries) InsertPreferenceForLister(ctx context.Context, arg InsertPreferenceForListerParams) error {
	_, err := q.db.ExecContext(ctx, insertPreferenceForLister,
		arg.LanguageID,
		arg.ListerID,
		arg.PageSize,
		arg.Timezone,
	)
	return err
}

const updateAutoSubscribeRepliesForLister = `-- name: UpdateAutoSubscribeRepliesForLister :exec
UPDATE preferences
SET auto_subscribe_replies = ?
WHERE users_idusers = ?
`

type UpdateAutoSubscribeRepliesForListerParams struct {
	AutoSubscribeReplies bool
	ListerID             int32
}

func (q *Queries) UpdateAutoSubscribeRepliesForLister(ctx context.Context, arg UpdateAutoSubscribeRepliesForListerParams) error {
	_, err := q.db.ExecContext(ctx, updateAutoSubscribeRepliesForLister, arg.AutoSubscribeReplies, arg.ListerID)
	return err
}

const updateEmailForumUpdatesForLister = `-- name: UpdateEmailForumUpdatesForLister :exec
UPDATE preferences
SET emailforumupdates = ?
WHERE users_idusers = ?
`

type UpdateEmailForumUpdatesForListerParams struct {
	EmailForumUpdates sql.NullBool
	ListerID          int32
}

func (q *Queries) UpdateEmailForumUpdatesForLister(ctx context.Context, arg UpdateEmailForumUpdatesForListerParams) error {
	_, err := q.db.ExecContext(ctx, updateEmailForumUpdatesForLister, arg.EmailForumUpdates, arg.ListerID)
	return err
}

const updatePreferenceForLister = `-- name: UpdatePreferenceForLister :exec
UPDATE preferences SET language_idlanguage = ?, page_size = ?, timezone = ? WHERE users_idusers = ?
`

type UpdatePreferenceForListerParams struct {
	LanguageID int32
	PageSize   int32
	Timezone   sql.NullString
	ListerID   int32
}

func (q *Queries) UpdatePreferenceForLister(ctx context.Context, arg UpdatePreferenceForListerParams) error {
	_, err := q.db.ExecContext(ctx, updatePreferenceForLister,
		arg.LanguageID,
		arg.PageSize,
		arg.Timezone,
		arg.ListerID,
	)
	return err
}

const updateTimezoneForLister = `-- name: UpdateTimezoneForLister :exec
UPDATE preferences
SET timezone = ?
WHERE users_idusers = ?
`

type UpdateTimezoneForListerParams struct {
	Timezone sql.NullString
	ListerID int32
}

func (q *Queries) UpdateTimezoneForLister(ctx context.Context, arg UpdateTimezoneForListerParams) error {
	_, err := q.db.ExecContext(ctx, updateTimezoneForLister, arg.Timezone, arg.ListerID)
	return err
}
