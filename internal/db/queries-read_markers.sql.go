// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries-read_markers.sql

package db

import (
	"context"
)

const getContentReadMarker = `-- name: GetContentReadMarker :one
SELECT item, item_id, user_id, last_comment_id
FROM content_read_markers
WHERE item = ? AND item_id = ? AND user_id = ?
`

type GetContentReadMarkerParams struct {
	Item   string
	ItemID int32
	UserID int32
}

type GetContentReadMarkerRow struct {
	Item          string
	ItemID        int32
	UserID        int32
	LastCommentID int32
}

func (q *Queries) GetContentReadMarker(ctx context.Context, arg GetContentReadMarkerParams) (*GetContentReadMarkerRow, error) {
	row := q.db.QueryRowContext(ctx, getContentReadMarker, arg.Item, arg.ItemID, arg.UserID)
	var i GetContentReadMarkerRow
	err := row.Scan(
		&i.Item,
		&i.ItemID,
		&i.UserID,
		&i.LastCommentID,
	)
	return &i, err
}

const upsertContentReadMarker = `-- name: UpsertContentReadMarker :exec
INSERT INTO content_read_markers (
    item, item_id, user_id, last_comment_id
) VALUES (?, ?, ?, ?)
ON DUPLICATE KEY UPDATE last_comment_id = VALUES(last_comment_id)
`

type UpsertContentReadMarkerParams struct {
	Item          string
	ItemID        int32
	UserID        int32
	LastCommentID int32
}

func (q *Queries) UpsertContentReadMarker(ctx context.Context, arg UpsertContentReadMarkerParams) error {
	_, err := q.db.ExecContext(ctx, upsertContentReadMarker,
		arg.Item,
		arg.ItemID,
		arg.UserID,
		arg.LastCommentID,
	)
	return err
}
