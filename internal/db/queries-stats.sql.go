// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries-stats.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const countThreadsByBoard = `-- name: CountThreadsByBoard :one
SELECT COUNT(DISTINCT forumthread_id)
FROM imagepost
WHERE imageboard_idimageboard = ?
`

func (q *Queries) CountThreadsByBoard(ctx context.Context, imageboardIdimageboard int32) (int64, error) {
	row := q.db.QueryRowContext(ctx, countThreadsByBoard, imageboardIdimageboard)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const forumCategoryThreadCounts = `-- name: ForumCategoryThreadCounts :many
SELECT c.title, COUNT(th.idforumthread) AS count
FROM forumcategory c
LEFT JOIN forumtopic t ON c.idforumcategory = t.forumcategory_idforumcategory
LEFT JOIN forumthread th ON th.forumtopic_idforumtopic = t.idforumtopic
GROUP BY c.idforumcategory
ORDER BY c.title
`

type ForumCategoryThreadCountsRow struct {
	Title sql.NullString
	Count int64
}

func (q *Queries) ForumCategoryThreadCounts(ctx context.Context) ([]*ForumCategoryThreadCountsRow, error) {
	rows, err := q.db.QueryContext(ctx, forumCategoryThreadCounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*ForumCategoryThreadCountsRow
	for rows.Next() {
		var i ForumCategoryThreadCountsRow
		if err := rows.Scan(&i.Title, &i.Count); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const forumTopicThreadCounts = `-- name: ForumTopicThreadCounts :many
SELECT t.title, COUNT(th.idforumthread) AS count
FROM forumtopic t
LEFT JOIN forumthread th ON th.forumtopic_idforumtopic = t.idforumtopic
GROUP BY t.idforumtopic
ORDER BY t.title
`

type ForumTopicThreadCountsRow struct {
	Title sql.NullString
	Count int64
}

func (q *Queries) ForumTopicThreadCounts(ctx context.Context) ([]*ForumTopicThreadCountsRow, error) {
	rows, err := q.db.QueryContext(ctx, forumTopicThreadCounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*ForumTopicThreadCountsRow
	for rows.Next() {
		var i ForumTopicThreadCountsRow
		if err := rows.Scan(&i.Title, &i.Count); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRecentAuditLogs = `-- name: GetRecentAuditLogs :many
SELECT a.id, a.users_idusers, u.username, a.action, a.created_at
FROM audit_log a LEFT JOIN users u ON a.users_idusers = u.idusers
ORDER BY a.id DESC LIMIT ?
`

type GetRecentAuditLogsRow struct {
	ID           int32
	UsersIdusers int32
	Username     sql.NullString
	Action       string
	CreatedAt    time.Time
}

func (q *Queries) GetRecentAuditLogs(ctx context.Context, limit int32) ([]*GetRecentAuditLogsRow, error) {
	rows, err := q.db.QueryContext(ctx, getRecentAuditLogs, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetRecentAuditLogsRow
	for rows.Next() {
		var i GetRecentAuditLogsRow
		if err := rows.Scan(
			&i.ID,
			&i.UsersIdusers,
			&i.Username,
			&i.Action,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTemplateOverride = `-- name: GetTemplateOverride :one
SELECT body FROM template_overrides WHERE name = ?
`

func (q *Queries) GetTemplateOverride(ctx context.Context, name string) (string, error) {
	row := q.db.QueryRowContext(ctx, getTemplateOverride, name)
	var body string
	err := row.Scan(&body)
	return body, err
}

const imageboardPostCounts = `-- name: ImageboardPostCounts :many
SELECT ib.title, COUNT(ip.idimagepost) AS count
FROM imageboard ib
LEFT JOIN imagepost ip ON ip.imageboard_idimageboard = ib.idimageboard
GROUP BY ib.idimageboard
ORDER BY ib.title
`

type ImageboardPostCountsRow struct {
	Title sql.NullString
	Count int64
}

func (q *Queries) ImageboardPostCounts(ctx context.Context) ([]*ImageboardPostCountsRow, error) {
	rows, err := q.db.QueryContext(ctx, imageboardPostCounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*ImageboardPostCountsRow
	for rows.Next() {
		var i ImageboardPostCountsRow
		if err := rows.Scan(&i.Title, &i.Count); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserInfo = `-- name: ListUserInfo :many
SELECT u.idusers, u.username,
       (SELECT email FROM user_emails ue WHERE ue.user_id = u.idusers AND ue.verified_at IS NOT NULL ORDER BY ue.notification_priority DESC, ue.id LIMIT 1) AS email,
       IF(r.id IS NULL, 0, 1) AS admin,
       MIN(s.created_at) AS created_at
FROM users u
LEFT JOIN user_roles ur ON ur.users_idusers = u.idusers
LEFT JOIN roles r ON ur.role_id = r.id AND r.is_admin = 1
LEFT JOIN sessions s ON s.users_idusers = u.idusers
GROUP BY u.idusers
ORDER BY u.idusers
`

type ListUserInfoRow struct {
	Idusers   int32
	Username  sql.NullString
	Email     string
	Admin     interface{}
	CreatedAt interface{}
}

func (q *Queries) ListUserInfo(ctx context.Context) ([]*ListUserInfoRow, error) {
	rows, err := q.db.QueryContext(ctx, listUserInfo)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*ListUserInfoRow
	for rows.Next() {
		var i ListUserInfoRow
		if err := rows.Scan(
			&i.Idusers,
			&i.Username,
			&i.Email,
			&i.Admin,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setTemplateOverride = `-- name: SetTemplateOverride :exec
INSERT INTO template_overrides (name, body)
VALUES (?, ?)
ON DUPLICATE KEY UPDATE body = VALUES(body)
`

type SetTemplateOverrideParams struct {
	Name string
	Body string
}

func (q *Queries) SetTemplateOverride(ctx context.Context, arg SetTemplateOverrideParams) error {
	_, err := q.db.ExecContext(ctx, setTemplateOverride, arg.Name, arg.Body)
	return err
}

const userPostCounts = `-- name: UserPostCounts :many
SELECT u.username,
       COUNT(DISTINCT b.idblogs) AS blogs,
       COUNT(DISTINCT n.idsiteNews) AS news,
       COUNT(DISTINCT c.idcomments) AS comments,
       COUNT(DISTINCT i.idimagepost) AS images,
       COUNT(DISTINCT l.idlinker) AS links,
       COUNT(DISTINCT w.idwriting) AS writings
FROM users u
LEFT JOIN blogs b ON b.users_idusers = u.idusers
LEFT JOIN site_news n ON n.users_idusers = u.idusers
LEFT JOIN comments c ON c.users_idusers = u.idusers
LEFT JOIN imagepost i ON i.users_idusers = u.idusers
LEFT JOIN linker l ON l.users_idusers = u.idusers
LEFT JOIN writing w ON w.users_idusers = u.idusers
GROUP BY u.idusers
ORDER BY u.username
`

type UserPostCountsRow struct {
	Username sql.NullString
	Blogs    int64
	News     int64
	Comments int64
	Images   int64
	Links    int64
	Writings int64
}

func (q *Queries) UserPostCounts(ctx context.Context) ([]*UserPostCountsRow, error) {
	rows, err := q.db.QueryContext(ctx, userPostCounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*UserPostCountsRow
	for rows.Next() {
		var i UserPostCountsRow
		if err := rows.Scan(
			&i.Username,
			&i.Blogs,
			&i.News,
			&i.Comments,
			&i.Images,
			&i.Links,
			&i.Writings,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const writingCategoryCounts = `-- name: WritingCategoryCounts :many
SELECT wc.title, COUNT(w.idwriting) AS count
FROM writing_category wc
LEFT JOIN writing w ON w.writing_category_id = wc.idwritingCategory
GROUP BY wc.idwritingCategory
ORDER BY wc.title
`

type WritingCategoryCountsRow struct {
	Title sql.NullString
	Count int64
}

func (q *Queries) WritingCategoryCounts(ctx context.Context) ([]*WritingCategoryCountsRow, error) {
	rows, err := q.db.QueryContext(ctx, writingCategoryCounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*WritingCategoryCountsRow
	for rows.Next() {
		var i WritingCategoryCountsRow
		if err := rows.Scan(&i.Title, &i.Count); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
