// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries-subscriptions.sql

package db

import (
	"context"
)

const deleteSubscription = `-- name: DeleteSubscription :exec
DELETE FROM subscriptions
WHERE users_idusers = ? AND pattern = ? AND method = ?
`

type DeleteSubscriptionParams struct {
	UsersIdusers int32
	Pattern      string
	Method       string
}

func (q *Queries) DeleteSubscription(ctx context.Context, arg DeleteSubscriptionParams) error {
	_, err := q.db.ExecContext(ctx, deleteSubscription, arg.UsersIdusers, arg.Pattern, arg.Method)
	return err
}

const deleteSubscriptionByID = `-- name: DeleteSubscriptionByID :exec
DELETE FROM subscriptions WHERE users_idusers = ? AND id = ?
`

type DeleteSubscriptionByIDParams struct {
	UsersIdusers int32
	ID           int32
}

func (q *Queries) DeleteSubscriptionByID(ctx context.Context, arg DeleteSubscriptionByIDParams) error {
	_, err := q.db.ExecContext(ctx, deleteSubscriptionByID, arg.UsersIdusers, arg.ID)
	return err
}

const insertSubscription = `-- name: InsertSubscription :exec
INSERT INTO subscriptions (users_idusers, pattern, method)
VALUES (?, ?, ?)
`

type InsertSubscriptionParams struct {
	UsersIdusers int32
	Pattern      string
	Method       string
}

func (q *Queries) InsertSubscription(ctx context.Context, arg InsertSubscriptionParams) error {
	_, err := q.db.ExecContext(ctx, insertSubscription, arg.UsersIdusers, arg.Pattern, arg.Method)
	return err
}

const listSubscribersForPattern = `-- name: ListSubscribersForPattern :many
SELECT users_idusers FROM subscriptions
WHERE pattern = ? AND method = ?
`

type ListSubscribersForPatternParams struct {
	Pattern string
	Method  string
}

func (q *Queries) ListSubscribersForPattern(ctx context.Context, arg ListSubscribersForPatternParams) ([]int32, error) {
	rows, err := q.db.QueryContext(ctx, listSubscribersForPattern, arg.Pattern, arg.Method)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var users_idusers int32
		if err := rows.Scan(&users_idusers); err != nil {
			return nil, err
		}
		items = append(items, users_idusers)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSubscriptionsByUser = `-- name: ListSubscriptionsByUser :many
SELECT id, pattern, method FROM subscriptions
WHERE users_idusers = ?
ORDER BY id
`

type ListSubscriptionsByUserRow struct {
	ID      int32
	Pattern string
	Method  string
}

func (q *Queries) ListSubscriptionsByUser(ctx context.Context, usersIdusers int32) ([]*ListSubscriptionsByUserRow, error) {
	rows, err := q.db.QueryContext(ctx, listSubscriptionsByUser, usersIdusers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*ListSubscriptionsByUserRow
	for rows.Next() {
		var i ListSubscriptionsByUserRow
		if err := rows.Scan(&i.ID, &i.Pattern, &i.Method); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
