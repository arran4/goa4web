// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries-threads.sql

package db

import (
	"context"
	"database/sql"
)

const deleteForumThread = `-- name: DeleteForumThread :exec
UPDATE forumthread SET deleted_at = NOW() WHERE idforumthread = ?
`

func (q *Queries) DeleteForumThread(ctx context.Context, idforumthread int32) error {
	_, err := q.db.ExecContext(ctx, deleteForumThread, idforumthread)
	return err
}

const getForumTopicIdByThreadId = `-- name: GetForumTopicIdByThreadId :one
SELECT forumtopic_idforumtopic FROM forumthread WHERE idforumthread = ?
`

func (q *Queries) GetForumTopicIdByThreadId(ctx context.Context, idforumthread int32) (int32, error) {
	row := q.db.QueryRowContext(ctx, getForumTopicIdByThreadId, idforumthread)
	var forumtopic_idforumtopic int32
	err := row.Scan(&forumtopic_idforumtopic)
	return forumtopic_idforumtopic, err
}

const getThreadLastPosterAndPerms = `-- name: GetThreadLastPosterAndPerms :one
WITH RECURSIVE role_ids(id) AS (
    SELECT ur.role_id FROM user_roles ur WHERE ur.users_idusers = ?
    UNION
    SELECT r2.id FROM role_ids ri
    JOIN grants g ON g.role_id = ri.id AND g.section='role' AND g.active = 1
    JOIN roles r2 ON r2.name = g.action
)
SELECT th.idforumthread, th.firstpost, th.lastposter, th.forumtopic_idforumtopic, th.comments, th.lastaddition, th.locked, lu.username AS LastPosterUsername
FROM forumthread th
LEFT JOIN forumtopic t ON th.forumtopic_idforumtopic=t.idforumtopic
LEFT JOIN users lu ON lu.idusers = t.lastposter
WHERE th.idforumthread=?
  AND EXISTS (
    SELECT 1 FROM grants g
    WHERE g.section='forum'
      AND g.item='topic'
      AND g.action='view'
      AND g.active=1
      AND g.item_id = t.idforumtopic
      AND (g.user_id = ? OR g.user_id IS NULL)
      AND (g.role_id IS NULL OR g.role_id IN (SELECT id FROM role_ids))
  )
ORDER BY t.lastaddition DESC
`

type GetThreadLastPosterAndPermsParams struct {
	ViewerID      int32
	ThreadID      int32
	ViewerMatchID sql.NullInt32
}

type GetThreadLastPosterAndPermsRow struct {
	Idforumthread          int32
	Firstpost              int32
	Lastposter             int32
	ForumtopicIdforumtopic int32
	Comments               sql.NullInt32
	Lastaddition           sql.NullTime
	Locked                 sql.NullBool
	Lastposterusername     sql.NullString
}

func (q *Queries) GetThreadLastPosterAndPerms(ctx context.Context, arg GetThreadLastPosterAndPermsParams) (*GetThreadLastPosterAndPermsRow, error) {
	row := q.db.QueryRowContext(ctx, getThreadLastPosterAndPerms, arg.ViewerID, arg.ThreadID, arg.ViewerMatchID)
	var i GetThreadLastPosterAndPermsRow
	err := row.Scan(
		&i.Idforumthread,
		&i.Firstpost,
		&i.Lastposter,
		&i.ForumtopicIdforumtopic,
		&i.Comments,
		&i.Lastaddition,
		&i.Locked,
		&i.Lastposterusername,
	)
	return &i, err
}

const getThreadsStartedByUser = `-- name: GetThreadsStartedByUser :many
SELECT th.idforumthread, th.firstpost, th.lastposter, th.forumtopic_idforumtopic, th.comments, th.lastaddition, th.locked
FROM forumthread th
JOIN comments c ON th.firstpost = c.idcomments
WHERE c.users_idusers = ?
ORDER BY th.lastaddition DESC
`

func (q *Queries) GetThreadsStartedByUser(ctx context.Context, usersIdusers int32) ([]*Forumthread, error) {
	rows, err := q.db.QueryContext(ctx, getThreadsStartedByUser, usersIdusers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Forumthread
	for rows.Next() {
		var i Forumthread
		if err := rows.Scan(
			&i.Idforumthread,
			&i.Firstpost,
			&i.Lastposter,
			&i.ForumtopicIdforumtopic,
			&i.Comments,
			&i.Lastaddition,
			&i.Locked,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const makeThread = `-- name: MakeThread :execlastid
INSERT INTO forumthread (forumtopic_idforumtopic) VALUES (?)
`

func (q *Queries) MakeThread(ctx context.Context, forumtopicIdforumtopic int32) (int64, error) {
	result, err := q.db.ExecContext(ctx, makeThread, forumtopicIdforumtopic)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const recalculateAllForumThreadMetaData = `-- name: RecalculateAllForumThreadMetaData :exec
UPDATE forumthread
SET lastaddition = (
    SELECT written
    FROM comments
    WHERE forumthread_id = idforumthread
    ORDER BY written DESC
    LIMIT 1
), comments = (
    SELECT COUNT(users_idusers) - 1
    FROM comments
    WHERE forumthread_id = idforumthread
), lastposter = (
    SELECT users_idusers
    FROM comments
    WHERE forumthread_id = idforumthread
    ORDER BY written DESC
    LIMIT 1
), firstpost = (
    SELECT idcomments
    FROM comments
    WHERE forumthread_id = idforumthread
    LIMIT 1
)
`

func (q *Queries) RecalculateAllForumThreadMetaData(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, recalculateAllForumThreadMetaData)
	return err
}

const recalculateForumThreadByIdMetaData = `-- name: RecalculateForumThreadByIdMetaData :exec
UPDATE forumthread
SET lastaddition = (
    SELECT written
    FROM comments
    WHERE forumthread_id = idforumthread
    ORDER BY written DESC
    LIMIT 1
), comments = (
    SELECT COUNT(users_idusers) - 1
    FROM comments
    WHERE forumthread_id = idforumthread
), lastposter = (
    SELECT users_idusers
    FROM comments
    WHERE forumthread_id = idforumthread
    ORDER BY written DESC
    LIMIT 1
), firstpost = (
    SELECT idcomments
    FROM comments
    WHERE forumthread_id = idforumthread
    LIMIT 1
)
WHERE idforumthread = ?
`

func (q *Queries) RecalculateForumThreadByIdMetaData(ctx context.Context, idforumthread int32) error {
	_, err := q.db.ExecContext(ctx, recalculateForumThreadByIdMetaData, idforumthread)
	return err
}
