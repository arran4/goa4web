// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries-user_languages.sql

package db

import (
	"context"
)

const deleteUserLanguagesForUser = `-- name: DeleteUserLanguagesForUser :exec
DELETE FROM user_language WHERE users_idusers = ?
`

func (q *Queries) DeleteUserLanguagesForUser(ctx context.Context, userID int32) error {
	_, err := q.db.ExecContext(ctx, deleteUserLanguagesForUser, userID)
	return err
}

const getUserLanguages = `-- name: GetUserLanguages :many
SELECT iduserlang, users_idusers, language_idlanguage
FROM user_language
WHERE users_idusers = ?
`

func (q *Queries) GetUserLanguages(ctx context.Context, usersIdusers int32) ([]*UserLanguage, error) {
	rows, err := q.db.QueryContext(ctx, getUserLanguages, usersIdusers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*UserLanguage
	for rows.Next() {
		var i UserLanguage
		if err := rows.Scan(&i.Iduserlang, &i.UsersIdusers, &i.LanguageIdlanguage); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertUserLang = `-- name: InsertUserLang :exec
INSERT INTO user_language (users_idusers, language_idlanguage)
VALUES (?, ?)
`

type InsertUserLangParams struct {
	UsersIdusers       int32
	LanguageIdlanguage int32
}

func (q *Queries) InsertUserLang(ctx context.Context, arg InsertUserLangParams) error {
	_, err := q.db.ExecContext(ctx, insertUserLang, arg.UsersIdusers, arg.LanguageIdlanguage)
	return err
}
