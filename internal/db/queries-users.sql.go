// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries-users.sql

package db

import (
	"context"
	"database/sql"
	"strings"
)

const adminDeleteUserByID = `-- name: AdminDeleteUserByID :exec
DELETE FROM users WHERE idusers = ?
`

func (q *Queries) AdminDeleteUserByID(ctx context.Context, idusers int32) error {
	_, err := q.db.ExecContext(ctx, adminDeleteUserByID, idusers)
	return err
}

const adminListAdministratorEmails = `-- name: AdminListAdministratorEmails :many
SELECT (SELECT email FROM user_emails ue WHERE ue.user_id = u.idusers AND ue.verified_at IS NOT NULL ORDER BY ue.notification_priority DESC, ue.id LIMIT 1) AS email
FROM users u
JOIN user_roles ur ON ur.users_idusers = u.idusers
JOIN roles r ON ur.role_id = r.id
WHERE r.is_admin = 1
`

func (q *Queries) AdminListAdministratorEmails(ctx context.Context) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, adminListAdministratorEmails)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var email string
		if err := rows.Scan(&email); err != nil {
			return nil, err
		}
		items = append(items, email)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const adminListAllUserIDs = `-- name: AdminListAllUserIDs :many
SELECT idusers FROM users ORDER BY idusers
`

func (q *Queries) AdminListAllUserIDs(ctx context.Context) ([]int32, error) {
	rows, err := q.db.QueryContext(ctx, adminListAllUserIDs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var idusers int32
		if err := rows.Scan(&idusers); err != nil {
			return nil, err
		}
		items = append(items, idusers)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const adminListAllUsers = `-- name: AdminListAllUsers :many
SELECT u.idusers, u.username,
       (SELECT email FROM user_emails ue WHERE ue.user_id = u.idusers AND ue.verified_at IS NOT NULL ORDER BY ue.notification_priority DESC, ue.id LIMIT 1) AS email
FROM users u
JOIN user_roles ur ON ur.users_idusers = u.idusers
JOIN roles r ON ur.role_id = r.id
WHERE r.is_admin = 1
`

type AdminListAllUsersRow struct {
	Idusers  int32
	Username sql.NullString
	Email    string
}

// Result:
//
//	idusers (int)
//	username (string)
//	email (string)
func (q *Queries) AdminListAllUsers(ctx context.Context) ([]*AdminListAllUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, adminListAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*AdminListAllUsersRow
	for rows.Next() {
		var i AdminListAllUsersRow
		if err := rows.Scan(&i.Idusers, &i.Username, &i.Email); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const adminListPendingUsers = `-- name: AdminListPendingUsers :many
SELECT u.idusers, u.username,
       (SELECT email FROM user_emails ue WHERE ue.user_id = u.idusers AND ue.verified_at IS NOT NULL ORDER BY ue.notification_priority DESC, ue.id LIMIT 1) AS email
FROM users u
WHERE NOT EXISTS (
    SELECT 1 FROM user_roles ur
    JOIN roles r ON ur.role_id = r.id
    WHERE ur.users_idusers = u.idusers AND (r.can_login = 1 OR r.name = 'rejected')
)
ORDER BY u.idusers
`

type AdminListPendingUsersRow struct {
	Idusers  int32
	Username sql.NullString
	Email    string
}

func (q *Queries) AdminListPendingUsers(ctx context.Context) ([]*AdminListPendingUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, adminListPendingUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*AdminListPendingUsersRow
	for rows.Next() {
		var i AdminListPendingUsersRow
		if err := rows.Scan(&i.Idusers, &i.Username, &i.Email); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const adminListUserIDsByRole = `-- name: AdminListUserIDsByRole :many
SELECT u.idusers
FROM users u
JOIN user_roles ur ON ur.users_idusers = u.idusers
JOIN roles r ON ur.role_id = r.id
WHERE r.name = ?
ORDER BY u.idusers
`

func (q *Queries) AdminListUserIDsByRole(ctx context.Context, name string) ([]int32, error) {
	rows, err := q.db.QueryContext(ctx, adminListUserIDsByRole, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var idusers int32
		if err := rows.Scan(&idusers); err != nil {
			return nil, err
		}
		items = append(items, idusers)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const adminListUsersByID = `-- name: AdminListUsersByID :many
SELECT idusers, username
FROM users
WHERE idusers IN (/*SLICE:ids*/?)
`

type AdminListUsersByIDRow struct {
	Idusers  int32
	Username sql.NullString
}

func (q *Queries) AdminListUsersByID(ctx context.Context, ids []int32) ([]*AdminListUsersByIDRow, error) {
	query := adminListUsersByID
	var queryParams []interface{}
	if len(ids) > 0 {
		for _, v := range ids {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:ids*/?", strings.Repeat(",?", len(ids))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:ids*/?", "NULL", 1)
	}
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*AdminListUsersByIDRow
	for rows.Next() {
		var i AdminListUsersByIDRow
		if err := rows.Scan(&i.Idusers, &i.Username); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const adminUpdateUsernameByID = `-- name: AdminUpdateUsernameByID :exec
UPDATE users SET username = ? WHERE idusers = ?
`

type AdminUpdateUsernameByIDParams struct {
	Username sql.NullString
	Idusers  int32
}

func (q *Queries) AdminUpdateUsernameByID(ctx context.Context, arg AdminUpdateUsernameByIDParams) error {
	_, err := q.db.ExecContext(ctx, adminUpdateUsernameByID, arg.Username, arg.Idusers)
	return err
}

const systemGetLogin = `-- name: SystemGetLogin :one
SELECT u.idusers,
       (SELECT email FROM user_emails ue WHERE ue.user_id = u.idusers AND ue.verified_at IS NOT NULL ORDER BY ue.notification_priority DESC, ue.id LIMIT 1) AS email,
       p.passwd, p.passwd_algorithm, u.username
FROM users u LEFT JOIN passwords p ON p.users_idusers = u.idusers
WHERE u.username = ?
ORDER BY p.created_at DESC
LIMIT 1
`

type SystemGetLoginRow struct {
	Idusers         int32
	Email           string
	Passwd          sql.NullString
	PasswdAlgorithm sql.NullString
	Username        sql.NullString
}

func (q *Queries) SystemGetLogin(ctx context.Context, username sql.NullString) (*SystemGetLoginRow, error) {
	row := q.db.QueryRowContext(ctx, systemGetLogin, username)
	var i SystemGetLoginRow
	err := row.Scan(
		&i.Idusers,
		&i.Email,
		&i.Passwd,
		&i.PasswdAlgorithm,
		&i.Username,
	)
	return &i, err
}

const systemGetUserByEmail = `-- name: SystemGetUserByEmail :one
SELECT u.idusers, ue.email, u.username
FROM users u JOIN user_emails ue ON ue.user_id = u.idusers
WHERE ue.email = ?
LIMIT 1
`

type SystemGetUserByEmailRow struct {
	Idusers  int32
	Email    string
	Username sql.NullString
}

func (q *Queries) SystemGetUserByEmail(ctx context.Context, email string) (*SystemGetUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, systemGetUserByEmail, email)
	var i SystemGetUserByEmailRow
	err := row.Scan(&i.Idusers, &i.Email, &i.Username)
	return &i, err
}

const systemGetUserByID = `-- name: SystemGetUserByID :one
SELECT u.idusers, ue.email, u.username, u.public_profile_enabled_at
FROM users u
LEFT JOIN user_emails ue ON ue.id = (
        SELECT id FROM user_emails ue2
        WHERE ue2.user_id = u.idusers AND ue2.verified_at IS NOT NULL
        ORDER BY ue2.notification_priority DESC, ue2.id LIMIT 1
)
WHERE u.idusers = ?
`

type SystemGetUserByIDRow struct {
	Idusers                int32
	Email                  sql.NullString
	Username               sql.NullString
	PublicProfileEnabledAt sql.NullTime
}

func (q *Queries) SystemGetUserByID(ctx context.Context, idusers int32) (*SystemGetUserByIDRow, error) {
	row := q.db.QueryRowContext(ctx, systemGetUserByID, idusers)
	var i SystemGetUserByIDRow
	err := row.Scan(
		&i.Idusers,
		&i.Email,
		&i.Username,
		&i.PublicProfileEnabledAt,
	)
	return &i, err
}

const systemGetUserByUsername = `-- name: SystemGetUserByUsername :one
SELECT idusers,
       (SELECT email FROM user_emails ue WHERE ue.user_id = users.idusers AND ue.verified_at IS NOT NULL ORDER BY ue.notification_priority DESC, ue.id LIMIT 1) AS email,
       username,
       public_profile_enabled_at
FROM users
WHERE username = ?
`

type SystemGetUserByUsernameRow struct {
	Idusers                int32
	Email                  string
	Username               sql.NullString
	PublicProfileEnabledAt sql.NullTime
}

func (q *Queries) SystemGetUserByUsername(ctx context.Context, username sql.NullString) (*SystemGetUserByUsernameRow, error) {
	row := q.db.QueryRowContext(ctx, systemGetUserByUsername, username)
	var i SystemGetUserByUsernameRow
	err := row.Scan(
		&i.Idusers,
		&i.Email,
		&i.Username,
		&i.PublicProfileEnabledAt,
	)
	return &i, err
}

const systemInsertUser = `-- name: SystemInsertUser :execresult
INSERT INTO users (username)
VALUES (?)
`

func (q *Queries) SystemInsertUser(ctx context.Context, username sql.NullString) (sql.Result, error) {
	return q.db.ExecContext(ctx, systemInsertUser, username)
}

const updatePublicProfileEnabledAtByUserID = `-- name: UpdatePublicProfileEnabledAtByUserID :exec
UPDATE users SET public_profile_enabled_at = ? WHERE idusers = ?
`

type UpdatePublicProfileEnabledAtByUserIDParams struct {
	PublicProfileEnabledAt sql.NullTime
	Idusers                int32
}

func (q *Queries) UpdatePublicProfileEnabledAtByUserID(ctx context.Context, arg UpdatePublicProfileEnabledAtByUserIDParams) error {
	_, err := q.db.ExecContext(ctx, updatePublicProfileEnabledAtByUserID, arg.PublicProfileEnabledAt, arg.Idusers)
	return err
}

const updateUserEmail = `-- name: UpdateUserEmail :exec
UPDATE user_emails SET email = ? WHERE user_id = ?
`

type UpdateUserEmailParams struct {
	Email  string
	UserID int32
}

func (q *Queries) UpdateUserEmail(ctx context.Context, arg UpdateUserEmailParams) error {
	_, err := q.db.ExecContext(ctx, updateUserEmail, arg.Email, arg.UserID)
	return err
}
