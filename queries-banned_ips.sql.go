// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries-banned_ips.sql

package main

import (
	"context"
	"database/sql"
)

const deleteBannedIp = `-- name: DeleteBannedIp :exec
DELETE FROM banned_ips WHERE ip_address = ?
`

func (q *Queries) DeleteBannedIp(ctx context.Context, ipAddress string) error {
	_, err := q.db.ExecContext(ctx, deleteBannedIp, ipAddress)
	return err
}

const getBannedIpByAddress = `-- name: GetBannedIpByAddress :one
SELECT id, ip_address, reason, created_at FROM banned_ips WHERE ip_address = ?
`

func (q *Queries) GetBannedIpByAddress(ctx context.Context, ipAddress string) (*BannedIp, error) {
	row := q.db.QueryRowContext(ctx, getBannedIpByAddress, ipAddress)
	var i BannedIp
	err := row.Scan(
		&i.ID,
		&i.IpAddress,
		&i.Reason,
		&i.CreatedAt,
	)
	return &i, err
}

const insertBannedIp = `-- name: InsertBannedIp :exec
INSERT INTO banned_ips (ip_address, reason) VALUES (?, ?)
`

type InsertBannedIpParams struct {
	IpAddress string
	Reason    sql.NullString
}

func (q *Queries) InsertBannedIp(ctx context.Context, arg InsertBannedIpParams) error {
	_, err := q.db.ExecContext(ctx, insertBannedIp, arg.IpAddress, arg.Reason)
	return err
}

const listBannedIps = `-- name: ListBannedIps :many
SELECT id, ip_address, reason, created_at FROM banned_ips ORDER BY created_at DESC
`

func (q *Queries) ListBannedIps(ctx context.Context) ([]*BannedIp, error) {
	rows, err := q.db.QueryContext(ctx, listBannedIps)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*BannedIp
	for rows.Next() {
		var i BannedIp
		if err := rows.Scan(
			&i.ID,
			&i.IpAddress,
			&i.Reason,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
