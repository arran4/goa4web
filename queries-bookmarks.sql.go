// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: queries-bookmarks.sql

package main

import (
	"context"
	"database/sql"
)

const add_bookmarks = `-- name: Add_bookmarks :exec
INSERT INTO bookmarks (users_idusers, list)
VALUES (?, ?)
`

type Add_bookmarksParams struct {
	UsersIdusers int32
	List         sql.NullString
}

// This query adds a new entry to the "bookmarks" table and returns the last inserted ID as "returnthis".
func (q *Queries) Add_bookmarks(ctx context.Context, arg Add_bookmarksParams) error {
	_, err := q.db.ExecContext(ctx, add_bookmarks, arg.UsersIdusers, arg.List)
	return err
}

const show_bookmarks = `-- name: Show_bookmarks :one
SELECT Idbookmarks, list
FROM bookmarks
WHERE users_idusers = ?
`

type Show_bookmarksRow struct {
	Idbookmarks int32
	List        sql.NullString
}

// This query retrieves the "list" from the "bookmarks" table for a specific user based on their "users_idusers".
func (q *Queries) Show_bookmarks(ctx context.Context, usersIdusers int32) (*Show_bookmarksRow, error) {
	row := q.db.QueryRowContext(ctx, show_bookmarks, usersIdusers)
	var i Show_bookmarksRow
	err := row.Scan(&i.Idbookmarks, &i.List)
	return &i, err
}

const update_bookmarks = `-- name: Update_bookmarks :exec
UPDATE bookmarks
SET list = ?
WHERE users_idusers = ?
`

type Update_bookmarksParams struct {
	List         sql.NullString
	UsersIdusers int32
}

// This query updates the "list" column in the "bookmarks" table for a specific user based on their "users_idusers".
func (q *Queries) Update_bookmarks(ctx context.Context, arg Update_bookmarksParams) error {
	_, err := q.db.ExecContext(ctx, update_bookmarks, arg.List, arg.UsersIdusers)
	return err
}
