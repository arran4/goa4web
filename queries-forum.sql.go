// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries-forum.sql

package main

import (
	"context"
	"database/sql"
)

const createForumCategory = `-- name: CreateForumCategory :exec
INSERT INTO forumcategory (forumcategory_idforumcategory, title, description) VALUES (?, ?, ?)
`

type CreateForumCategoryParams struct {
	ForumcategoryIdforumcategory int32
	Title                        sql.NullString
	Description                  sql.NullString
}

func (q *Queries) CreateForumCategory(ctx context.Context, arg CreateForumCategoryParams) error {
	_, err := q.db.ExecContext(ctx, createForumCategory, arg.ForumcategoryIdforumcategory, arg.Title, arg.Description)
	return err
}

const createForumTopic = `-- name: CreateForumTopic :execlastid
INSERT INTO forumtopic (forumcategory_idforumcategory, title, description) VALUES (?, ?, ?)
`

type CreateForumTopicParams struct {
	ForumcategoryIdforumcategory int32
	Title                        sql.NullString
	Description                  sql.NullString
}

func (q *Queries) CreateForumTopic(ctx context.Context, arg CreateForumTopicParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createForumTopic, arg.ForumcategoryIdforumcategory, arg.Title, arg.Description)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const deleteUsersForumTopicLevelPermission = `-- name: DeleteUsersForumTopicLevelPermission :exec
DELETE FROM userstopiclevel WHERE forumtopic_idforumtopic = ? AND users_idusers = ?
`

type DeleteUsersForumTopicLevelPermissionParams struct {
	ForumtopicIdforumtopic int32
	UsersIdusers           int32
}

func (q *Queries) DeleteUsersForumTopicLevelPermission(ctx context.Context, arg DeleteUsersForumTopicLevelPermissionParams) error {
	_, err := q.db.ExecContext(ctx, deleteUsersForumTopicLevelPermission, arg.ForumtopicIdforumtopic, arg.UsersIdusers)
	return err
}

const findForumTopicByTitle = `-- name: FindForumTopicByTitle :one
SELECT idforumtopic, lastposter, forumcategory_idforumcategory, title, description, threads, comments, lastaddition
FROM forumtopic
WHERE title=?
`

func (q *Queries) FindForumTopicByTitle(ctx context.Context, title sql.NullString) (*Forumtopic, error) {
	row := q.db.QueryRowContext(ctx, findForumTopicByTitle, title)
	var i Forumtopic
	err := row.Scan(
		&i.Idforumtopic,
		&i.Lastposter,
		&i.ForumcategoryIdforumcategory,
		&i.Title,
		&i.Description,
		&i.Threads,
		&i.Comments,
		&i.Lastaddition,
	)
	return &i, err
}

const getAllForumCategories = `-- name: GetAllForumCategories :many
SELECT f.idforumcategory, f.forumcategory_idforumcategory, f.title, f.description
FROM forumcategory f
`

func (q *Queries) GetAllForumCategories(ctx context.Context) ([]*Forumcategory, error) {
	rows, err := q.db.QueryContext(ctx, getAllForumCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Forumcategory
	for rows.Next() {
		var i Forumcategory
		if err := rows.Scan(
			&i.Idforumcategory,
			&i.ForumcategoryIdforumcategory,
			&i.Title,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllForumTopics = `-- name: GetAllForumTopics :many
SELECT t.idforumtopic, t.lastposter, t.forumcategory_idforumcategory, t.title, t.description, t.threads, t.comments, t.lastaddition
FROM forumtopic t
GROUP BY t.idforumtopic
`

func (q *Queries) GetAllForumTopics(ctx context.Context) ([]*Forumtopic, error) {
	rows, err := q.db.QueryContext(ctx, getAllForumTopics)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Forumtopic
	for rows.Next() {
		var i Forumtopic
		if err := rows.Scan(
			&i.Idforumtopic,
			&i.Lastposter,
			&i.ForumcategoryIdforumcategory,
			&i.Title,
			&i.Description,
			&i.Threads,
			&i.Comments,
			&i.Lastaddition,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllForumTopicsByCategoryIdForUserWithLastPosterName = `-- name: GetAllForumTopicsByCategoryIdForUserWithLastPosterName :many
SELECT t.idforumtopic, t.lastposter, t.forumcategory_idforumcategory, t.title, t.description, t.threads, t.comments, t.lastaddition, lu.username AS LastPosterUsername
FROM forumtopic t
LEFT JOIN topicrestrictions r ON t.idforumtopic = r.forumtopic_idforumtopic
LEFT JOIN userstopiclevel u ON u.forumtopic_idforumtopic = t.idforumtopic AND u.users_idusers = ?
LEFT JOIN users lu ON lu.idusers = t.lastposter
WHERE t.forumcategory_idforumcategory = ? AND IF(r.seelevel IS NOT NULL, r.seelevel , 0) <= IF(u.level IS NOT NULL, u.level, 0)
ORDER BY t.lastaddition DESC
`

type GetAllForumTopicsByCategoryIdForUserWithLastPosterNameParams struct {
	UsersIdusers                 int32
	ForumcategoryIdforumcategory int32
}

type GetAllForumTopicsByCategoryIdForUserWithLastPosterNameRow struct {
	Idforumtopic                 int32
	Lastposter                   int32
	ForumcategoryIdforumcategory int32
	Title                        sql.NullString
	Description                  sql.NullString
	Threads                      sql.NullInt32
	Comments                     sql.NullInt32
	Lastaddition                 sql.NullTime
	Lastposterusername           sql.NullString
}

func (q *Queries) GetAllForumTopicsByCategoryIdForUserWithLastPosterName(ctx context.Context, arg GetAllForumTopicsByCategoryIdForUserWithLastPosterNameParams) ([]*GetAllForumTopicsByCategoryIdForUserWithLastPosterNameRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllForumTopicsByCategoryIdForUserWithLastPosterName, arg.UsersIdusers, arg.ForumcategoryIdforumcategory)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetAllForumTopicsByCategoryIdForUserWithLastPosterNameRow
	for rows.Next() {
		var i GetAllForumTopicsByCategoryIdForUserWithLastPosterNameRow
		if err := rows.Scan(
			&i.Idforumtopic,
			&i.Lastposter,
			&i.ForumcategoryIdforumcategory,
			&i.Title,
			&i.Description,
			&i.Threads,
			&i.Comments,
			&i.Lastaddition,
			&i.Lastposterusername,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllForumTopicsForUser = `-- name: GetAllForumTopicsForUser :many
SELECT t.idforumtopic, t.lastposter, t.forumcategory_idforumcategory, t.title, t.description, t.threads, t.comments, t.lastaddition, lu.username AS LastPosterUsername, r.seelevel, u.level
FROM forumtopic t
LEFT JOIN topicrestrictions r ON t.idforumtopic = r.forumtopic_idforumtopic
LEFT JOIN userstopiclevel u ON u.forumtopic_idforumtopic = t.idforumtopic AND u.users_idusers = ?
LEFT JOIN users lu ON lu.idusers = t.lastposter
WHERE IF(r.seelevel IS NOT NULL, r.seelevel , 0) <= IF(u.level IS NOT NULL, u.level, 0)
ORDER BY t.lastaddition DESC
`

type GetAllForumTopicsForUserRow struct {
	Idforumtopic                 int32
	Lastposter                   int32
	ForumcategoryIdforumcategory int32
	Title                        sql.NullString
	Description                  sql.NullString
	Threads                      sql.NullInt32
	Comments                     sql.NullInt32
	Lastaddition                 sql.NullTime
	Lastposterusername           sql.NullString
	Seelevel                     sql.NullInt32
	Level                        sql.NullInt32
}

func (q *Queries) GetAllForumTopicsForUser(ctx context.Context, usersIdusers int32) ([]*GetAllForumTopicsForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllForumTopicsForUser, usersIdusers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetAllForumTopicsForUserRow
	for rows.Next() {
		var i GetAllForumTopicsForUserRow
		if err := rows.Scan(
			&i.Idforumtopic,
			&i.Lastposter,
			&i.ForumcategoryIdforumcategory,
			&i.Title,
			&i.Description,
			&i.Threads,
			&i.Comments,
			&i.Lastaddition,
			&i.Lastposterusername,
			&i.Seelevel,
			&i.Level,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllForumTopicsForUserWithPermissionsRestrictionsAndTopic = `-- name: GetAllForumTopicsForUserWithPermissionsRestrictionsAndTopic :many
SELECT u.idusers, u.email, u.passwd, u.username, t.idforumtopic, t.lastposter, t.forumcategory_idforumcategory, t.title, t.description, t.threads, t.comments, t.lastaddition, utl.users_idusers, utl.forumtopic_idforumtopic, utl.level, utl.invitemax, tr.forumtopic_idforumtopic, tr.viewlevel, tr.replylevel, tr.newthreadlevel, tr.seelevel, tr.invitelevel, tr.readlevel, tr.modlevel, tr.adminlevel
FROM users u
JOIN userstopiclevel utl ON utl.users_idusers=u.idusers
JOIN forumtopic t ON utl.forumtopic_idforumtopic = t.idforumtopic
JOIN topicrestrictions tr ON t.idforumtopic = tr.forumtopic_idforumtopic
WHERE u.idusers = ?
`

type GetAllForumTopicsForUserWithPermissionsRestrictionsAndTopicRow struct {
	Idusers                      int32
	Email                        sql.NullString
	Passwd                       sql.NullString
	Username                     sql.NullString
	Idforumtopic                 int32
	Lastposter                   int32
	ForumcategoryIdforumcategory int32
	Title                        sql.NullString
	Description                  sql.NullString
	Threads                      sql.NullInt32
	Comments                     sql.NullInt32
	Lastaddition                 sql.NullTime
	UsersIdusers                 int32
	ForumtopicIdforumtopic       int32
	Level                        sql.NullInt32
	Invitemax                    sql.NullInt32
	ForumtopicIdforumtopic_2     int32
	Viewlevel                    sql.NullInt32
	Replylevel                   sql.NullInt32
	Newthreadlevel               sql.NullInt32
	Seelevel                     sql.NullInt32
	Invitelevel                  sql.NullInt32
	Readlevel                    sql.NullInt32
	Modlevel                     sql.NullInt32
	Adminlevel                   sql.NullInt32
}

func (q *Queries) GetAllForumTopicsForUserWithPermissionsRestrictionsAndTopic(ctx context.Context, idusers int32) ([]*GetAllForumTopicsForUserWithPermissionsRestrictionsAndTopicRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllForumTopicsForUserWithPermissionsRestrictionsAndTopic, idusers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetAllForumTopicsForUserWithPermissionsRestrictionsAndTopicRow
	for rows.Next() {
		var i GetAllForumTopicsForUserWithPermissionsRestrictionsAndTopicRow
		if err := rows.Scan(
			&i.Idusers,
			&i.Email,
			&i.Passwd,
			&i.Username,
			&i.Idforumtopic,
			&i.Lastposter,
			&i.ForumcategoryIdforumcategory,
			&i.Title,
			&i.Description,
			&i.Threads,
			&i.Comments,
			&i.Lastaddition,
			&i.UsersIdusers,
			&i.ForumtopicIdforumtopic,
			&i.Level,
			&i.Invitemax,
			&i.ForumtopicIdforumtopic_2,
			&i.Viewlevel,
			&i.Replylevel,
			&i.Newthreadlevel,
			&i.Seelevel,
			&i.Invitelevel,
			&i.Readlevel,
			&i.Modlevel,
			&i.Adminlevel,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllForumTopicsWithPermissionsAndTopic = `-- name: GetAllForumTopicsWithPermissionsAndTopic :many
SELECT u.idusers, u.email, u.passwd, u.username, t.idforumtopic, t.lastposter, t.forumcategory_idforumcategory, t.title, t.description, t.threads, t.comments, t.lastaddition, utl.users_idusers, utl.forumtopic_idforumtopic, utl.level, utl.invitemax, tr.forumtopic_idforumtopic, tr.viewlevel, tr.replylevel, tr.newthreadlevel, tr.seelevel, tr.invitelevel, tr.readlevel, tr.modlevel, tr.adminlevel
FROM users u
JOIN userstopiclevel utl ON utl.users_idusers=u.idusers
JOIN forumtopic t ON utl.forumtopic_idforumtopic = t.idforumtopic
LEFT JOIN topicrestrictions tr ON t.idforumtopic = tr.forumtopic_idforumtopic
`

type GetAllForumTopicsWithPermissionsAndTopicRow struct {
	Idusers                      int32
	Email                        sql.NullString
	Passwd                       sql.NullString
	Username                     sql.NullString
	Idforumtopic                 int32
	Lastposter                   int32
	ForumcategoryIdforumcategory int32
	Title                        sql.NullString
	Description                  sql.NullString
	Threads                      sql.NullInt32
	Comments                     sql.NullInt32
	Lastaddition                 sql.NullTime
	UsersIdusers                 int32
	ForumtopicIdforumtopic       int32
	Level                        sql.NullInt32
	Invitemax                    sql.NullInt32
	ForumtopicIdforumtopic_2     sql.NullInt32
	Viewlevel                    sql.NullInt32
	Replylevel                   sql.NullInt32
	Newthreadlevel               sql.NullInt32
	Seelevel                     sql.NullInt32
	Invitelevel                  sql.NullInt32
	Readlevel                    sql.NullInt32
	Modlevel                     sql.NullInt32
	Adminlevel                   sql.NullInt32
}

func (q *Queries) GetAllForumTopicsWithPermissionsAndTopic(ctx context.Context) ([]*GetAllForumTopicsWithPermissionsAndTopicRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllForumTopicsWithPermissionsAndTopic)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetAllForumTopicsWithPermissionsAndTopicRow
	for rows.Next() {
		var i GetAllForumTopicsWithPermissionsAndTopicRow
		if err := rows.Scan(
			&i.Idusers,
			&i.Email,
			&i.Passwd,
			&i.Username,
			&i.Idforumtopic,
			&i.Lastposter,
			&i.ForumcategoryIdforumcategory,
			&i.Title,
			&i.Description,
			&i.Threads,
			&i.Comments,
			&i.Lastaddition,
			&i.UsersIdusers,
			&i.ForumtopicIdforumtopic,
			&i.Level,
			&i.Invitemax,
			&i.ForumtopicIdforumtopic_2,
			&i.Viewlevel,
			&i.Replylevel,
			&i.Newthreadlevel,
			&i.Seelevel,
			&i.Invitelevel,
			&i.Readlevel,
			&i.Modlevel,
			&i.Adminlevel,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllGetAllForumCategoriesWithSubcategoryCount = `-- name: GetAllGetAllForumCategoriesWithSubcategoryCount :many
SELECT c.idforumcategory, c.forumcategory_idforumcategory, c.title, c.description, COUNT(c2.idforumcategory) as SubcategoryCount, COUNT(t.idforumtopic) as TopicCount
FROM forumcategory c
LEFT JOIN forumcategory c2 ON c.idforumcategory = c2.forumcategory_idforumcategory
LEFT JOIN forumtopic t ON c.idforumcategory = t.forumcategory_idforumcategory
GROUP BY c.idforumcategory
`

type GetAllGetAllForumCategoriesWithSubcategoryCountRow struct {
	Idforumcategory              int32
	ForumcategoryIdforumcategory int32
	Title                        sql.NullString
	Description                  sql.NullString
	Subcategorycount             int64
	Topiccount                   int64
}

func (q *Queries) GetAllGetAllForumCategoriesWithSubcategoryCount(ctx context.Context) ([]*GetAllGetAllForumCategoriesWithSubcategoryCountRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllGetAllForumCategoriesWithSubcategoryCount)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetAllGetAllForumCategoriesWithSubcategoryCountRow
	for rows.Next() {
		var i GetAllGetAllForumCategoriesWithSubcategoryCountRow
		if err := rows.Scan(
			&i.Idforumcategory,
			&i.ForumcategoryIdforumcategory,
			&i.Title,
			&i.Description,
			&i.Subcategorycount,
			&i.Topiccount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getForumThreadsByForumTopicIdForUserWithFirstAndLastPosterAndFirstPostText = `-- name: GetForumThreadsByForumTopicIdForUserWithFirstAndLastPosterAndFirstPostText :many
SELECT th.idforumthread, th.firstpost, th.lastposter, th.forumtopic_idforumtopic, th.comments, th.lastaddition, th.locked, lu.username AS lastposterusername, lu.idusers AS lastposterid, fcu.username as firstpostusername, fc.written as firstpostwritten, fc.text as firstposttext
FROM forumthread th
LEFT JOIN forumtopic t ON th.forumtopic_idforumtopic=t.idforumtopic
LEFT JOIN topicrestrictions r ON t.idforumtopic = r.forumtopic_idforumtopic
LEFT JOIN userstopiclevel u ON u.forumtopic_idforumtopic = t.idforumtopic AND u.users_idusers = ?
LEFT JOIN users lu ON lu.idusers = t.lastposter
LEFT JOIN comments fc ON th.firstpost=fc.idcomments
LEFT JOIN users fcu ON fcu.idusers = fc.users_idusers
WHERE th.forumtopic_idforumtopic=? AND IF(r.seelevel IS NOT NULL, r.seelevel , 0) <= IF(u.level IS NOT NULL, u.level, 0)
ORDER BY th.lastaddition DESC
`

type GetForumThreadsByForumTopicIdForUserWithFirstAndLastPosterAndFirstPostTextParams struct {
	UsersIdusers           int32
	ForumtopicIdforumtopic int32
}

type GetForumThreadsByForumTopicIdForUserWithFirstAndLastPosterAndFirstPostTextRow struct {
	Idforumthread          int32
	Firstpost              int32
	Lastposter             int32
	ForumtopicIdforumtopic int32
	Comments               sql.NullInt32
	Lastaddition           sql.NullTime
	Locked                 sql.NullBool
	Lastposterusername     sql.NullString
	Lastposterid           sql.NullInt32
	Firstpostusername      sql.NullString
	Firstpostwritten       sql.NullTime
	Firstposttext          sql.NullString
}

func (q *Queries) GetForumThreadsByForumTopicIdForUserWithFirstAndLastPosterAndFirstPostText(ctx context.Context, arg GetForumThreadsByForumTopicIdForUserWithFirstAndLastPosterAndFirstPostTextParams) ([]*GetForumThreadsByForumTopicIdForUserWithFirstAndLastPosterAndFirstPostTextRow, error) {
	rows, err := q.db.QueryContext(ctx, getForumThreadsByForumTopicIdForUserWithFirstAndLastPosterAndFirstPostText, arg.UsersIdusers, arg.ForumtopicIdforumtopic)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetForumThreadsByForumTopicIdForUserWithFirstAndLastPosterAndFirstPostTextRow
	for rows.Next() {
		var i GetForumThreadsByForumTopicIdForUserWithFirstAndLastPosterAndFirstPostTextRow
		if err := rows.Scan(
			&i.Idforumthread,
			&i.Firstpost,
			&i.Lastposter,
			&i.ForumtopicIdforumtopic,
			&i.Comments,
			&i.Lastaddition,
			&i.Locked,
			&i.Lastposterusername,
			&i.Lastposterid,
			&i.Firstpostusername,
			&i.Firstpostwritten,
			&i.Firstposttext,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getForumTopicByIdForUser = `-- name: GetForumTopicByIdForUser :one
SELECT t.idforumtopic, t.lastposter, t.forumcategory_idforumcategory, t.title, t.description, t.threads, t.comments, t.lastaddition, lu.username AS LastPosterUsername, r.seelevel, u.level
FROM forumtopic t
LEFT JOIN topicrestrictions r ON t.idforumtopic = r.forumtopic_idforumtopic
LEFT JOIN userstopiclevel u ON u.forumtopic_idforumtopic = t.idforumtopic AND u.users_idusers = ?
LEFT JOIN users lu ON lu.idusers = t.lastposter
WHERE IF(r.seelevel IS NOT NULL, r.seelevel , 0) <= IF(u.level IS NOT NULL, u.level, 0) AND t.idforumtopic=?
ORDER BY t.lastaddition DESC
`

type GetForumTopicByIdForUserParams struct {
	UsersIdusers int32
	Idforumtopic int32
}

type GetForumTopicByIdForUserRow struct {
	Idforumtopic                 int32
	Lastposter                   int32
	ForumcategoryIdforumcategory int32
	Title                        sql.NullString
	Description                  sql.NullString
	Threads                      sql.NullInt32
	Comments                     sql.NullInt32
	Lastaddition                 sql.NullTime
	Lastposterusername           sql.NullString
	Seelevel                     sql.NullInt32
	Level                        sql.NullInt32
}

func (q *Queries) GetForumTopicByIdForUser(ctx context.Context, arg GetForumTopicByIdForUserParams) (*GetForumTopicByIdForUserRow, error) {
	row := q.db.QueryRowContext(ctx, getForumTopicByIdForUser, arg.UsersIdusers, arg.Idforumtopic)
	var i GetForumTopicByIdForUserRow
	err := row.Scan(
		&i.Idforumtopic,
		&i.Lastposter,
		&i.ForumcategoryIdforumcategory,
		&i.Title,
		&i.Description,
		&i.Threads,
		&i.Comments,
		&i.Lastaddition,
		&i.Lastposterusername,
		&i.Seelevel,
		&i.Level,
	)
	return &i, err
}

const rebuildAllForumTopicMetaColumns = `-- name: RebuildAllForumTopicMetaColumns :exec
UPDATE forumtopic
SET threads = (
    SELECT COUNT(idforumthread)
    FROM forumthread
    WHERE forumtopic_idforumtopic = idforumtopic
), comments = (
    SELECT SUM(comments)
    FROM forumthread
    WHERE forumtopic_idforumtopic = idforumtopic
), lastaddition = (
    SELECT lastaddition
    FROM forumthread
    WHERE forumtopic_idforumtopic = idforumtopic
    ORDER BY lastaddition DESC
    LIMIT 1
), lastposter = (
    SELECT lastposter
    FROM forumthread
    WHERE forumtopic_idforumtopic = idforumtopic
    ORDER BY lastaddition DESC
    LIMIT 1
)
`

func (q *Queries) RebuildAllForumTopicMetaColumns(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, rebuildAllForumTopicMetaColumns)
	return err
}

const rebuildForumTopicByIdMetaColumns = `-- name: RebuildForumTopicByIdMetaColumns :exec
UPDATE forumtopic
SET threads = (
    SELECT COUNT(idforumthread)
    FROM forumthread
    WHERE forumtopic_idforumtopic = idforumtopic
), comments = (
    SELECT SUM(comments)
    FROM forumthread
    WHERE forumtopic_idforumtopic = idforumtopic
), lastaddition = (
    SELECT lastaddition
    FROM forumthread
    WHERE forumtopic_idforumtopic = idforumtopic
    ORDER BY lastaddition DESC
    LIMIT 1
), lastposter = (
    SELECT lastposter
    FROM forumthread
    WHERE forumtopic_idforumtopic = idforumtopic
    ORDER BY lastaddition DESC
    LIMIT 1
)
WHERE idforumtopic = ?
`

func (q *Queries) RebuildForumTopicByIdMetaColumns(ctx context.Context, idforumtopic int32) error {
	_, err := q.db.ExecContext(ctx, rebuildForumTopicByIdMetaColumns, idforumtopic)
	return err
}

const updateForumCategory = `-- name: UpdateForumCategory :exec
UPDATE forumcategory SET title = ?, description = ?, forumcategory_idforumcategory = ? WHERE idforumcategory = ?
`

type UpdateForumCategoryParams struct {
	Title                        sql.NullString
	Description                  sql.NullString
	ForumcategoryIdforumcategory int32
	Idforumcategory              int32
}

func (q *Queries) UpdateForumCategory(ctx context.Context, arg UpdateForumCategoryParams) error {
	_, err := q.db.ExecContext(ctx, updateForumCategory,
		arg.Title,
		arg.Description,
		arg.ForumcategoryIdforumcategory,
		arg.Idforumcategory,
	)
	return err
}

const deleteForumCategory = `-- name: DeleteForumCategory :exec
DELETE FROM forumcategory WHERE idforumcategory = ?`

func (q *Queries) DeleteForumCategory(ctx context.Context, idforumcategory int32) error {
	_, err := q.db.ExecContext(ctx, deleteForumCategory, idforumcategory)
	return err
}

const updateForumTopic = `-- name: UpdateForumTopic :exec
UPDATE forumtopic SET title = ?, description = ?, forumcategory_idforumcategory = ? WHERE idforumtopic = ?
`

type UpdateForumTopicParams struct {
	Title                        sql.NullString
	Description                  sql.NullString
	ForumcategoryIdforumcategory int32
	Idforumtopic                 int32
}

func (q *Queries) UpdateForumTopic(ctx context.Context, arg UpdateForumTopicParams) error {
	_, err := q.db.ExecContext(ctx, updateForumTopic,
		arg.Title,
		arg.Description,
		arg.ForumcategoryIdforumcategory,
		arg.Idforumtopic,
	)
	return err
}

const upsertUsersForumTopicLevelPermission = `-- name: UpsertUsersForumTopicLevelPermission :exec
INSERT INTO userstopiclevel (forumtopic_idforumtopic, users_idusers, level, invitemax)
VALUES (?, ?, ?, ?)
ON DUPLICATE KEY UPDATE level = VALUES(level), invitemax = VALUES(invitemax)
`

type UpsertUsersForumTopicLevelPermissionParams struct {
	ForumtopicIdforumtopic int32
	UsersIdusers           int32
	Level                  sql.NullInt32
	Invitemax              sql.NullInt32
}

func (q *Queries) UpsertUsersForumTopicLevelPermission(ctx context.Context, arg UpsertUsersForumTopicLevelPermissionParams) error {
	_, err := q.db.ExecContext(ctx, upsertUsersForumTopicLevelPermission,
		arg.ForumtopicIdforumtopic,
		arg.UsersIdusers,
		arg.Level,
		arg.Invitemax,
	)
	return err
}

// deleteForumTopic removes a forum topic by ID.
const deleteForumTopic = `-- name: DeleteForumTopic :exec
DELETE FROM forumtopic WHERE idforumtopic = ?`

func (q *Queries) DeleteForumTopic(ctx context.Context, idforumtopic int32) error {
	_, err := q.db.ExecContext(ctx, deleteForumTopic, idforumtopic)
	return err
}
