// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: queries-imagebbs.sql

package main

import (
	"context"
	"database/sql"
)

const addImage = `-- name: AddImage :exec
INSERT INTO imagepost (imageboard_idimageboard, thumbnail, fullimage, users_idusers, description, posted)
VALUES (?, ?, ?, ?, ?, NOW())
`

type AddImageParams struct {
	ImageboardIdimageboard int32
	Thumbnail              sql.NullString
	Fullimage              sql.NullString
	UsersIdusers           int32
	Description            sql.NullString
}

func (q *Queries) AddImage(ctx context.Context, arg AddImageParams) error {
	_, err := q.db.ExecContext(ctx, addImage,
		arg.ImageboardIdimageboard,
		arg.Thumbnail,
		arg.Fullimage,
		arg.UsersIdusers,
		arg.Description,
	)
	return err
}

const assignImagePostThisThreadId = `-- name: AssignImagePostThisThreadId :exec
UPDATE imagepost SET forumthread_idforumthread = ? WHERE idimagepost = ?
`

type AssignImagePostThisThreadIdParams struct {
	ForumthreadIdforumthread int32
	Idimagepost              int32
}

func (q *Queries) AssignImagePostThisThreadId(ctx context.Context, arg AssignImagePostThisThreadIdParams) error {
	_, err := q.db.ExecContext(ctx, assignImagePostThisThreadId, arg.ForumthreadIdforumthread, arg.Idimagepost)
	return err
}

const changeImageBoard = `-- name: ChangeImageBoard :exec
UPDATE imageboard SET title = ?, description = ?, imageboard_idimageboard = ? WHERE idimageboard = ?
`

type ChangeImageBoardParams struct {
	Title                  sql.NullString
	Description            sql.NullString
	ImageboardIdimageboard int32
	Idimageboard           int32
}

func (q *Queries) ChangeImageBoard(ctx context.Context, arg ChangeImageBoardParams) error {
	_, err := q.db.ExecContext(ctx, changeImageBoard,
		arg.Title,
		arg.Description,
		arg.ImageboardIdimageboard,
		arg.Idimageboard,
	)
	return err
}

const imageboardRSS = `-- name: ImageboardRSS :exec
SELECT title, description FROM imageboard WHERE idimageboard = ?
`

type ImageboardRSSRow struct {
	Title       sql.NullString
	Description sql.NullString
}

func (q *Queries) ImageboardRSS(ctx context.Context, idimageboard int32) error {
	_, err := q.db.ExecContext(ctx, imageboardRSS, idimageboard)
	return err
}

const makeImageBoard = `-- name: MakeImageBoard :exec
INSERT INTO imageboard (imageboard_idimageboard, title, description) VALUES (?, ?, ?)
`

type MakeImageBoardParams struct {
	ImageboardIdimageboard int32
	Title                  sql.NullString
	Description            sql.NullString
}

func (q *Queries) MakeImageBoard(ctx context.Context, arg MakeImageBoardParams) error {
	_, err := q.db.ExecContext(ctx, makeImageBoard, arg.ImageboardIdimageboard, arg.Title, arg.Description)
	return err
}

const printImagePost = `-- name: PrintImagePost :one
SELECT i.idimagepost, i.forumthread_idforumthread, i.users_idusers, i.imageboard_idimageboard, i.posted, i.description, i.thumbnail, i.fullimage, u.username, th.comments
FROM imagepost i
LEFT JOIN users u ON i.users_idusers = u.idusers
LEFT JOIN forumthread th ON i.forumthread_idforumthread = th.idforumthread
WHERE i.idimagepost = ?
`

type PrintImagePostRow struct {
	Idimagepost              int32
	ForumthreadIdforumthread int32
	UsersIdusers             int32
	ImageboardIdimageboard   int32
	Posted                   sql.NullTime
	Description              sql.NullString
	Thumbnail                sql.NullString
	Fullimage                sql.NullString
	Username                 sql.NullString
	Comments                 sql.NullInt32
}

func (q *Queries) PrintImagePost(ctx context.Context, idimagepost int32) (*PrintImagePostRow, error) {
	row := q.db.QueryRowContext(ctx, printImagePost, idimagepost)
	var i PrintImagePostRow
	err := row.Scan(
		&i.Idimagepost,
		&i.ForumthreadIdforumthread,
		&i.UsersIdusers,
		&i.ImageboardIdimageboard,
		&i.Posted,
		&i.Description,
		&i.Thumbnail,
		&i.Fullimage,
		&i.Username,
		&i.Comments,
	)
	return &i, err
}

const printImagePosts = `-- name: PrintImagePosts :many
SELECT i.idimagepost, i.forumthread_idforumthread, i.users_idusers, i.imageboard_idimageboard, i.posted, i.description, i.thumbnail, i.fullimage, u.username, th.comments
FROM imagepost i
LEFT JOIN users u ON i.users_idusers = u.idusers
LEFT JOIN forumthread th ON i.forumthread_idforumthread = th.idforumthread
WHERE i.imageboard_idimageboard = ?
`

type PrintImagePostsRow struct {
	Idimagepost              int32
	ForumthreadIdforumthread int32
	UsersIdusers             int32
	ImageboardIdimageboard   int32
	Posted                   sql.NullTime
	Description              sql.NullString
	Thumbnail                sql.NullString
	Fullimage                sql.NullString
	Username                 sql.NullString
	Comments                 sql.NullInt32
}

func (q *Queries) PrintImagePosts(ctx context.Context, imageboardIdimageboard int32) ([]*PrintImagePostsRow, error) {
	rows, err := q.db.QueryContext(ctx, printImagePosts, imageboardIdimageboard)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*PrintImagePostsRow
	for rows.Next() {
		var i PrintImagePostsRow
		if err := rows.Scan(
			&i.Idimagepost,
			&i.ForumthreadIdforumthread,
			&i.UsersIdusers,
			&i.ImageboardIdimageboard,
			&i.Posted,
			&i.Description,
			&i.Thumbnail,
			&i.Fullimage,
			&i.Username,
			&i.Comments,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const printSubBoards = `-- name: PrintSubBoards :many
SELECT idimageboard, title, description FROM imageboard WHERE imageboard_idimageboard = ?
`

type PrintSubBoardsRow struct {
	Idimageboard int32
	Title        sql.NullString
	Description  sql.NullString
}

func (q *Queries) PrintSubBoards(ctx context.Context, imageboardIdimageboard int32) ([]*PrintSubBoardsRow, error) {
	rows, err := q.db.QueryContext(ctx, printSubBoards, imageboardIdimageboard)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*PrintSubBoardsRow
	for rows.Next() {
		var i PrintSubBoardsRow
		if err := rows.Scan(&i.Idimageboard, &i.Title, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const showAllBoards = `-- name: ShowAllBoards :many
SELECT b.idimageboard, b.title, b.description, b.imageboard_idimageboard, pb.title
FROM imageboard b
LEFT JOIN imageboard pb ON b.imageboard_idimageboard = pb.idimageboard OR b.imageboard_idimageboard = 0
GROUP BY b.idimageboard
`

type ShowAllBoardsRow struct {
	Idimageboard           int32
	Title                  sql.NullString
	Description            sql.NullString
	ImageboardIdimageboard int32
	Title_2                sql.NullString
}

func (q *Queries) ShowAllBoards(ctx context.Context) ([]*ShowAllBoardsRow, error) {
	rows, err := q.db.QueryContext(ctx, showAllBoards)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*ShowAllBoardsRow
	for rows.Next() {
		var i ShowAllBoardsRow
		if err := rows.Scan(
			&i.Idimageboard,
			&i.Title,
			&i.Description,
			&i.ImageboardIdimageboard,
			&i.Title_2,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
