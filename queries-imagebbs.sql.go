// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries-imagebbs.sql

package goa4web

import (
	"context"
	"database/sql"
)

const approveImagePost = `-- name: ApproveImagePost :exec
UPDATE imagepost SET approved = 1 WHERE idimagepost = ?
`

func (q *Queries) ApproveImagePost(ctx context.Context, idimagepost int32) error {
	_, err := q.db.ExecContext(ctx, approveImagePost, idimagepost)
	return err
}

const createImageBoard = `-- name: CreateImageBoard :exec
INSERT INTO imageboard (imageboard_idimageboard, title, description, approval_required) VALUES (?, ?, ?, ?)
`

type CreateImageBoardParams struct {
	ImageboardIdimageboard int32
	Title                  sql.NullString
	Description            sql.NullString
	ApprovalRequired       bool
}

func (q *Queries) CreateImageBoard(ctx context.Context, arg CreateImageBoardParams) error {
	_, err := q.db.ExecContext(ctx, createImageBoard,
		arg.ImageboardIdimageboard,
		arg.Title,
		arg.Description,
		arg.ApprovalRequired,
	)
	return err
}

const createImagePost = `-- name: CreateImagePost :execlastid
INSERT INTO imagepost (
    imageboard_idimageboard,
    thumbnail,
    fullimage,
    users_idusers,
    description,
    posted,
    approved,
    file_size
)
VALUES (?, ?, ?, ?, ?, NOW(), ?, ?)
`

type CreateImagePostParams struct {
	ImageboardIdimageboard int32
	Thumbnail              sql.NullString
	Fullimage              sql.NullString
	UsersIdusers           int32
	Description            sql.NullString
	Approved               bool
	FileSize               int32
}

func (q *Queries) CreateImagePost(ctx context.Context, arg CreateImagePostParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createImagePost,
		arg.ImageboardIdimageboard,
		arg.Thumbnail,
		arg.Fullimage,
		arg.UsersIdusers,
		arg.Description,
		arg.Approved,
		arg.FileSize,
	)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const getAllBoardsByParentBoardId = `-- name: GetAllBoardsByParentBoardId :many
SELECT idimageboard, imageboard_idimageboard, title, description, approval_required
FROM imageboard
WHERE imageboard_idimageboard = ?
`

func (q *Queries) GetAllBoardsByParentBoardId(ctx context.Context, imageboardIdimageboard int32) ([]*Imageboard, error) {
	rows, err := q.db.QueryContext(ctx, getAllBoardsByParentBoardId, imageboardIdimageboard)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Imageboard
	for rows.Next() {
		var i Imageboard
		if err := rows.Scan(
			&i.Idimageboard,
			&i.ImageboardIdimageboard,
			&i.Title,
			&i.Description,
			&i.ApprovalRequired,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllImageBoards = `-- name: GetAllImageBoards :many
SELECT b.idimageboard, b.imageboard_idimageboard, b.title, b.description, b.approval_required
FROM imageboard b
`

func (q *Queries) GetAllImageBoards(ctx context.Context) ([]*Imageboard, error) {
	rows, err := q.db.QueryContext(ctx, getAllImageBoards)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Imageboard
	for rows.Next() {
		var i Imageboard
		if err := rows.Scan(
			&i.Idimageboard,
			&i.ImageboardIdimageboard,
			&i.Title,
			&i.Description,
			&i.ApprovalRequired,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllImagePostsByBoardIdWithAuthorUsernameAndThreadCommentCount = `-- name: GetAllImagePostsByBoardIdWithAuthorUsernameAndThreadCommentCount :many
SELECT i.idimagepost, i.forumthread_idforumthread, i.users_idusers, i.imageboard_idimageboard, i.posted, i.description, i.thumbnail, i.fullimage, i.file_size, i.approved, u.username, th.comments
FROM imagepost i
LEFT JOIN users u ON i.users_idusers = u.idusers
LEFT JOIN forumthread th ON i.forumthread_idforumthread = th.idforumthread
WHERE i.imageboard_idimageboard = ? AND i.approved = 1
`

type GetAllImagePostsByBoardIdWithAuthorUsernameAndThreadCommentCountRow struct {
	Idimagepost              int32
	ForumthreadIdforumthread int32
	UsersIdusers             int32
	ImageboardIdimageboard   int32
	Posted                   sql.NullTime
	Description              sql.NullString
	Thumbnail                sql.NullString
	Fullimage                sql.NullString
	FileSize                 int32
	Approved                 bool
	Username                 sql.NullString
	Comments                 sql.NullInt32
}

func (q *Queries) GetAllImagePostsByBoardIdWithAuthorUsernameAndThreadCommentCount(ctx context.Context, imageboardIdimageboard int32) ([]*GetAllImagePostsByBoardIdWithAuthorUsernameAndThreadCommentCountRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllImagePostsByBoardIdWithAuthorUsernameAndThreadCommentCount, imageboardIdimageboard)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetAllImagePostsByBoardIdWithAuthorUsernameAndThreadCommentCountRow
	for rows.Next() {
		var i GetAllImagePostsByBoardIdWithAuthorUsernameAndThreadCommentCountRow
		if err := rows.Scan(
			&i.Idimagepost,
			&i.ForumthreadIdforumthread,
			&i.UsersIdusers,
			&i.ImageboardIdimageboard,
			&i.Posted,
			&i.Description,
			&i.Thumbnail,
			&i.Fullimage,
			&i.FileSize,
			&i.Approved,
			&i.Username,
			&i.Comments,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllImagePostsByIdWithAuthorUsernameAndThreadCommentCount = `-- name: GetAllImagePostsByIdWithAuthorUsernameAndThreadCommentCount :one
SELECT i.idimagepost, i.forumthread_idforumthread, i.users_idusers, i.imageboard_idimageboard, i.posted, i.description, i.thumbnail, i.fullimage, i.file_size, i.approved, u.username, th.comments
FROM imagepost i
LEFT JOIN users u ON i.users_idusers = u.idusers
LEFT JOIN forumthread th ON i.forumthread_idforumthread = th.idforumthread
WHERE i.idimagepost = ? AND i.approved = 1
`

type GetAllImagePostsByIdWithAuthorUsernameAndThreadCommentCountRow struct {
	Idimagepost              int32
	ForumthreadIdforumthread int32
	UsersIdusers             int32
	ImageboardIdimageboard   int32
	Posted                   sql.NullTime
	Description              sql.NullString
	Thumbnail                sql.NullString
	Fullimage                sql.NullString
	FileSize                 int32
	Approved                 bool
	Username                 sql.NullString
	Comments                 sql.NullInt32
}

func (q *Queries) GetAllImagePostsByIdWithAuthorUsernameAndThreadCommentCount(ctx context.Context, idimagepost int32) (*GetAllImagePostsByIdWithAuthorUsernameAndThreadCommentCountRow, error) {
	row := q.db.QueryRowContext(ctx, getAllImagePostsByIdWithAuthorUsernameAndThreadCommentCount, idimagepost)
	var i GetAllImagePostsByIdWithAuthorUsernameAndThreadCommentCountRow
	err := row.Scan(
		&i.Idimagepost,
		&i.ForumthreadIdforumthread,
		&i.UsersIdusers,
		&i.ImageboardIdimageboard,
		&i.Posted,
		&i.Description,
		&i.Thumbnail,
		&i.Fullimage,
		&i.FileSize,
		&i.Approved,
		&i.Username,
		&i.Comments,
	)
	return &i, err
}

const getImageBoardById = `-- name: GetImageBoardById :one
SELECT idimageboard, imageboard_idimageboard, title, description, approval_required FROM imageboard WHERE idimageboard = ?
`

func (q *Queries) GetImageBoardById(ctx context.Context, idimageboard int32) (*Imageboard, error) {
	row := q.db.QueryRowContext(ctx, getImageBoardById, idimageboard)
	var i Imageboard
	err := row.Scan(
		&i.Idimageboard,
		&i.ImageboardIdimageboard,
		&i.Title,
		&i.Description,
		&i.ApprovalRequired,
	)
	return &i, err
}

const getImagePostsByUserDescending = `-- name: GetImagePostsByUserDescending :many
SELECT i.idimagepost, i.forumthread_idforumthread, i.users_idusers, i.imageboard_idimageboard, i.posted, i.description, i.thumbnail, i.fullimage, i.file_size, i.approved, u.username, th.comments
FROM imagepost i
LEFT JOIN users u ON i.users_idusers = u.idusers
LEFT JOIN forumthread th ON i.forumthread_idforumthread = th.idforumthread
WHERE i.users_idusers = ? AND i.approved = 1
ORDER BY i.posted DESC
LIMIT ? OFFSET ?
`

type GetImagePostsByUserDescendingParams struct {
	UsersIdusers int32
	Limit        int32
	Offset       int32
}

type GetImagePostsByUserDescendingRow struct {
	Idimagepost              int32
	ForumthreadIdforumthread int32
	UsersIdusers             int32
	ImageboardIdimageboard   int32
	Posted                   sql.NullTime
	Description              sql.NullString
	Thumbnail                sql.NullString
	Fullimage                sql.NullString
	FileSize                 int32
	Approved                 bool
	Username                 sql.NullString
	Comments                 sql.NullInt32
}

func (q *Queries) GetImagePostsByUserDescending(ctx context.Context, arg GetImagePostsByUserDescendingParams) ([]*GetImagePostsByUserDescendingRow, error) {
	rows, err := q.db.QueryContext(ctx, getImagePostsByUserDescending, arg.UsersIdusers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetImagePostsByUserDescendingRow
	for rows.Next() {
		var i GetImagePostsByUserDescendingRow
		if err := rows.Scan(
			&i.Idimagepost,
			&i.ForumthreadIdforumthread,
			&i.UsersIdusers,
			&i.ImageboardIdimageboard,
			&i.Posted,
			&i.Description,
			&i.Thumbnail,
			&i.Fullimage,
			&i.FileSize,
			&i.Approved,
			&i.Username,
			&i.Comments,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateImageBoard = `-- name: UpdateImageBoard :exec
UPDATE imageboard SET title = ?, description = ?, imageboard_idimageboard = ?, approval_required = ? WHERE idimageboard = ?
`

type UpdateImageBoardParams struct {
	Title                  sql.NullString
	Description            sql.NullString
	ImageboardIdimageboard int32
	ApprovalRequired       bool
	Idimageboard           int32
}

func (q *Queries) UpdateImageBoard(ctx context.Context, arg UpdateImageBoardParams) error {
	_, err := q.db.ExecContext(ctx, updateImageBoard,
		arg.Title,
		arg.Description,
		arg.ImageboardIdimageboard,
		arg.ApprovalRequired,
		arg.Idimageboard,
	)
	return err
}

const updateImagePostByIdForumThreadId = `-- name: UpdateImagePostByIdForumThreadId :exec
UPDATE imagepost SET forumthread_idforumthread = ? WHERE idimagepost = ?
`

type UpdateImagePostByIdForumThreadIdParams struct {
	ForumthreadIdforumthread int32
	Idimagepost              int32
}

func (q *Queries) UpdateImagePostByIdForumThreadId(ctx context.Context, arg UpdateImagePostByIdForumThreadIdParams) error {
	_, err := q.db.ExecContext(ctx, updateImagePostByIdForumThreadId, arg.ForumthreadIdforumthread, arg.Idimagepost)
	return err
}
