// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: queries-languages.sql

package main

import (
	"context"
	"database/sql"
)

const createLanguage = `-- name: CreateLanguage :exec
INSERT INTO language (nameof)
VALUES (?)
`

// This query inserts a new record into the "language" table.
// Parameters:
//
//	? - Name of the new language (string)
func (q *Queries) CreateLanguage(ctx context.Context, nameof sql.NullString) error {
	_, err := q.db.ExecContext(ctx, createLanguage, nameof)
	return err
}

const deleteLanguage = `-- name: DeleteLanguage :exec
DELETE FROM language
WHERE idlanguage = ?
`

// This query deletes a record from the "language" table based on the provided "cid".
// Parameters:
//
//	? - Language ID to be deleted (int)
func (q *Queries) DeleteLanguage(ctx context.Context, idlanguage int32) error {
	_, err := q.db.ExecContext(ctx, deleteLanguage, idlanguage)
	return err
}

const fetchLanguages = `-- name: FetchLanguages :many
SELECT idlanguage, nameof FROM language
`

func (q *Queries) FetchLanguages(ctx context.Context) ([]*Language, error) {
	rows, err := q.db.QueryContext(ctx, fetchLanguages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Language
	for rows.Next() {
		var i Language
		if err := rows.Scan(&i.Idlanguage, &i.Nameof); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const renameLanguage = `-- name: RenameLanguage :exec
UPDATE language
SET nameof = ?
WHERE idlanguage = ?
`

type RenameLanguageParams struct {
	Nameof     sql.NullString
	Idlanguage int32
}

// This query updates the "nameof" field in the "language" table based on the provided "cid".
// Parameters:
//
//	? - New name for the language (string)
//	? - Language ID to be updated (int)
func (q *Queries) RenameLanguage(ctx context.Context, arg RenameLanguageParams) error {
	_, err := q.db.ExecContext(ctx, renameLanguage, arg.Nameof, arg.Idlanguage)
	return err
}
