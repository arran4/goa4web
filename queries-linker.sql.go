// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: queries-linker.sql

package main

import (
	"context"
	"database/sql"
	"strings"
)

const addToLinker = `-- name: AddToLinker :exec
INSERT INTO linker (users_idusers, linkerCategory_idlinkerCategory, title, url, description, listed)
VALUES (?, ?, ?, ?, ?, NOW())
`

type AddToLinkerParams struct {
	UsersIdusers                   int32
	LinkercategoryIdlinkercategory int32
	Title                          sql.NullString
	Url                            sql.NullString
	Description                    sql.NullString
}

func (q *Queries) AddToLinker(ctx context.Context, arg AddToLinkerParams) error {
	_, err := q.db.ExecContext(ctx, addToLinker,
		arg.UsersIdusers,
		arg.LinkercategoryIdlinkercategory,
		arg.Title,
		arg.Url,
		arg.Description,
	)
	return err
}

const addToQueue = `-- name: AddToQueue :exec
INSERT INTO linkerQueue (users_idusers, linkerCategory_idlinkerCategory, title, url, description) VALUES (?, ?, ?, ?, ?)
`

type AddToQueueParams struct {
	UsersIdusers                   int32
	LinkercategoryIdlinkercategory int32
	Title                          sql.NullString
	Url                            sql.NullString
	Description                    sql.NullString
}

func (q *Queries) AddToQueue(ctx context.Context, arg AddToQueueParams) error {
	_, err := q.db.ExecContext(ctx, addToQueue,
		arg.UsersIdusers,
		arg.LinkercategoryIdlinkercategory,
		arg.Title,
		arg.Url,
		arg.Description,
	)
	return err
}

const adminCategories = `-- name: AdminCategories :many
SELECT idlinkerCategory, title FROM linkerCategory
`

func (q *Queries) AdminCategories(ctx context.Context) ([]*Linkercategory, error) {
	rows, err := q.db.QueryContext(ctx, adminCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Linkercategory
	for rows.Next() {
		var i Linkercategory
		if err := rows.Scan(&i.Idlinkercategory, &i.Title); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const assignLinkerThisThreadId = `-- name: AssignLinkerThisThreadId :exec
UPDATE linker SET forumthread_idforumthread = ? WHERE idlinker = ?
`

type AssignLinkerThisThreadIdParams struct {
	ForumthreadIdforumthread int32
	Idlinker                 int32
}

func (q *Queries) AssignLinkerThisThreadId(ctx context.Context, arg AssignLinkerThisThreadIdParams) error {
	_, err := q.db.ExecContext(ctx, assignLinkerThisThreadId, arg.ForumthreadIdforumthread, arg.Idlinker)
	return err
}

const createCategory = `-- name: CreateCategory :exec
INSERT INTO linkerCategory (title) VALUES (?)
`

func (q *Queries) CreateCategory(ctx context.Context, title sql.NullString) error {
	_, err := q.db.ExecContext(ctx, createCategory, title)
	return err
}

const deleteCategory = `-- name: DeleteCategory :exec
DELETE FROM linkerCategory WHERE idlinkerCategory = ?
`

func (q *Queries) DeleteCategory(ctx context.Context, idlinkercategory int32) error {
	_, err := q.db.ExecContext(ctx, deleteCategory, idlinkercategory)
	return err
}

const deleteQueueItem = `-- name: DeleteQueueItem :exec
DELETE FROM linkerQueue WHERE idlinkerQueue = ?
`

func (q *Queries) DeleteQueueItem(ctx context.Context, idlinkerqueue int32) error {
	_, err := q.db.ExecContext(ctx, deleteQueueItem, idlinkerqueue)
	return err
}

const moveToLinker = `-- name: MoveToLinker :exec
INSERT INTO linker (users_idusers, linkerCategory_idlinkerCategory, language_idlanguage, title, ` + "`" + `url` + "`" + `, description)
SELECT l.users_idusers, l.linkerCategory_idlinkerCategory, l.language_idlanguage, l.title, l.url, l.description
FROM linkerQueue l
WHERE l.idlinkerQueue = ?
`

func (q *Queries) MoveToLinker(ctx context.Context, idlinkerqueue int32) error {
	_, err := q.db.ExecContext(ctx, moveToLinker, idlinkerqueue)
	return err
}

const renameCategory = `-- name: RenameCategory :exec
UPDATE linkerCategory SET title = ? WHERE idlinkerCategory = ?
`

type RenameCategoryParams struct {
	Title            sql.NullString
	Idlinkercategory int32
}

func (q *Queries) RenameCategory(ctx context.Context, arg RenameCategoryParams) error {
	_, err := q.db.ExecContext(ctx, renameCategory, arg.Title, arg.Idlinkercategory)
	return err
}

const showAdminQueue = `-- name: ShowAdminQueue :many
SELECT l.idlinkerqueue, l.language_idlanguage, l.users_idusers, l.linkercategory_idlinkercategory, l.title, l.url, l.description, u.username, c.title as category_title, c.idlinkerCategory
FROM linkerQueue l
JOIN users u ON l.users_idusers = u.idusers
JOIN linkerCategory c ON l.linkerCategory_idlinkerCategory = c.idlinkerCategory
`

type ShowAdminQueueRow struct {
	Idlinkerqueue                  int32
	LanguageIdlanguage             int32
	UsersIdusers                   int32
	LinkercategoryIdlinkercategory int32
	Title                          sql.NullString
	Url                            sql.NullString
	Description                    sql.NullString
	Username                       sql.NullString
	CategoryTitle                  sql.NullString
	Idlinkercategory               int32
}

func (q *Queries) ShowAdminQueue(ctx context.Context) ([]*ShowAdminQueueRow, error) {
	rows, err := q.db.QueryContext(ctx, showAdminQueue)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*ShowAdminQueueRow
	for rows.Next() {
		var i ShowAdminQueueRow
		if err := rows.Scan(
			&i.Idlinkerqueue,
			&i.LanguageIdlanguage,
			&i.UsersIdusers,
			&i.LinkercategoryIdlinkercategory,
			&i.Title,
			&i.Url,
			&i.Description,
			&i.Username,
			&i.CategoryTitle,
			&i.Idlinkercategory,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const showCategories = `-- name: ShowCategories :many
SELECT idlinkerCategory, title FROM linkerCategory
`

func (q *Queries) ShowCategories(ctx context.Context) ([]*Linkercategory, error) {
	rows, err := q.db.QueryContext(ctx, showCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Linkercategory
	for rows.Next() {
		var i Linkercategory
		if err := rows.Scan(&i.Idlinkercategory, &i.Title); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const showLatest = `-- name: ShowLatest :many
SELECT l.idlinker, l.language_idlanguage, l.users_idusers, l.linkercategory_idlinkercategory, l.forumthread_idforumthread, l.title, l.url, l.description, l.listed, th.Comments, lc.title as Category_Title, u.Username as PosterUsername
FROM linker l
LEFT JOIN users u ON l.users_idusers = u.idusers
LEFT JOIN linkerCategory lc ON l.linkerCategory_idlinkerCategory = lc.idlinkerCategory
LEFT JOIN forumthread th ON l.forumthread_idforumthread = th.idforumthread
WHERE lc.idlinkerCategory = ?
ORDER BY l.listed DESC
`

type ShowLatestRow struct {
	Idlinker                       int32
	LanguageIdlanguage             int32
	UsersIdusers                   int32
	LinkercategoryIdlinkercategory int32
	ForumthreadIdforumthread       int32
	Title                          sql.NullString
	Url                            sql.NullString
	Description                    sql.NullString
	Listed                         sql.NullTime
	Comments                       sql.NullInt32
	CategoryTitle                  sql.NullString
	Posterusername                 sql.NullString
}

func (q *Queries) ShowLatest(ctx context.Context, idlinkercategory int32) ([]*ShowLatestRow, error) {
	rows, err := q.db.QueryContext(ctx, showLatest, idlinkercategory)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*ShowLatestRow
	for rows.Next() {
		var i ShowLatestRow
		if err := rows.Scan(
			&i.Idlinker,
			&i.LanguageIdlanguage,
			&i.UsersIdusers,
			&i.LinkercategoryIdlinkercategory,
			&i.ForumthreadIdforumthread,
			&i.Title,
			&i.Url,
			&i.Description,
			&i.Listed,
			&i.Comments,
			&i.CategoryTitle,
			&i.Posterusername,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const showLink = `-- name: ShowLink :one
SELECT l.idlinker, l.language_idlanguage, l.users_idusers, l.linkercategory_idlinkercategory, l.forumthread_idforumthread, l.title, l.url, l.description, l.listed, u.username, lc.title
FROM linker l
JOIN users u ON l.users_idusers = u.idusers
JOIN linkerCategory lc ON l.linkerCategory_idlinkerCategory = lc.idlinkerCategory
WHERE l.idlinker = ?
`

type ShowLinkRow struct {
	Idlinker                       int32
	LanguageIdlanguage             int32
	UsersIdusers                   int32
	LinkercategoryIdlinkercategory int32
	ForumthreadIdforumthread       int32
	Title                          sql.NullString
	Url                            sql.NullString
	Description                    sql.NullString
	Listed                         sql.NullTime
	Username                       sql.NullString
	Title_2                        sql.NullString
}

func (q *Queries) ShowLink(ctx context.Context, idlinker int32) (*ShowLinkRow, error) {
	row := q.db.QueryRowContext(ctx, showLink, idlinker)
	var i ShowLinkRow
	err := row.Scan(
		&i.Idlinker,
		&i.LanguageIdlanguage,
		&i.UsersIdusers,
		&i.LinkercategoryIdlinkercategory,
		&i.ForumthreadIdforumthread,
		&i.Title,
		&i.Url,
		&i.Description,
		&i.Listed,
		&i.Username,
		&i.Title_2,
	)
	return &i, err
}

const showLinks = `-- name: ShowLinks :many
SELECT l.idlinker, l.language_idlanguage, l.users_idusers, l.linkercategory_idlinkercategory, l.forumthread_idforumthread, l.title, l.url, l.description, l.listed, u.username, lc.title
FROM linker l
JOIN users u ON l.users_idusers = u.idusers
JOIN linkerCategory lc ON l.linkerCategory_idlinkerCategory = lc.idlinkerCategory
WHERE l.idlinker IN (/*SLICE:linkerids*/?)
`

type ShowLinksRow struct {
	Idlinker                       int32
	LanguageIdlanguage             int32
	UsersIdusers                   int32
	LinkercategoryIdlinkercategory int32
	ForumthreadIdforumthread       int32
	Title                          sql.NullString
	Url                            sql.NullString
	Description                    sql.NullString
	Listed                         sql.NullTime
	Username                       sql.NullString
	Title_2                        sql.NullString
}

func (q *Queries) ShowLinks(ctx context.Context, linkerids []int32) ([]*ShowLinksRow, error) {
	query := showLinks
	var queryParams []interface{}
	if len(linkerids) > 0 {
		for _, v := range linkerids {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:linkerids*/?", strings.Repeat(",?", len(linkerids))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:linkerids*/?", "NULL", 1)
	}
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*ShowLinksRow
	for rows.Next() {
		var i ShowLinksRow
		if err := rows.Scan(
			&i.Idlinker,
			&i.LanguageIdlanguage,
			&i.UsersIdusers,
			&i.LinkercategoryIdlinkercategory,
			&i.ForumthreadIdforumthread,
			&i.Title,
			&i.Url,
			&i.Description,
			&i.Listed,
			&i.Username,
			&i.Title_2,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateQueue = `-- name: UpdateQueue :exec
UPDATE linkerQueue SET linkerCategory_idlinkerCategory = ?, title = ?, url = ?, description = ? WHERE idlinkerQueue = ?
`

type UpdateQueueParams struct {
	LinkercategoryIdlinkercategory int32
	Title                          sql.NullString
	Url                            sql.NullString
	Description                    sql.NullString
	Idlinkerqueue                  int32
}

func (q *Queries) UpdateQueue(ctx context.Context, arg UpdateQueueParams) error {
	_, err := q.db.ExecContext(ctx, updateQueue,
		arg.LinkercategoryIdlinkercategory,
		arg.Title,
		arg.Url,
		arg.Description,
		arg.Idlinkerqueue,
	)
	return err
}
