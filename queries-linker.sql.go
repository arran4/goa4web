// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries-linker.sql

package main

import (
	"context"
	"database/sql"
	"strings"
)

const assignLinkerThisThreadId = `-- name: AssignLinkerThisThreadId :exec
UPDATE linker SET forumthread_idforumthread = ? WHERE idlinker = ?
`

type AssignLinkerThisThreadIdParams struct {
	ForumthreadIdforumthread int32
	Idlinker                 int32
}

func (q *Queries) AssignLinkerThisThreadId(ctx context.Context, arg AssignLinkerThisThreadIdParams) error {
	_, err := q.db.ExecContext(ctx, assignLinkerThisThreadId, arg.ForumthreadIdforumthread, arg.Idlinker)
	return err
}

const countLinksByCategory = `-- name: CountLinksByCategory :one
SELECT COUNT(*) FROM linker WHERE linkerCategory_idlinkerCategory = ?
`

func (q *Queries) CountLinksByCategory(ctx context.Context, linkercategoryIdlinkercategory int32) (int64, error) {
	row := q.db.QueryRowContext(ctx, countLinksByCategory, linkercategoryIdlinkercategory)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createLinkerCategory = `-- name: CreateLinkerCategory :exec
INSERT INTO linkerCategory (title, position) VALUES (?, ?)
`

type CreateLinkerCategoryParams struct {
	Title    sql.NullString
	Position int32
}

func (q *Queries) CreateLinkerCategory(ctx context.Context, arg CreateLinkerCategoryParams) error {
	_, err := q.db.ExecContext(ctx, createLinkerCategory, arg.Title, arg.Position)
	return err
}

const createLinkerItem = `-- name: CreateLinkerItem :exec
INSERT INTO linker (users_idusers, linkerCategory_idlinkerCategory, title, url, description, listed)
VALUES (?, ?, ?, ?, ?, NOW())
`

type CreateLinkerItemParams struct {
	UsersIdusers                   int32
	LinkercategoryIdlinkercategory int32
	Title                          sql.NullString
	Url                            sql.NullString
	Description                    sql.NullString
}

func (q *Queries) CreateLinkerItem(ctx context.Context, arg CreateLinkerItemParams) error {
	_, err := q.db.ExecContext(ctx, createLinkerItem,
		arg.UsersIdusers,
		arg.LinkercategoryIdlinkercategory,
		arg.Title,
		arg.Url,
		arg.Description,
	)
	return err
}

const createLinkerQueuedItem = `-- name: CreateLinkerQueuedItem :exec
INSERT INTO linkerQueue (users_idusers, linkerCategory_idlinkerCategory, title, url, description) VALUES (?, ?, ?, ?, ?)
`

type CreateLinkerQueuedItemParams struct {
	UsersIdusers                   int32
	LinkercategoryIdlinkercategory int32
	Title                          sql.NullString
	Url                            sql.NullString
	Description                    sql.NullString
}

func (q *Queries) CreateLinkerQueuedItem(ctx context.Context, arg CreateLinkerQueuedItemParams) error {
	_, err := q.db.ExecContext(ctx, createLinkerQueuedItem,
		arg.UsersIdusers,
		arg.LinkercategoryIdlinkercategory,
		arg.Title,
		arg.Url,
		arg.Description,
	)
	return err
}

const deleteLinkerCategory = `-- name: DeleteLinkerCategory :exec
DELETE FROM linkerCategory WHERE idlinkerCategory = ?
`

func (q *Queries) DeleteLinkerCategory(ctx context.Context, idlinkercategory int32) error {
	_, err := q.db.ExecContext(ctx, deleteLinkerCategory, idlinkercategory)
	return err
}

const deleteLinkerQueuedItem = `-- name: DeleteLinkerQueuedItem :exec
DELETE FROM linkerQueue WHERE idlinkerQueue = ?
`

func (q *Queries) DeleteLinkerQueuedItem(ctx context.Context, idlinkerqueue int32) error {
	_, err := q.db.ExecContext(ctx, deleteLinkerQueuedItem, idlinkerqueue)
	return err
}

const getAllLinkerCategories = `-- name: GetAllLinkerCategories :many
SELECT
    lc.idlinkerCategory,
    lc.position,
    lc.title,
    lc.sortorder
FROM linkerCategory lc
ORDER BY lc.position
`

func (q *Queries) GetAllLinkerCategories(ctx context.Context) ([]*Linkercategory, error) {
	rows, err := q.db.QueryContext(ctx, getAllLinkerCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Linkercategory
	for rows.Next() {
		var i Linkercategory
		if err := rows.Scan(
			&i.Idlinkercategory,
			&i.Position,
			&i.Title,
			&i.Sortorder,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllLinkerCategoriesWithSortOrder = `-- name: GetAllLinkerCategoriesWithSortOrder :many
SELECT
    idlinkerCategory,
    position,
    title,
    sortorder
FROM linkerCategory
ORDER BY sortorder
`

type GetAllLinkerCategoriesWithSortOrderRow struct {
	Idlinkercategory int32
	Title            sql.NullString
	Sortorder        int32
}

func (q *Queries) GetAllLinkerCategoriesWithSortOrder(ctx context.Context) ([]*GetAllLinkerCategoriesWithSortOrderRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllLinkerCategoriesWithSortOrder)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetAllLinkerCategoriesWithSortOrderRow
	for rows.Next() {
		var i GetAllLinkerCategoriesWithSortOrderRow
		if err := rows.Scan(&i.Idlinkercategory, &i.Title, &i.Sortorder); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllLinkerItemsByCategoryIdWitherPosterUsernameAndCategoryTitleDescending = `-- name: GetAllLinkerItemsByCategoryIdWitherPosterUsernameAndCategoryTitleDescending :many
SELECT l.idlinker, l.language_idlanguage, l.users_idusers, l.linkercategory_idlinkercategory, l.forumthread_idforumthread, l.title, l.url, l.description, l.listed, th.Comments, lc.title as Category_Title, u.Username as PosterUsername
FROM linker l
LEFT JOIN users u ON l.users_idusers = u.idusers
LEFT JOIN linkerCategory lc ON l.linkerCategory_idlinkerCategory = lc.idlinkerCategory
LEFT JOIN forumthread th ON l.forumthread_idforumthread = th.idforumthread
WHERE (? = 0 OR lc.idlinkerCategory = ?)
ORDER BY l.listed DESC
`

type GetAllLinkerItemsByCategoryIdWitherPosterUsernameAndCategoryTitleDescendingRow struct {
	Idlinker                       int32
	LanguageIdlanguage             int32
	UsersIdusers                   int32
	LinkercategoryIdlinkercategory int32
	ForumthreadIdforumthread       int32
	Title                          sql.NullString
	Url                            sql.NullString
	Description                    sql.NullString
	Listed                         sql.NullTime
	Comments                       sql.NullInt32
	CategoryTitle                  sql.NullString
	Posterusername                 sql.NullString
}

func (q *Queries) GetAllLinkerItemsByCategoryIdWitherPosterUsernameAndCategoryTitleDescending(ctx context.Context, idlinkercategory int32) ([]*GetAllLinkerItemsByCategoryIdWitherPosterUsernameAndCategoryTitleDescendingRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllLinkerItemsByCategoryIdWitherPosterUsernameAndCategoryTitleDescending, idlinkercategory, idlinkercategory)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetAllLinkerItemsByCategoryIdWitherPosterUsernameAndCategoryTitleDescendingRow
	for rows.Next() {
		var i GetAllLinkerItemsByCategoryIdWitherPosterUsernameAndCategoryTitleDescendingRow
		if err := rows.Scan(
			&i.Idlinker,
			&i.LanguageIdlanguage,
			&i.UsersIdusers,
			&i.LinkercategoryIdlinkercategory,
			&i.ForumthreadIdforumthread,
			&i.Title,
			&i.Url,
			&i.Description,
			&i.Listed,
			&i.Comments,
			&i.CategoryTitle,
			&i.Posterusername,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllLinkerQueuedItemsWithUserAndLinkerCategoryDetails = `-- name: GetAllLinkerQueuedItemsWithUserAndLinkerCategoryDetails :many
SELECT l.idlinkerqueue, l.language_idlanguage, l.users_idusers, l.linkercategory_idlinkercategory, l.title, l.url, l.description, u.username, c.title as category_title, c.idlinkerCategory
FROM linkerQueue l
JOIN users u ON l.users_idusers = u.idusers
JOIN linkerCategory c ON l.linkerCategory_idlinkerCategory = c.idlinkerCategory
`

type GetAllLinkerQueuedItemsWithUserAndLinkerCategoryDetailsRow struct {
	Idlinkerqueue                  int32
	LanguageIdlanguage             int32
	UsersIdusers                   int32
	LinkercategoryIdlinkercategory int32
	Title                          sql.NullString
	Url                            sql.NullString
	Description                    sql.NullString
	Username                       sql.NullString
	CategoryTitle                  sql.NullString
	Idlinkercategory               int32
}

func (q *Queries) GetAllLinkerQueuedItemsWithUserAndLinkerCategoryDetails(ctx context.Context) ([]*GetAllLinkerQueuedItemsWithUserAndLinkerCategoryDetailsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllLinkerQueuedItemsWithUserAndLinkerCategoryDetails)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetAllLinkerQueuedItemsWithUserAndLinkerCategoryDetailsRow
	for rows.Next() {
		var i GetAllLinkerQueuedItemsWithUserAndLinkerCategoryDetailsRow
		if err := rows.Scan(
			&i.Idlinkerqueue,
			&i.LanguageIdlanguage,
			&i.UsersIdusers,
			&i.LinkercategoryIdlinkercategory,
			&i.Title,
			&i.Url,
			&i.Description,
			&i.Username,
			&i.CategoryTitle,
			&i.Idlinkercategory,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLinkerCategoriesWithCount = `-- name: GetLinkerCategoriesWithCount :many
SELECT c.idlinkerCategory, c.title, c.sortorder, COUNT(l.idlinker) AS linkcount
FROM linkerCategory c
LEFT JOIN linker l ON l.linkerCategory_idlinkerCategory = c.idlinkerCategory
GROUP BY c.idlinkerCategory
ORDER BY c.sortorder
`

type GetLinkerCategoriesWithCountRow struct {
	Idlinkercategory int32
	Title            sql.NullString
	Sortorder        int32
	Linkcount        int64
}

func (q *Queries) GetLinkerCategoriesWithCount(ctx context.Context) ([]*GetLinkerCategoriesWithCountRow, error) {
	rows, err := q.db.QueryContext(ctx, getLinkerCategoriesWithCount)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetLinkerCategoriesWithCountRow
	for rows.Next() {
		var i GetLinkerCategoriesWithCountRow
		if err := rows.Scan(
			&i.Idlinkercategory,
			&i.Title,
			&i.Sortorder,
			&i.Linkcount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLinkerCategoryLinkCounts = `-- name: GetLinkerCategoryLinkCounts :many
SELECT c.idlinkerCategory, c.title, c.position, COUNT(l.idlinker) as LinkCount
FROM linkerCategory c
LEFT JOIN linker l ON c.idlinkerCategory = l.linkerCategory_idlinkerCategory
GROUP BY c.idlinkerCategory
ORDER BY c.position
`

type GetLinkerCategoryLinkCountsRow struct {
	Idlinkercategory int32
	Title            sql.NullString
	Position         int32
	Linkcount        int64
}

func (q *Queries) GetLinkerCategoryLinkCounts(ctx context.Context) ([]*GetLinkerCategoryLinkCountsRow, error) {
	rows, err := q.db.QueryContext(ctx, getLinkerCategoryLinkCounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetLinkerCategoryLinkCountsRow
	for rows.Next() {
		var i GetLinkerCategoryLinkCountsRow
		if err := rows.Scan(
			&i.Idlinkercategory,
			&i.Title,
			&i.Position,
			&i.Linkcount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLinkerItemByIdWithPosterUsernameAndCategoryTitleDescending = `-- name: GetLinkerItemByIdWithPosterUsernameAndCategoryTitleDescending :one
SELECT l.idlinker, l.language_idlanguage, l.users_idusers, l.linkercategory_idlinkercategory, l.forumthread_idforumthread, l.title, l.url, l.description, l.listed, u.username, lc.title
FROM linker l
JOIN users u ON l.users_idusers = u.idusers
JOIN linkerCategory lc ON l.linkerCategory_idlinkerCategory = lc.idlinkerCategory
WHERE l.idlinker = ?
`

type GetLinkerItemByIdWithPosterUsernameAndCategoryTitleDescendingRow struct {
	Idlinker                       int32
	LanguageIdlanguage             int32
	UsersIdusers                   int32
	LinkercategoryIdlinkercategory int32
	ForumthreadIdforumthread       int32
	Title                          sql.NullString
	Url                            sql.NullString
	Description                    sql.NullString
	Listed                         sql.NullTime
	Username                       sql.NullString
	Title_2                        sql.NullString
}

func (q *Queries) GetLinkerItemByIdWithPosterUsernameAndCategoryTitleDescending(ctx context.Context, idlinker int32) (*GetLinkerItemByIdWithPosterUsernameAndCategoryTitleDescendingRow, error) {
	row := q.db.QueryRowContext(ctx, getLinkerItemByIdWithPosterUsernameAndCategoryTitleDescending, idlinker)
	var i GetLinkerItemByIdWithPosterUsernameAndCategoryTitleDescendingRow
	err := row.Scan(
		&i.Idlinker,
		&i.LanguageIdlanguage,
		&i.UsersIdusers,
		&i.LinkercategoryIdlinkercategory,
		&i.ForumthreadIdforumthread,
		&i.Title,
		&i.Url,
		&i.Description,
		&i.Listed,
		&i.Username,
		&i.Title_2,
	)
	return &i, err
}

const getLinkerItemsByIdsWithPosterUsernameAndCategoryTitleDescending = `-- name: GetLinkerItemsByIdsWithPosterUsernameAndCategoryTitleDescending :many
SELECT l.idlinker, l.language_idlanguage, l.users_idusers, l.linkercategory_idlinkercategory, l.forumthread_idforumthread, l.title, l.url, l.description, l.listed, u.username, lc.title
FROM linker l
JOIN users u ON l.users_idusers = u.idusers
JOIN linkerCategory lc ON l.linkerCategory_idlinkerCategory = lc.idlinkerCategory
WHERE l.idlinker IN (/*SLICE:linkerids*/?)
`

type GetLinkerItemsByIdsWithPosterUsernameAndCategoryTitleDescendingRow struct {
	Idlinker                       int32
	LanguageIdlanguage             int32
	UsersIdusers                   int32
	LinkercategoryIdlinkercategory int32
	ForumthreadIdforumthread       int32
	Title                          sql.NullString
	Url                            sql.NullString
	Description                    sql.NullString
	Listed                         sql.NullTime
	Username                       sql.NullString
	Title_2                        sql.NullString
}

func (q *Queries) GetLinkerItemsByIdsWithPosterUsernameAndCategoryTitleDescending(ctx context.Context, linkerids []int32) ([]*GetLinkerItemsByIdsWithPosterUsernameAndCategoryTitleDescendingRow, error) {
	query := getLinkerItemsByIdsWithPosterUsernameAndCategoryTitleDescending
	var queryParams []interface{}
	if len(linkerids) > 0 {
		for _, v := range linkerids {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:linkerids*/?", strings.Repeat(",?", len(linkerids))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:linkerids*/?", "NULL", 1)
	}
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetLinkerItemsByIdsWithPosterUsernameAndCategoryTitleDescendingRow
	for rows.Next() {
		var i GetLinkerItemsByIdsWithPosterUsernameAndCategoryTitleDescendingRow
		if err := rows.Scan(
			&i.Idlinker,
			&i.LanguageIdlanguage,
			&i.UsersIdusers,
			&i.LinkercategoryIdlinkercategory,
			&i.ForumthreadIdforumthread,
			&i.Title,
			&i.Url,
			&i.Description,
			&i.Listed,
			&i.Username,
			&i.Title_2,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const renameLinkerCategory = `-- name: RenameLinkerCategory :exec
UPDATE linkerCategory SET title = ?, position = ? WHERE idlinkerCategory = ?
`

type RenameLinkerCategoryParams struct {
	Title            sql.NullString
	Position         int32
	Idlinkercategory int32
}

func (q *Queries) RenameLinkerCategory(ctx context.Context, arg RenameLinkerCategoryParams) error {
	_, err := q.db.ExecContext(ctx, renameLinkerCategory, arg.Title, arg.Position, arg.Idlinkercategory)
	return err
}

const selectInsertLInkerQueuedItemIntoLinkerByLinkerQueueId = `-- name: SelectInsertLInkerQueuedItemIntoLinkerByLinkerQueueId :execlastid
INSERT INTO linker (users_idusers, linkerCategory_idlinkerCategory, language_idlanguage, title, ` + "`" + `url` + "`" + `, description)
SELECT l.users_idusers, l.linkerCategory_idlinkerCategory, l.language_idlanguage, l.title, l.url, l.description
FROM linkerQueue l
WHERE l.idlinkerQueue = ?
`

func (q *Queries) SelectInsertLInkerQueuedItemIntoLinkerByLinkerQueueId(ctx context.Context, idlinkerqueue int32) (int64, error) {
	result, err := q.db.ExecContext(ctx, selectInsertLInkerQueuedItemIntoLinkerByLinkerQueueId, idlinkerqueue)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const updateLinkerCategorySortOrder = `-- name: UpdateLinkerCategorySortOrder :exec
UPDATE linkerCategory SET sortorder = ? WHERE idlinkerCategory = ?
`

type UpdateLinkerCategorySortOrderParams struct {
	Sortorder        int32
	Idlinkercategory int32
}

func (q *Queries) UpdateLinkerCategorySortOrder(ctx context.Context, arg UpdateLinkerCategorySortOrderParams) error {
	_, err := q.db.ExecContext(ctx, updateLinkerCategorySortOrder, arg.Sortorder, arg.Idlinkercategory)
	return err
}

const updateLinkerQueuedItem = `-- name: UpdateLinkerQueuedItem :exec
UPDATE linkerQueue SET linkerCategory_idlinkerCategory = ?, title = ?, url = ?, description = ? WHERE idlinkerQueue = ?
`

type UpdateLinkerQueuedItemParams struct {
	LinkercategoryIdlinkercategory int32
	Title                          sql.NullString
	Url                            sql.NullString
	Description                    sql.NullString
	Idlinkerqueue                  int32
}

func (q *Queries) UpdateLinkerQueuedItem(ctx context.Context, arg UpdateLinkerQueuedItemParams) error {
	_, err := q.db.ExecContext(ctx, updateLinkerQueuedItem,
		arg.LinkercategoryIdlinkercategory,
		arg.Title,
		arg.Url,
		arg.Description,
		arg.Idlinkerqueue,
	)
	return err
}
