// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: queries-permissions.sql

package main

import (
	"context"
	"database/sql"
)

const blogsUserPermissions = `-- name: BlogsUserPermissions :many
SELECT p.idpermissions, p.level, u.username, u.email, p.section
FROM permissions p, users u
WHERE u.idusers = p.users_idusers AND p.section = "blogs"
ORDER BY p.level
`

type BlogsUserPermissionsRow struct {
	Idpermissions int32
	Level         sql.NullString
	Username      sql.NullString
	Email         sql.NullString
	Section       sql.NullString
}

func (q *Queries) BlogsUserPermissions(ctx context.Context) ([]*BlogsUserPermissionsRow, error) {
	rows, err := q.db.QueryContext(ctx, blogsUserPermissions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*BlogsUserPermissionsRow
	for rows.Next() {
		var i BlogsUserPermissionsRow
		if err := rows.Scan(
			&i.Idpermissions,
			&i.Level,
			&i.Username,
			&i.Email,
			&i.Section,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const deleteTopicRestrictions = `-- name: DeleteTopicRestrictions :exec
DELETE FROM topicrestrictions WHERE forumtopic_idforumtopic = ?
`

func (q *Queries) DeleteTopicRestrictions(ctx context.Context, forumtopicIdforumtopic int32) error {
	_, err := q.db.ExecContext(ctx, deleteTopicRestrictions, forumtopicIdforumtopic)
	return err
}

const getAllTopicRestrictions = `-- name: GetAllTopicRestrictions :many
SELECT idforumtopic, r.viewlevel, r.replylevel, r.newthreadlevel, r.seelevel, r.invitelevel, r.readlevel, t.title, r.forumtopic_idforumtopic, r.modlevel, r.adminlevel
FROM forumtopic t
LEFT JOIN topicrestrictions r ON t.idforumtopic = r.forumtopic_idforumtopic
`

type GetAllTopicRestrictionsRow struct {
	Idforumtopic           int32
	Viewlevel              sql.NullInt32
	Replylevel             sql.NullInt32
	Newthreadlevel         sql.NullInt32
	Seelevel               sql.NullInt32
	Invitelevel            sql.NullInt32
	Readlevel              sql.NullInt32
	Title                  sql.NullString
	ForumtopicIdforumtopic sql.NullInt32
	Modlevel               sql.NullInt32
	Adminlevel             sql.NullInt32
}

func (q *Queries) GetAllTopicRestrictions(ctx context.Context) ([]*GetAllTopicRestrictionsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllTopicRestrictions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetAllTopicRestrictionsRow
	for rows.Next() {
		var i GetAllTopicRestrictionsRow
		if err := rows.Scan(
			&i.Idforumtopic,
			&i.Viewlevel,
			&i.Replylevel,
			&i.Newthreadlevel,
			&i.Seelevel,
			&i.Invitelevel,
			&i.Readlevel,
			&i.Title,
			&i.ForumtopicIdforumtopic,
			&i.Modlevel,
			&i.Adminlevel,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSecurityLevel = `-- name: GetSecurityLevel :one
SELECT level FROM permissions WHERE users_idusers = ? AND (section = ? OR section = 'all')
`

type GetSecurityLevelParams struct {
	UsersIdusers int32
	Section      sql.NullString
}

func (q *Queries) GetSecurityLevel(ctx context.Context, arg GetSecurityLevelParams) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, getSecurityLevel, arg.UsersIdusers, arg.Section)
	var level sql.NullString
	err := row.Scan(&level)
	return level, err
}

const getTopicRestrictions = `-- name: GetTopicRestrictions :many
SELECT idforumtopic, r.viewlevel, r.replylevel, r.newthreadlevel, r.seelevel, r.invitelevel, r.readlevel, t.title, r.forumtopic_idforumtopic, r.modlevel, r.adminlevel
FROM forumtopic t
LEFT JOIN topicrestrictions r ON t.idforumtopic = r.forumtopic_idforumtopic
WHERE idforumtopic = ?
`

type GetTopicRestrictionsRow struct {
	Idforumtopic           int32
	Viewlevel              sql.NullInt32
	Replylevel             sql.NullInt32
	Newthreadlevel         sql.NullInt32
	Seelevel               sql.NullInt32
	Invitelevel            sql.NullInt32
	Readlevel              sql.NullInt32
	Title                  sql.NullString
	ForumtopicIdforumtopic sql.NullInt32
	Modlevel               sql.NullInt32
	Adminlevel             sql.NullInt32
}

func (q *Queries) GetTopicRestrictions(ctx context.Context, idforumtopic int32) ([]*GetTopicRestrictionsRow, error) {
	rows, err := q.db.QueryContext(ctx, getTopicRestrictions, idforumtopic)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetTopicRestrictionsRow
	for rows.Next() {
		var i GetTopicRestrictionsRow
		if err := rows.Scan(
			&i.Idforumtopic,
			&i.Viewlevel,
			&i.Replylevel,
			&i.Newthreadlevel,
			&i.Seelevel,
			&i.Invitelevel,
			&i.Readlevel,
			&i.Title,
			&i.ForumtopicIdforumtopic,
			&i.Modlevel,
			&i.Adminlevel,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserPermissions = `-- name: GetUserPermissions :one
SELECT p.idpermissions, p.users_idusers, p.section, p.level
FROM permissions p
WHERE p.users_idusers = ?
`

// This query selects permissions information for admin users.
// Result:
//
//	idpermissions (int)
//	level (int)
//	username (string)
//	email (string)
//	section (string)
func (q *Queries) GetUserPermissions(ctx context.Context, usersIdusers int32) (*Permission, error) {
	row := q.db.QueryRowContext(ctx, getUserPermissions, usersIdusers)
	var i Permission
	err := row.Scan(
		&i.Idpermissions,
		&i.UsersIdusers,
		&i.Section,
		&i.Level,
	)
	return &i, err
}

const getUsersPermissions = `-- name: GetUsersPermissions :many
SELECT p.idpermissions, p.users_idusers, p.section, p.level
FROM permissions p
`

// This query selects permissions information for admin users.
// Result:
//
//	idpermissions (int)
//	level (int)
//	username (string)
//	email (string)
//	section (string)
func (q *Queries) GetUsersPermissions(ctx context.Context) ([]*Permission, error) {
	rows, err := q.db.QueryContext(ctx, getUsersPermissions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Permission
	for rows.Next() {
		var i Permission
		if err := rows.Scan(
			&i.Idpermissions,
			&i.UsersIdusers,
			&i.Section,
			&i.Level,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersTopicLevel = `-- name: GetUsersTopicLevel :one
SELECT utl.users_idusers, utl.forumtopic_idforumtopic, utl.level, utl.invitemax
FROM userstopiclevel utl
WHERE utl.users_idusers = ? AND utl.forumtopic_idforumtopic = ?
`

type GetUsersTopicLevelParams struct {
	UsersIdusers           int32
	ForumtopicIdforumtopic int32
}

func (q *Queries) GetUsersTopicLevel(ctx context.Context, arg GetUsersTopicLevelParams) (*Userstopiclevel, error) {
	row := q.db.QueryRowContext(ctx, getUsersTopicLevel, arg.UsersIdusers, arg.ForumtopicIdforumtopic)
	var i Userstopiclevel
	err := row.Scan(
		&i.UsersIdusers,
		&i.ForumtopicIdforumtopic,
		&i.Level,
		&i.Invitemax,
	)
	return &i, err
}

const setTopicRestrictions = `-- name: SetTopicRestrictions :exec
INSERT INTO topicrestrictions (forumtopic_idforumtopic, viewlevel, replylevel, newthreadlevel, seelevel, invitelevel, readlevel, modlevel, adminlevel)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
ON DUPLICATE KEY UPDATE
    viewlevel = VALUES(viewlevel),
    replylevel = VALUES(replylevel),
    newthreadlevel = VALUES(newthreadlevel),
    seelevel = VALUES(seelevel),
    invitelevel = VALUES(invitelevel),
    readlevel = VALUES(readlevel),
    modlevel = VALUES(modlevel),
    adminlevel = VALUES(adminlevel)
`

type SetTopicRestrictionsParams struct {
	ForumtopicIdforumtopic int32
	Viewlevel              sql.NullInt32
	Replylevel             sql.NullInt32
	Newthreadlevel         sql.NullInt32
	Seelevel               sql.NullInt32
	Invitelevel            sql.NullInt32
	Readlevel              sql.NullInt32
	Modlevel               sql.NullInt32
	Adminlevel             sql.NullInt32
}

func (q *Queries) SetTopicRestrictions(ctx context.Context, arg SetTopicRestrictionsParams) error {
	_, err := q.db.ExecContext(ctx, setTopicRestrictions,
		arg.ForumtopicIdforumtopic,
		arg.Viewlevel,
		arg.Replylevel,
		arg.Newthreadlevel,
		arg.Seelevel,
		arg.Invitelevel,
		arg.Readlevel,
		arg.Modlevel,
		arg.Adminlevel,
	)
	return err
}

const userAllow = `-- name: UserAllow :exec
INSERT INTO permissions (users_idusers, section, level)
VALUES (?, ?, ?)
`

type UserAllowParams struct {
	UsersIdusers int32
	Section      sql.NullString
	Level        sql.NullString
}

// This query inserts a new permission into the "permissions" table.
// Parameters:
//
//	? - User ID to be associated with the permission (int)
//	? - Section for which the permission is granted (string)
//	? - Level of the permission (string)
func (q *Queries) UserAllow(ctx context.Context, arg UserAllowParams) error {
	_, err := q.db.ExecContext(ctx, userAllow, arg.UsersIdusers, arg.Section, arg.Level)
	return err
}

const userDisallow = `-- name: UserDisallow :exec
DELETE FROM permissions
WHERE idpermissions = ?
`

// This query deletes a permission from the "permissions" table based on the provided "permid".
// Parameters:
//
//	? - Permission ID to be deleted (int)
func (q *Queries) UserDisallow(ctx context.Context, idpermissions int32) error {
	_, err := q.db.ExecContext(ctx, userDisallow, idpermissions)
	return err
}

const user_allow = `-- name: User_allow :exec
INSERT INTO permissions (users_idusers, section, level)
VALUES (?, ?, ?)
`

type User_allowParams struct {
	UsersIdusers int32
	Section      sql.NullString
	Level        sql.NullString
}

func (q *Queries) User_allow(ctx context.Context, arg User_allowParams) error {
	_, err := q.db.ExecContext(ctx, user_allow, arg.UsersIdusers, arg.Section, arg.Level)
	return err
}
