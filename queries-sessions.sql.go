// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries-sessions.sql

package goa4web

import (
	"context"
	"database/sql"
)

const deleteSessionByID = `-- name: DeleteSessionByID :exec
DELETE FROM sessions WHERE session_id = ?
`

func (q *Queries) DeleteSessionByID(ctx context.Context, sessionID string) error {
	_, err := q.db.ExecContext(ctx, deleteSessionByID, sessionID)
	return err
}

const insertSession = `-- name: InsertSession :exec
INSERT INTO sessions (session_id, users_idusers)
VALUES (?, ?)
ON DUPLICATE KEY UPDATE users_idusers = VALUES(users_idusers)
`

type InsertSessionParams struct {
	SessionID    string
	UsersIdusers int32
}

func (q *Queries) InsertSession(ctx context.Context, arg InsertSessionParams) error {
	_, err := q.db.ExecContext(ctx, insertSession, arg.SessionID, arg.UsersIdusers)
	return err
}

const listSessions = `-- name: ListSessions :many
SELECT s.session_id, s.users_idusers, u.username
FROM sessions s
LEFT JOIN users u ON u.idusers = s.users_idusers
ORDER BY s.session_id
`

type ListSessionsRow struct {
	SessionID    string
	UsersIdusers int32
	Username     sql.NullString
}

func (q *Queries) ListSessions(ctx context.Context) ([]*ListSessionsRow, error) {
	rows, err := q.db.QueryContext(ctx, listSessions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*ListSessionsRow
	for rows.Next() {
		var i ListSessionsRow
		if err := rows.Scan(&i.SessionID, &i.UsersIdusers, &i.Username); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
