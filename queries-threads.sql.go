// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: queries-threads.sql

package main

import (
	"context"
	"database/sql"
)

const getThreadByIdForUserByIdWithLastPoserUserNameAndPermissions = `-- name: GetThreadByIdForUserByIdWithLastPoserUserNameAndPermissions :one
SELECT th.idforumthread, th.firstpost, th.lastposter, th.forumtopic_idforumtopic, th.comments, th.lastaddition, th.locked, lu.username AS LastPosterUsername, r.seelevel, u.level
FROM forumthread th
LEFT JOIN forumtopic t ON th.forumtopic_idforumtopic=t.idforumtopic
LEFT JOIN topicrestrictions r ON t.idforumtopic = r.forumtopic_idforumtopic
LEFT JOIN userstopiclevel u ON u.forumtopic_idforumtopic = t.idforumtopic AND u.users_idusers = ?
LEFT JOIN users lu ON lu.idusers = t.lastposter
WHERE IF(r.seelevel IS NOT NULL, r.seelevel , 0) <= IF(u.level IS NOT NULL, u.level, 0) AND th.idforumthread=?
ORDER BY t.lastaddition DESC
`

type GetThreadByIdForUserByIdWithLastPoserUserNameAndPermissionsParams struct {
	UsersIdusers  int32
	Idforumthread int32
}

type GetThreadByIdForUserByIdWithLastPoserUserNameAndPermissionsRow struct {
	Idforumthread          int32
	Firstpost              int32
	Lastposter             int32
	ForumtopicIdforumtopic int32
	Comments               sql.NullInt32
	Lastaddition           sql.NullTime
	Locked                 sql.NullBool
	Lastposterusername     sql.NullString
	Seelevel               sql.NullInt32
	Level                  sql.NullInt32
}

func (q *Queries) GetThreadByIdForUserByIdWithLastPoserUserNameAndPermissions(ctx context.Context, arg GetThreadByIdForUserByIdWithLastPoserUserNameAndPermissionsParams) (*GetThreadByIdForUserByIdWithLastPoserUserNameAndPermissionsRow, error) {
	row := q.db.QueryRowContext(ctx, getThreadByIdForUserByIdWithLastPoserUserNameAndPermissions, arg.UsersIdusers, arg.Idforumthread)
	var i GetThreadByIdForUserByIdWithLastPoserUserNameAndPermissionsRow
	err := row.Scan(
		&i.Idforumthread,
		&i.Firstpost,
		&i.Lastposter,
		&i.ForumtopicIdforumtopic,
		&i.Comments,
		&i.Lastaddition,
		&i.Locked,
		&i.Lastposterusername,
		&i.Seelevel,
		&i.Level,
	)
	return &i, err
}

const makeThread = `-- name: MakeThread :execlastid
INSERT INTO forumthread (forumtopic_idforumtopic) VALUES (?)
`

func (q *Queries) MakeThread(ctx context.Context, forumtopicIdforumtopic int32) (int64, error) {
	result, err := q.db.ExecContext(ctx, makeThread, forumtopicIdforumtopic)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const recalculateAllForumThreadMetaData = `-- name: RecalculateAllForumThreadMetaData :exec
UPDATE forumthread
SET lastaddition = (
    SELECT written
    FROM comments
    WHERE forumthread_idforumthread = idforumthread
    ORDER BY written DESC
    LIMIT 1
), comments = (
    SELECT COUNT(users_idusers) - 1
    FROM comments
    WHERE forumthread_idforumthread = idforumthread
), lastposter = (
    SELECT users_idusers
    FROM comments
    WHERE forumthread_idforumthread = idforumthread
    ORDER BY written DESC
    LIMIT 1
), firstpost = (
    SELECT idcomments
    FROM comments
    WHERE forumthread_idforumthread = idforumthread
    LIMIT 1
)
`

func (q *Queries) RecalculateAllForumThreadMetaData(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, recalculateAllForumThreadMetaData)
	return err
}

const recalculateForumThreadByIdMetaData = `-- name: RecalculateForumThreadByIdMetaData :exec
UPDATE forumthread
SET lastaddition = (
    SELECT written
    FROM comments
    WHERE forumthread_idforumthread = idforumthread
    ORDER BY written DESC
    LIMIT 1
), comments = (
    SELECT COUNT(users_idusers) - 1
    FROM comments
    WHERE forumthread_idforumthread = idforumthread
), lastposter = (
    SELECT users_idusers
    FROM comments
    WHERE forumthread_idforumthread = idforumthread
    ORDER BY written DESC
    LIMIT 1
), firstpost = (
    SELECT idcomments
    FROM comments
    WHERE forumthread_idforumthread = idforumthread
    LIMIT 1
)
WHERE idforumthread = ?
`

func (q *Queries) RecalculateForumThreadByIdMetaData(ctx context.Context, idforumthread int32) error {
	_, err := q.db.ExecContext(ctx, recalculateForumThreadByIdMetaData, idforumthread)
	return err
}
