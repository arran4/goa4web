// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: queries-users.sql

package main

import (
	"context"
	"database/sql"
)

const allUsers = `-- name: AllUsers :many
SELECT u.idusers, u.email, u.passwd, u.username
FROM users u
`

// This query selects all admin users from the "users" table.
// Result:
//
//	idusers (int)
//	username (string)
//	email (string)
func (q *Queries) AllUsers(ctx context.Context) ([]*User, error) {
	rows, err := q.db.QueryContext(ctx, allUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.Idusers,
			&i.Email,
			&i.Passwd,
			&i.Username,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertUser = `-- name: InsertUser :execresult
INSERT INTO users (username, passwd, email)
VALUES (?, MD5(?), ?)
`

type InsertUserParams struct {
	Username sql.NullString
	MD5      string
	Email    sql.NullString
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, insertUser, arg.Username, arg.MD5, arg.Email)
}

const listUsersSubscribedToBlogs = `-- name: ListUsersSubscribedToBlogs :many
SELECT u.email FROM blogs t, users u, preferences p
WHERE t.idblogs=? AND u.idusers=p.users_idusers AND p.emailforumupdates=1 AND u.idusers=t.users_idusers AND u.idusers!=?
GROUP BY u.idusers
`

type ListUsersSubscribedToBlogsParams struct {
	Idblogs int32
	Idusers int32
}

func (q *Queries) ListUsersSubscribedToBlogs(ctx context.Context, arg ListUsersSubscribedToBlogsParams) ([]sql.NullString, error) {
	rows, err := q.db.QueryContext(ctx, listUsersSubscribedToBlogs, arg.Idblogs, arg.Idusers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []sql.NullString
	for rows.Next() {
		var email sql.NullString
		if err := rows.Scan(&email); err != nil {
			return nil, err
		}
		items = append(items, email)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsersSubscribedToLinker = `-- name: ListUsersSubscribedToLinker :many
SELECT u.email FROM linker t, users u, preferences p
WHERE t.idlinker=? AND u.idusers=p.users_idusers AND p.emailforumupdates=1 AND u.idusers=t.users_idusers AND u.idusers!=?
GROUP BY u.idusers
`

type ListUsersSubscribedToLinkerParams struct {
	Idlinker int32
	Idusers  int32
}

func (q *Queries) ListUsersSubscribedToLinker(ctx context.Context, arg ListUsersSubscribedToLinkerParams) ([]sql.NullString, error) {
	rows, err := q.db.QueryContext(ctx, listUsersSubscribedToLinker, arg.Idlinker, arg.Idusers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []sql.NullString
	for rows.Next() {
		var email sql.NullString
		if err := rows.Scan(&email); err != nil {
			return nil, err
		}
		items = append(items, email)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsersSubscribedToThread = `-- name: ListUsersSubscribedToThread :many
SELECT u.email FROM comments c, users u, preferences p
WHERE c.forumthread_idforumthread=? AND u.idusers=p.users_idusers AND p.emailforumupdates=1 AND u.idusers=c.users_idusers AND u.idusers!=?
GROUP BY u.idusers
`

type ListUsersSubscribedToThreadParams struct {
	ForumthreadIdforumthread int32
	Idusers                  int32
}

func (q *Queries) ListUsersSubscribedToThread(ctx context.Context, arg ListUsersSubscribedToThreadParams) ([]sql.NullString, error) {
	rows, err := q.db.QueryContext(ctx, listUsersSubscribedToThread, arg.ForumthreadIdforumthread, arg.Idusers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []sql.NullString
	for rows.Next() {
		var email sql.NullString
		if err := rows.Scan(&email); err != nil {
			return nil, err
		}
		items = append(items, email)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsersSubscribedToWriting = `-- name: ListUsersSubscribedToWriting :many
SELECT u.email FROM writing t, users u, preferences p
WHERE t.idwriting=? AND u.idusers=p.users_idusers AND p.emailforumupdates=1 AND u.idusers=t.users_idusers AND u.idusers!=?
GROUP BY u.idusers
`

type ListUsersSubscribedToWritingParams struct {
	Idwriting int32
	Idusers   int32
}

func (q *Queries) ListUsersSubscribedToWriting(ctx context.Context, arg ListUsersSubscribedToWritingParams) ([]sql.NullString, error) {
	rows, err := q.db.QueryContext(ctx, listUsersSubscribedToWriting, arg.Idwriting, arg.Idusers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []sql.NullString
	for rows.Next() {
		var email sql.NullString
		if err := rows.Scan(&email); err != nil {
			return nil, err
		}
		items = append(items, email)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const login = `-- name: Login :one
SELECT idusers, email, passwd, username
FROM users
WHERE username = ? AND passwd = md5(?)
`

type LoginParams struct {
	Username sql.NullString
	MD5      string
}

func (q *Queries) Login(ctx context.Context, arg LoginParams) (*User, error) {
	row := q.db.QueryRowContext(ctx, login, arg.Username, arg.MD5)
	var i User
	err := row.Scan(
		&i.Idusers,
		&i.Email,
		&i.Passwd,
		&i.Username,
	)
	return &i, err
}

const userByEmail = `-- name: UserByEmail :one
SELECT idusers, email, passwd, username
FROM users
WHERE email = ?
`

func (q *Queries) UserByEmail(ctx context.Context, email sql.NullString) (*User, error) {
	row := q.db.QueryRowContext(ctx, userByEmail, email)
	var i User
	err := row.Scan(
		&i.Idusers,
		&i.Email,
		&i.Passwd,
		&i.Username,
	)
	return &i, err
}

const userByUid = `-- name: UserByUid :one
SELECT idusers, email, passwd, username
FROM users
WHERE idusers = ?
`

func (q *Queries) UserByUid(ctx context.Context, idusers int32) (*User, error) {
	row := q.db.QueryRowContext(ctx, userByUid, idusers)
	var i User
	err := row.Scan(
		&i.Idusers,
		&i.Email,
		&i.Passwd,
		&i.Username,
	)
	return &i, err
}

const userByUsername = `-- name: UserByUsername :one
SELECT idusers, email, passwd, username
FROM users
WHERE username = ?
`

func (q *Queries) UserByUsername(ctx context.Context, username sql.NullString) (*User, error) {
	row := q.db.QueryRowContext(ctx, userByUsername, username)
	var i User
	err := row.Scan(
		&i.Idusers,
		&i.Email,
		&i.Passwd,
		&i.Username,
	)
	return &i, err
}

const usernametouid = `-- name: Usernametouid :one
SELECT idusers FROM users WHERE username = ?
`

func (q *Queries) Usernametouid(ctx context.Context, username sql.NullString) (int32, error) {
	row := q.db.QueryRowContext(ctx, usernametouid, username)
	var idusers int32
	err := row.Scan(&idusers)
	return idusers, err
}
